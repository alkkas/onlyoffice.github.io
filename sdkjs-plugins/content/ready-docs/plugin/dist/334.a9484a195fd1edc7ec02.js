/*! For license information please see 334.a9484a195fd1edc7ec02.js.LICENSE.txt */
(self.webpackChunkready_documents=self.webpackChunkready_documents||[]).push([[334],{92220:(e,t,r)=>{var n=r(34354),a=r(23700),o=TypeError;e.exports=function(e){if(n(e))return e;throw o(a(e)+" is not a function")}},14579:(e,t,r)=>{var n=r(37829),a=r(23700),o=TypeError;e.exports=function(e){if(n(e))return e;throw o(a(e)+" is not a constructor")}},33467:(e,t,r)=>{var n=r(34354),a=String,o=TypeError;e.exports=function(e){if("object"==typeof e||n(e))return e;throw o("Can't set "+a(e)+" as a prototype")}},82834:(e,t,r)=>{var n=r(72931),a=r(99062),o=r(70378).f,i=n("unscopables"),u=Array.prototype;null==u[i]&&o(u,i,{configurable:!0,value:a(null)}),e.exports=function(e){u[i][e]=!0}},70902:(e,t,r)=>{"use strict";var n=r(99075).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},85806:(e,t,r)=>{var n=r(77652),a=TypeError;e.exports=function(e,t){if(n(t,e))return e;throw a("Incorrect invocation")}},1421:(e,t,r)=>{var n=r(21651),a=String,o=TypeError;e.exports=function(e){if(n(e))return e;throw o(a(e)+" is not an object")}},96563:e=>{e.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},59309:(e,t,r)=>{var n=r(2112);e.exports=n((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},20352:(e,t,r)=>{"use strict";var n,a,o,i=r(96563),u=r(81738),l=r(2569),s=r(34354),c=r(21651),f=r(95320),d=r(33114),p=r(23700),h=r(27632),v=r(74704),g=r(70378).f,m=r(77652),y=r(19299),b=r(64001),w=r(72931),x=r(9225),S=r(73500),E=S.enforce,k=S.get,R=l.Int8Array,C=R&&R.prototype,P=l.Uint8ClampedArray,A=P&&P.prototype,O=R&&y(R),T=C&&y(C),_=Object.prototype,M=l.TypeError,I=w("toStringTag"),L=x("TYPED_ARRAY_TAG"),D="TypedArrayConstructor",N=i&&!!b&&"Opera"!==d(l.opera),j=!1,U={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},F={BigInt64Array:8,BigUint64Array:8},z=function(e){var t=y(e);if(c(t)){var r=k(t);return r&&f(r,D)?r[D]:z(t)}},B=function(e){if(!c(e))return!1;var t=d(e);return f(U,t)||f(F,t)};for(n in U)(o=(a=l[n])&&a.prototype)?E(o)[D]=a:N=!1;for(n in F)(o=(a=l[n])&&a.prototype)&&(E(o)[D]=a);if((!N||!s(O)||O===Function.prototype)&&(O=function(){throw M("Incorrect invocation")},N))for(n in U)l[n]&&b(l[n],O);if((!N||!T||T===_)&&(T=O.prototype,N))for(n in U)l[n]&&b(l[n].prototype,T);if(N&&y(A)!==T&&b(A,T),u&&!f(T,I))for(n in j=!0,g(T,I,{get:function(){return c(this)?this[L]:void 0}}),U)l[n]&&h(l[n],L,n);e.exports={NATIVE_ARRAY_BUFFER_VIEWS:N,TYPED_ARRAY_TAG:j&&L,aTypedArray:function(e){if(B(e))return e;throw M("Target is not a typed array")},aTypedArrayConstructor:function(e){if(s(e)&&(!b||m(O,e)))return e;throw M(p(e)+" is not a typed array constructor")},exportTypedArrayMethod:function(e,t,r,n){if(u){if(r)for(var a in U){var o=l[a];if(o&&f(o.prototype,e))try{delete o.prototype[e]}catch(r){try{o.prototype[e]=t}catch(e){}}}T[e]&&!r||v(T,e,r?t:N&&C[e]||t,n)}},exportTypedArrayStaticMethod:function(e,t,r){var n,a;if(u){if(b){if(r)for(n in U)if((a=l[n])&&f(a,e))try{delete a[e]}catch(e){}if(O[e]&&!r)return;try{return v(O,e,r?t:N&&O[e]||t)}catch(e){}}for(n in U)!(a=l[n])||a[e]&&!r||v(a,e,t)}},getTypedArrayConstructor:z,isView:function(e){if(!c(e))return!1;var t=d(e);return"DataView"===t||f(U,t)||f(F,t)},isTypedArray:B,TypedArray:O,TypedArrayPrototype:T}},44659:(e,t,r)=>{"use strict";var n=r(2569),a=r(81540),o=r(81738),i=r(96563),u=r(50034),l=r(27632),s=r(6804),c=r(2112),f=r(85806),d=r(11859),p=r(89309),h=r(46546),v=r(27206),g=r(19299),m=r(64001),y=r(89704).f,b=r(70378).f,w=r(55037),x=r(12530),S=r(22087),E=r(73500),k=u.PROPER,R=u.CONFIGURABLE,C=E.get,P=E.set,A="ArrayBuffer",O="DataView",T="prototype",_="Wrong index",M=n[A],I=M,L=I&&I[T],D=n[O],N=D&&D[T],j=Object.prototype,U=n.Array,F=n.RangeError,z=a(w),B=a([].reverse),W=v.pack,V=v.unpack,H=function(e){return[255&e]},$=function(e){return[255&e,e>>8&255]},q=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},Q=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},G=function(e){return W(e,23,4)},Y=function(e){return W(e,52,8)},K=function(e,t){b(e[T],t,{get:function(){return C(this)[t]}})},X=function(e,t,r,n){var a=h(r),o=C(e);if(a+t>o.byteLength)throw F(_);var i=C(o.buffer).bytes,u=a+o.byteOffset,l=x(i,u,u+t);return n?l:B(l)},J=function(e,t,r,n,a,o){var i=h(r),u=C(e);if(i+t>u.byteLength)throw F(_);for(var l=C(u.buffer).bytes,s=i+u.byteOffset,c=n(+a),f=0;f<t;f++)l[s+f]=c[o?f:t-f-1]};if(i){var Z=k&&M.name!==A;if(c((function(){M(1)}))&&c((function(){new M(-1)}))&&!c((function(){return new M,new M(1.5),new M(NaN),1!=M.length||Z&&!R})))Z&&R&&l(M,"name",A);else{(I=function(e){return f(this,L),new M(h(e))})[T]=L;for(var ee,te=y(M),re=0;te.length>re;)(ee=te[re++])in I||l(I,ee,M[ee]);L.constructor=I}m&&g(N)!==j&&m(N,j);var ne=new D(new I(2)),ae=a(N.setInt8);ne.setInt8(0,2147483648),ne.setInt8(1,2147483649),!ne.getInt8(0)&&ne.getInt8(1)||s(N,{setInt8:function(e,t){ae(this,e,t<<24>>24)},setUint8:function(e,t){ae(this,e,t<<24>>24)}},{unsafe:!0})}else L=(I=function(e){f(this,L);var t=h(e);P(this,{bytes:z(U(t),0),byteLength:t}),o||(this.byteLength=t)})[T],N=(D=function(e,t,r){f(this,N),f(e,L);var n=C(e).byteLength,a=d(t);if(a<0||a>n)throw F("Wrong offset");if(a+(r=void 0===r?n-a:p(r))>n)throw F("Wrong length");P(this,{buffer:e,byteLength:r,byteOffset:a}),o||(this.buffer=e,this.byteLength=r,this.byteOffset=a)})[T],o&&(K(I,"byteLength"),K(D,"buffer"),K(D,"byteLength"),K(D,"byteOffset")),s(N,{getInt8:function(e){return X(this,1,e)[0]<<24>>24},getUint8:function(e){return X(this,1,e)[0]},getInt16:function(e){var t=X(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=X(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return Q(X(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return Q(X(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return V(X(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return V(X(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){J(this,1,e,H,t)},setUint8:function(e,t){J(this,1,e,H,t)},setInt16:function(e,t){J(this,2,e,$,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){J(this,2,e,$,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){J(this,4,e,q,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){J(this,4,e,q,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){J(this,4,e,G,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){J(this,8,e,Y,t,arguments.length>2?arguments[2]:void 0)}});S(I,A),S(D,O),e.exports={ArrayBuffer:I,DataView:D}},78806:(e,t,r)=>{"use strict";var n=r(56416),a=r(47841),o=r(36095),i=r(10997),u=Math.min;e.exports=[].copyWithin||function(e,t){var r=n(this),l=o(r),s=a(e,l),c=a(t,l),f=arguments.length>2?arguments[2]:void 0,d=u((void 0===f?l:a(f,l))-c,l-s),p=1;for(c<s&&s<c+d&&(p=-1,c+=d-1,s+=d-1);d-- >0;)c in r?r[s]=r[c]:i(r,s),s+=p,c+=p;return r}},55037:(e,t,r)=>{"use strict";var n=r(56416),a=r(47841),o=r(36095);e.exports=function(e){for(var t=n(this),r=o(t),i=arguments.length,u=a(i>1?arguments[1]:void 0,r),l=i>2?arguments[2]:void 0,s=void 0===l?r:a(l,r);s>u;)t[u++]=e;return t}},26948:(e,t,r)=>{"use strict";var n=r(92387).forEach,a=r(30258)("forEach");e.exports=a?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},19749:(e,t,r)=>{var n=r(36095);e.exports=function(e,t){for(var r=0,a=n(t),o=new e(a);a>r;)o[r]=t[r++];return o}},23419:(e,t,r)=>{"use strict";var n=r(11567),a=r(67425),o=r(56416),i=r(29079),u=r(22919),l=r(37829),s=r(36095),c=r(48923),f=r(98061),d=r(43230),p=Array;e.exports=function(e){var t=o(e),r=l(this),h=arguments.length,v=h>1?arguments[1]:void 0,g=void 0!==v;g&&(v=n(v,h>2?arguments[2]:void 0));var m,y,b,w,x,S,E=d(t),k=0;if(!E||this===p&&u(E))for(m=s(t),y=r?new this(m):p(m);m>k;k++)S=g?v(t[k],k):t[k],c(y,k,S);else for(x=(w=f(t,E)).next,y=r?new this:[];!(b=a(x,w)).done;k++)S=g?i(w,v,[b.value,k],!0):b.value,c(y,k,S);return y.length=k,y}},54041:(e,t,r)=>{var n=r(47830),a=r(47841),o=r(36095),i=function(e){return function(t,r,i){var u,l=n(t),s=o(l),c=a(i,s);if(e&&r!=r){for(;s>c;)if((u=l[c++])!=u)return!0}else for(;s>c;c++)if((e||c in l)&&l[c]===r)return e||c||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},47086:(e,t,r)=>{var n=r(11567),a=r(96674),o=r(56416),i=r(36095),u=function(e){var t=1==e;return function(r,u,l){for(var s,c=o(r),f=a(c),d=n(u,l),p=i(f);p-- >0;)if(d(s=f[p],p,c))switch(e){case 0:return s;case 1:return p}return t?-1:void 0}};e.exports={findLast:u(0),findLastIndex:u(1)}},92387:(e,t,r)=>{var n=r(11567),a=r(81540),o=r(96674),i=r(56416),u=r(36095),l=r(33496),s=a([].push),c=function(e){var t=1==e,r=2==e,a=3==e,c=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,v,g,m){for(var y,b,w=i(h),x=o(w),S=n(v,g),E=u(x),k=0,R=m||l,C=t?R(h,E):r||d?R(h,0):void 0;E>k;k++)if((p||k in x)&&(b=S(y=x[k],k,w),e))if(t)C[k]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return k;case 2:s(C,y)}else switch(e){case 4:return!1;case 7:s(C,y)}return f?-1:a||c?c:C}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterReject:c(7)}},32271:(e,t,r)=>{"use strict";var n=r(92976),a=r(47830),o=r(11859),i=r(36095),u=r(30258),l=Math.min,s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0,f=u("lastIndexOf"),d=c||!f;e.exports=d?function(e){if(c)return n(s,this,arguments)||0;var t=a(this),r=i(t),u=r-1;for(arguments.length>1&&(u=l(u,o(arguments[1]))),u<0&&(u=r+u);u>=0;u--)if(u in t&&t[u]===e)return u||0;return-1}:s},7397:(e,t,r)=>{var n=r(2112),a=r(72931),o=r(9318),i=a("species");e.exports=function(e){return o>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},30258:(e,t,r)=>{"use strict";var n=r(2112);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){return 1},1)}))}},67809:(e,t,r)=>{var n=r(92220),a=r(56416),o=r(96674),i=r(36095),u=TypeError,l=function(e){return function(t,r,l,s){n(r);var c=a(t),f=o(c),d=i(c),p=e?d-1:0,h=e?-1:1;if(l<2)for(;;){if(p in f){s=f[p],p+=h;break}if(p+=h,e?p<0:d<=p)throw u("Reduce of empty array with no initial value")}for(;e?p>=0:d>p;p+=h)p in f&&(s=r(s,f[p],p,c));return s}};e.exports={left:l(!1),right:l(!0)}},18419:(e,t,r)=>{"use strict";var n=r(81738),a=r(85506),o=TypeError,i=Object.getOwnPropertyDescriptor,u=n&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=u?function(e,t){if(a(e)&&!i(e,"length").writable)throw o("Cannot set read only .length");return e.length=t}:function(e,t){return e.length=t}},12530:(e,t,r)=>{var n=r(47841),a=r(36095),o=r(48923),i=Array,u=Math.max;e.exports=function(e,t,r){for(var l=a(e),s=n(t,l),c=n(void 0===r?l:r,l),f=i(u(c-s,0)),d=0;s<c;s++,d++)o(f,d,e[s]);return f.length=d,f}},28142:(e,t,r)=>{var n=r(81540);e.exports=n([].slice)},38625:(e,t,r)=>{var n=r(12530),a=Math.floor,o=function(e,t){var r=e.length,l=a(r/2);return r<8?i(e,t):u(e,o(n(e,0,l),t),o(n(e,l),t),t)},i=function(e,t){for(var r,n,a=e.length,o=1;o<a;){for(n=o,r=e[o];n&&t(e[n-1],r)>0;)e[n]=e[--n];n!==o++&&(e[n]=r)}return e},u=function(e,t,r,n){for(var a=t.length,o=r.length,i=0,u=0;i<a||u<o;)e[i+u]=i<a&&u<o?n(t[i],r[u])<=0?t[i++]:r[u++]:i<a?t[i++]:r[u++];return e};e.exports=o},89319:(e,t,r)=>{var n=r(85506),a=r(37829),o=r(21651),i=r(72931)("species"),u=Array;e.exports=function(e){var t;return n(e)&&(t=e.constructor,(a(t)&&(t===u||n(t.prototype))||o(t)&&null===(t=t[i]))&&(t=void 0)),void 0===t?u:t}},33496:(e,t,r)=>{var n=r(89319);e.exports=function(e,t){return new(n(e))(0===t?0:t)}},44669:e=>{for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",r={},n=0;n<66;n++)r[t.charAt(n)]=n;e.exports={itoc:t,ctoi:r}},29079:(e,t,r)=>{var n=r(1421),a=r(44691);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){a(e,"throw",t)}}},42997:(e,t,r)=>{var n=r(72931)("iterator"),a=!1;try{var o=0,i={next:function(){return{done:!!o++}},return:function(){a=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},e(o)}catch(e){}return r}},98250:(e,t,r)=>{var n=r(81540),a=n({}.toString),o=n("".slice);e.exports=function(e){return o(a(e),8,-1)}},33114:(e,t,r)=>{var n=r(12102),a=r(34354),o=r(98250),i=r(72931)("toStringTag"),u=Object,l="Arguments"==o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=u(e),i))?r:l?o(t):"Object"==(n=o(t))&&a(t.callee)?"Arguments":n}},77028:(e,t,r)=>{"use strict";var n=r(70378).f,a=r(99062),o=r(6804),i=r(11567),u=r(85806),l=r(88260),s=r(56651),c=r(39371),f=r(77354),d=r(81601),p=r(81738),h=r(34314).fastKey,v=r(73500),g=v.set,m=v.getterFor;e.exports={getConstructor:function(e,t,r,c){var f=e((function(e,n){u(e,d),g(e,{type:t,index:a(null),first:void 0,last:void 0,size:0}),p||(e.size=0),l(n)||s(n,e[c],{that:e,AS_ENTRIES:r})})),d=f.prototype,v=m(t),y=function(e,t,r){var n,a,o=v(e),i=b(e,t);return i?i.value=r:(o.last=i={index:a=h(t,!0),key:t,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=i),n&&(n.next=i),p?o.size++:e.size++,"F"!==a&&(o.index[a]=i)),e},b=function(e,t){var r,n=v(e),a=h(t);if("F"!==a)return n.index[a];for(r=n.first;r;r=r.next)if(r.key==t)return r};return o(d,{clear:function(){for(var e=v(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,p?e.size=0:this.size=0},delete:function(e){var t=this,r=v(t),n=b(t,e);if(n){var a=n.next,o=n.previous;delete r.index[n.index],n.removed=!0,o&&(o.next=a),a&&(a.previous=o),r.first==n&&(r.first=a),r.last==n&&(r.last=o),p?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=v(this),n=i(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!b(this,e)}}),o(d,r?{get:function(e){var t=b(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),p&&n(d,"size",{get:function(){return v(this).size}}),f},setStrong:function(e,t,r){var n=t+" Iterator",a=m(t),o=m(n);c(e,t,(function(e,t){g(this,{type:n,target:e,state:a(e),kind:t,last:void 0})}),(function(){for(var e=o(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?f("keys"==t?r.key:"values"==t?r.value:[r.key,r.value],!1):(e.target=void 0,f(void 0,!0))}),r?"entries":"values",!r,!0),d(t)}}},22380:(e,t,r)=>{"use strict";var n=r(81540),a=r(6804),o=r(34314).getWeakData,i=r(85806),u=r(1421),l=r(88260),s=r(21651),c=r(56651),f=r(92387),d=r(95320),p=r(73500),h=p.set,v=p.getterFor,g=f.find,m=f.findIndex,y=n([].splice),b=0,w=function(e){return e.frozen||(e.frozen=new x)},x=function(){this.entries=[]},S=function(e,t){return g(e.entries,(function(e){return e[0]===t}))};x.prototype={get:function(e){var t=S(this,e);if(t)return t[1]},has:function(e){return!!S(this,e)},set:function(e,t){var r=S(this,e);r?r[1]=t:this.entries.push([e,t])},delete:function(e){var t=m(this.entries,(function(t){return t[0]===e}));return~t&&y(this.entries,t,1),!!~t}},e.exports={getConstructor:function(e,t,r,n){var f=e((function(e,a){i(e,p),h(e,{type:t,id:b++,frozen:void 0}),l(a)||c(a,e[n],{that:e,AS_ENTRIES:r})})),p=f.prototype,g=v(t),m=function(e,t,r){var n=g(e),a=o(u(t),!0);return!0===a?w(n).set(t,r):a[n.id]=r,e};return a(p,{delete:function(e){var t=g(this);if(!s(e))return!1;var r=o(e);return!0===r?w(t).delete(e):r&&d(r,t.id)&&delete r[t.id]},has:function(e){var t=g(this);if(!s(e))return!1;var r=o(e);return!0===r?w(t).has(e):r&&d(r,t.id)}}),a(p,r?{get:function(e){var t=g(this);if(s(e)){var r=o(e);return!0===r?w(t).get(e):r?r[t.id]:void 0}},set:function(e,t){return m(this,e,t)}}:{add:function(e){return m(this,e,!0)}}),f}}},19892:(e,t,r)=>{"use strict";var n=r(47641),a=r(2569),o=r(81540),i=r(58787),u=r(74704),l=r(34314),s=r(56651),c=r(85806),f=r(34354),d=r(88260),p=r(21651),h=r(2112),v=r(42997),g=r(22087),m=r(20679);e.exports=function(e,t,r){var y=-1!==e.indexOf("Map"),b=-1!==e.indexOf("Weak"),w=y?"set":"add",x=a[e],S=x&&x.prototype,E=x,k={},R=function(e){var t=o(S[e]);u(S,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(b&&!p(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return b&&!p(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(b&&!p(e))&&t(this,0===e?0:e)}:function(e,r){return t(this,0===e?0:e,r),this})};if(i(e,!f(x)||!(b||S.forEach&&!h((function(){(new x).entries().next()})))))E=r.getConstructor(t,e,y,w),l.enable();else if(i(e,!0)){var C=new E,P=C[w](b?{}:-0,1)!=C,A=h((function(){C.has(1)})),O=v((function(e){new x(e)})),T=!b&&h((function(){for(var e=new x,t=5;t--;)e[w](t,t);return!e.has(-0)}));O||((E=t((function(e,t){c(e,S);var r=m(new x,e,E);return d(t)||s(t,r[w],{that:r,AS_ENTRIES:y}),r}))).prototype=S,S.constructor=E),(A||T)&&(R("delete"),R("has"),y&&R("get")),(T||P)&&R(w),b&&S.clear&&delete S.clear}return k[e]=E,n({global:!0,constructor:!0,forced:E!=x},k),g(E,e),b||r.setStrong(E,e,y),E}},68778:(e,t,r)=>{var n=r(95320),a=r(56830),o=r(80892),i=r(70378);e.exports=function(e,t,r){for(var u=a(t),l=i.f,s=o.f,c=0;c<u.length;c++){var f=u[c];n(e,f)||r&&n(r,f)||l(e,f,s(t,f))}}},57971:(e,t,r)=>{var n=r(72931)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return!1}},95031:(e,t,r)=>{var n=r(2112);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},58625:(e,t,r)=>{var n=r(81540),a=r(81196),o=r(44818),i=/"/g,u=n("".replace);e.exports=function(e,t,r,n){var l=o(a(e)),s="<"+t;return""!==r&&(s+=" "+r+'="'+u(o(n),i,"&quot;")+'"'),s+">"+l+"</"+t+">"}},77354:e=>{e.exports=function(e,t){return{value:e,done:t}}},27632:(e,t,r)=>{var n=r(81738),a=r(70378),o=r(93233);e.exports=n?function(e,t,r){return a.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},93233:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},48923:(e,t,r)=>{"use strict";var n=r(67411),a=r(70378),o=r(93233);e.exports=function(e,t,r){var i=n(t);i in e?a.f(e,i,o(0,r)):e[i]=r}},33084:(e,t,r)=>{"use strict";var n=r(81540),a=r(2112),o=r(97459).start,i=RangeError,u=isFinite,l=Math.abs,s=Date.prototype,c=s.toISOString,f=n(s.getTime),d=n(s.getUTCDate),p=n(s.getUTCFullYear),h=n(s.getUTCHours),v=n(s.getUTCMilliseconds),g=n(s.getUTCMinutes),m=n(s.getUTCMonth),y=n(s.getUTCSeconds);e.exports=a((function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-50000000000001))}))||!a((function(){c.call(new Date(NaN))}))?function(){if(!u(f(this)))throw i("Invalid time value");var e=this,t=p(e),r=v(e),n=t<0?"-":t>9999?"+":"";return n+o(l(t),n?6:4,0)+"-"+o(m(e)+1,2,0)+"-"+o(d(e),2,0)+"T"+o(h(e),2,0)+":"+o(g(e),2,0)+":"+o(y(e),2,0)+"."+o(r,3,0)+"Z"}:c},65598:(e,t,r)=>{"use strict";var n=r(1421),a=r(86964),o=TypeError;e.exports=function(e){if(n(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw o("Incorrect hint");return a(this,e)}},6230:(e,t,r)=>{var n=r(99465),a=r(70378);e.exports=function(e,t,r){return r.get&&n(r.get,t,{getter:!0}),r.set&&n(r.set,t,{setter:!0}),a.f(e,t,r)}},74704:(e,t,r)=>{var n=r(34354),a=r(70378),o=r(99465),i=r(85967);e.exports=function(e,t,r,u){u||(u={});var l=u.enumerable,s=void 0!==u.name?u.name:t;if(n(r)&&o(r,s,u),u.global)l?e[t]=r:i(t,r);else{try{u.unsafe?e[t]&&(l=!0):delete e[t]}catch(e){}l?e[t]=r:a.f(e,t,{value:r,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return e}},6804:(e,t,r)=>{var n=r(74704);e.exports=function(e,t,r){for(var a in t)n(e,a,t[a],r);return e}},85967:(e,t,r)=>{var n=r(2569),a=Object.defineProperty;e.exports=function(e,t){try{a(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},10997:(e,t,r)=>{"use strict";var n=r(23700),a=TypeError;e.exports=function(e,t){if(!delete e[t])throw a("Cannot delete property "+n(t)+" of "+n(e))}},81738:(e,t,r)=>{var n=r(2112);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},70736:e=>{var t="object"==typeof document&&document.all,r=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:r}},77934:(e,t,r)=>{var n=r(2569),a=r(21651),o=n.document,i=a(o)&&a(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},99325:e=>{var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},73799:e=>{e.exports={IndexSizeError:{s:"INDEX_SIZE_ERR",c:1,m:1},DOMStringSizeError:{s:"DOMSTRING_SIZE_ERR",c:2,m:0},HierarchyRequestError:{s:"HIERARCHY_REQUEST_ERR",c:3,m:1},WrongDocumentError:{s:"WRONG_DOCUMENT_ERR",c:4,m:1},InvalidCharacterError:{s:"INVALID_CHARACTER_ERR",c:5,m:1},NoDataAllowedError:{s:"NO_DATA_ALLOWED_ERR",c:6,m:0},NoModificationAllowedError:{s:"NO_MODIFICATION_ALLOWED_ERR",c:7,m:1},NotFoundError:{s:"NOT_FOUND_ERR",c:8,m:1},NotSupportedError:{s:"NOT_SUPPORTED_ERR",c:9,m:1},InUseAttributeError:{s:"INUSE_ATTRIBUTE_ERR",c:10,m:1},InvalidStateError:{s:"INVALID_STATE_ERR",c:11,m:1},SyntaxError:{s:"SYNTAX_ERR",c:12,m:1},InvalidModificationError:{s:"INVALID_MODIFICATION_ERR",c:13,m:1},NamespaceError:{s:"NAMESPACE_ERR",c:14,m:1},InvalidAccessError:{s:"INVALID_ACCESS_ERR",c:15,m:1},ValidationError:{s:"VALIDATION_ERR",c:16,m:0},TypeMismatchError:{s:"TYPE_MISMATCH_ERR",c:17,m:1},SecurityError:{s:"SECURITY_ERR",c:18,m:1},NetworkError:{s:"NETWORK_ERR",c:19,m:1},AbortError:{s:"ABORT_ERR",c:20,m:1},URLMismatchError:{s:"URL_MISMATCH_ERR",c:21,m:1},QuotaExceededError:{s:"QUOTA_EXCEEDED_ERR",c:22,m:1},TimeoutError:{s:"TIMEOUT_ERR",c:23,m:1},InvalidNodeTypeError:{s:"INVALID_NODE_TYPE_ERR",c:24,m:1},DataCloneError:{s:"DATA_CLONE_ERR",c:25,m:1}}},7921:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},96583:(e,t,r)=>{var n=r(77934)("span").classList,a=n&&n.constructor&&n.constructor.prototype;e.exports=a===Object.prototype?void 0:a},35010:(e,t,r)=>{var n=r(52831).match(/firefox\/(\d+)/i);e.exports=!!n&&+n[1]},75879:(e,t,r)=>{var n=r(67798),a=r(52285);e.exports=!n&&!a&&"object"==typeof window&&"object"==typeof document},97107:e=>{e.exports="function"==typeof Bun&&Bun&&"string"==typeof Bun.version},67798:e=>{e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},34842:(e,t,r)=>{var n=r(52831);e.exports=/MSIE|Trident/.test(n)},628:(e,t,r)=>{var n=r(52831);e.exports=/ipad|iphone|ipod/i.test(n)&&"undefined"!=typeof Pebble},49619:(e,t,r)=>{var n=r(52831);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},52285:(e,t,r)=>{var n=r(98250);e.exports="undefined"!=typeof process&&"process"==n(process)},21335:(e,t,r)=>{var n=r(52831);e.exports=/web0s(?!.*chrome)/i.test(n)},52831:e=>{e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},9318:(e,t,r)=>{var n,a,o=r(2569),i=r(52831),u=o.process,l=o.Deno,s=u&&u.versions||l&&l.version,c=s&&s.v8;c&&(a=(n=c.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!a&&i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(a=+n[1]),e.exports=a},64336:(e,t,r)=>{var n=r(52831).match(/AppleWebKit\/(\d+)\./);e.exports=!!n&&+n[1]},64328:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},90225:(e,t,r)=>{var n=r(81540),a=Error,o=n("".replace),i=String(a("zxcasd").stack),u=/\n\s*at [^:]*:[^\n]*/,l=u.test(i);e.exports=function(e,t){if(l&&"string"==typeof e&&!a.prepareStackTrace)for(;t--;)e=o(e,u,"");return e}},68695:(e,t,r)=>{var n=r(27632),a=r(90225),o=r(53137),i=Error.captureStackTrace;e.exports=function(e,t,r,u){o&&(i?i(e,t):n(e,"stack",a(r,u)))}},53137:(e,t,r)=>{var n=r(2112),a=r(93233);e.exports=!n((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",a(1,7)),7!==e.stack)}))},55716:(e,t,r)=>{"use strict";var n=r(81738),a=r(2112),o=r(1421),i=r(99062),u=r(88238),l=Error.prototype.toString,s=a((function(){if(n){var e=i(Object.defineProperty({},"name",{get:function(){return this===e}}));if("true"!==l.call(e))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));e.exports=s?function(){var e=o(this),t=u(e.name,"Error"),r=u(e.message);return t?r?t+": "+r:t:r}:l},47641:(e,t,r)=>{var n=r(2569),a=r(80892).f,o=r(27632),i=r(74704),u=r(85967),l=r(68778),s=r(58787);e.exports=function(e,t){var r,c,f,d,p,h=e.target,v=e.global,g=e.stat;if(r=v?n:g?n[h]||u(h,{}):(n[h]||{}).prototype)for(c in t){if(d=t[c],f=e.dontCallGetSet?(p=a(r,c))&&p.value:r[c],!s(v?c:h+(g?".":"#")+c,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),i(r,c,d,e)}}},2112:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},20802:(e,t,r)=>{"use strict";r(72966);var n=r(51607),a=r(74704),o=r(56226),i=r(2112),u=r(72931),l=r(27632),s=u("species"),c=RegExp.prototype;e.exports=function(e,t,r,f){var d=u(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p&&!i((function(){var t=!1,r=/a/;return"split"===e&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[d]=/./[d]),r.exec=function(){return t=!0,null},r[d](""),!t}));if(!p||!h||r){var v=n(/./[d]),g=t(d,""[e],(function(e,t,r,a,i){var u=n(e),l=t.exec;return l===o||l===c.exec?p&&!i?{done:!0,value:v(t,r,a)}:{done:!0,value:u(r,t,a)}:{done:!1}}));a(String.prototype,e,g[0]),a(c,d,g[1])}f&&l(c[d],"sham",!0)}},48450:(e,t,r)=>{"use strict";var n=r(85506),a=r(36095),o=r(99325),i=r(11567),u=function(e,t,r,l,s,c,f,d){for(var p,h,v=s,g=0,m=!!f&&i(f,d);g<l;)g in r&&(p=m?m(r[g],g,t):r[g],c>0&&n(p)?(h=a(p),v=u(e,t,p,h,v,c-1)-1):(o(v+1),e[v]=p),v++),g++;return v};e.exports=u},28982:(e,t,r)=>{var n=r(2112);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},92976:(e,t,r)=>{var n=r(39581),a=Function.prototype,o=a.apply,i=a.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?i.bind(o):function(){return i.apply(o,arguments)})},11567:(e,t,r)=>{var n=r(51607),a=r(92220),o=r(39581),i=n(n.bind);e.exports=function(e,t){return a(e),void 0===t?e:o?i(e,t):function(){return e.apply(t,arguments)}}},39581:(e,t,r)=>{var n=r(2112);e.exports=!n((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},1966:(e,t,r)=>{"use strict";var n=r(81540),a=r(92220),o=r(21651),i=r(95320),u=r(28142),l=r(39581),s=Function,c=n([].concat),f=n([].join),d={},p=function(e,t,r){if(!i(d,t)){for(var n=[],a=0;a<t;a++)n[a]="a["+a+"]";d[t]=s("C,a","return new C("+f(n,",")+")")}return d[t](e,r)};e.exports=l?s.bind:function(e){var t=a(this),r=t.prototype,n=u(arguments,1),i=function(){var r=c(n,u(arguments));return this instanceof i?p(t,r.length,r):t.apply(e,r)};return o(r)&&(i.prototype=r),i}},67425:(e,t,r)=>{var n=r(39581),a=Function.prototype.call;e.exports=n?a.bind(a):function(){return a.apply(a,arguments)}},50034:(e,t,r)=>{var n=r(81738),a=r(95320),o=Function.prototype,i=n&&Object.getOwnPropertyDescriptor,u=a(o,"name"),l=u&&"something"===function(){}.name,s=u&&(!n||n&&i(o,"name").configurable);e.exports={EXISTS:u,PROPER:l,CONFIGURABLE:s}},51607:(e,t,r)=>{var n=r(98250),a=r(81540);e.exports=function(e){if("Function"===n(e))return a(e)}},81540:(e,t,r)=>{var n=r(39581),a=Function.prototype,o=a.call,i=n&&a.bind.bind(o,o);e.exports=n?i:function(e){return function(){return o.apply(e,arguments)}}},12430:(e,t,r)=>{var n=r(2569),a=r(34354),o=function(e){return a(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?o(n[e]):n[e]&&n[e][t]}},43230:(e,t,r)=>{var n=r(33114),a=r(85324),o=r(88260),i=r(9259),u=r(72931)("iterator");e.exports=function(e){if(!o(e))return a(e,u)||a(e,"@@iterator")||i[n(e)]}},98061:(e,t,r)=>{var n=r(67425),a=r(92220),o=r(1421),i=r(23700),u=r(43230),l=TypeError;e.exports=function(e,t){var r=arguments.length<2?u(e):t;if(a(r))return o(n(r,e));throw l(i(e)+" is not iterable")}},85324:(e,t,r)=>{var n=r(92220),a=r(88260);e.exports=function(e,t){var r=e[t];return a(r)?void 0:n(r)}},35677:(e,t,r)=>{var n=r(81540),a=r(56416),o=Math.floor,i=n("".charAt),u=n("".replace),l=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,r,n,f,d){var p=r+e.length,h=n.length,v=c;return void 0!==f&&(f=a(f),v=s),u(d,v,(function(a,u){var s;switch(i(u,0)){case"$":return"$";case"&":return e;case"`":return l(t,0,r);case"'":return l(t,p);case"<":s=f[l(u,1,-1)];break;default:var c=+u;if(0===c)return a;if(c>h){var d=o(c/10);return 0===d?a:d<=h?void 0===n[d-1]?i(u,1):n[d-1]+i(u,1):a}s=n[c-1]}return void 0===s?"":s}))}},2569:(e,t,r)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},95320:(e,t,r)=>{var n=r(81540),a=r(56416),o=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return o(a(e),t)}},29012:e=>{e.exports={}},53725:e=>{e.exports=function(e,t){try{1==arguments.length?console.error(e):console.error(e,t)}catch(e){}}},60099:(e,t,r)=>{var n=r(12430);e.exports=n("document","documentElement")},38232:(e,t,r)=>{var n=r(81738),a=r(2112),o=r(77934);e.exports=!n&&!a((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},27206:e=>{var t=Array,r=Math.abs,n=Math.pow,a=Math.floor,o=Math.log,i=Math.LN2;e.exports={pack:function(e,u,l){var s,c,f,d=t(l),p=8*l-u-1,h=(1<<p)-1,v=h>>1,g=23===u?n(2,-24)-n(2,-77):0,m=e<0||0===e&&1/e<0?1:0,y=0;for((e=r(e))!=e||e===1/0?(c=e!=e?1:0,s=h):(s=a(o(e)/i),e*(f=n(2,-s))<1&&(s--,f*=2),(e+=s+v>=1?g/f:g*n(2,1-v))*f>=2&&(s++,f/=2),s+v>=h?(c=0,s=h):s+v>=1?(c=(e*f-1)*n(2,u),s+=v):(c=e*n(2,v-1)*n(2,u),s=0));u>=8;)d[y++]=255&c,c/=256,u-=8;for(s=s<<u|c,p+=u;p>0;)d[y++]=255&s,s/=256,p-=8;return d[--y]|=128*m,d},unpack:function(e,t){var r,a=e.length,o=8*a-t-1,i=(1<<o)-1,u=i>>1,l=o-7,s=a-1,c=e[s--],f=127&c;for(c>>=7;l>0;)f=256*f+e[s--],l-=8;for(r=f&(1<<-l)-1,f>>=-l,l+=t;l>0;)r=256*r+e[s--],l-=8;if(0===f)f=1-u;else{if(f===i)return r?NaN:c?-1/0:1/0;r+=n(2,t),f-=u}return(c?-1:1)*r*n(2,f-t)}}},96674:(e,t,r)=>{var n=r(81540),a=r(2112),o=r(98250),i=Object,u=n("".split);e.exports=a((function(){return!i("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?u(e,""):i(e)}:i},20679:(e,t,r)=>{var n=r(34354),a=r(21651),o=r(64001);e.exports=function(e,t,r){var i,u;return o&&n(i=t.constructor)&&i!==r&&a(u=i.prototype)&&u!==r.prototype&&o(e,u),e}},55193:(e,t,r)=>{var n=r(81540),a=r(34354),o=r(87039),i=n(Function.toString);a(o.inspectSource)||(o.inspectSource=function(e){return i(e)}),e.exports=o.inspectSource},56731:(e,t,r)=>{var n=r(21651),a=r(27632);e.exports=function(e,t){n(t)&&"cause"in t&&a(e,"cause",t.cause)}},34314:(e,t,r)=>{var n=r(47641),a=r(81540),o=r(29012),i=r(21651),u=r(95320),l=r(70378).f,s=r(89704),c=r(18322),f=r(20541),d=r(9225),p=r(28982),h=!1,v=d("meta"),g=0,m=function(e){l(e,v,{value:{objectID:"O"+g++,weakData:{}}})},y=e.exports={enable:function(){y.enable=function(){},h=!0;var e=s.f,t=a([].splice),r={};r[v]=1,e(r).length&&(s.f=function(r){for(var n=e(r),a=0,o=n.length;a<o;a++)if(n[a]===v){t(n,a,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:c.f}))},fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!u(e,v)){if(!f(e))return"F";if(!t)return"E";m(e)}return e[v].objectID},getWeakData:function(e,t){if(!u(e,v)){if(!f(e))return!0;if(!t)return!1;m(e)}return e[v].weakData},onFreeze:function(e){return p&&h&&f(e)&&!u(e,v)&&m(e),e}};o[v]=!0},73500:(e,t,r)=>{var n,a,o,i=r(63125),u=r(2569),l=r(21651),s=r(27632),c=r(95320),f=r(87039),d=r(59097),p=r(29012),h="Object already initialized",v=u.TypeError,g=u.WeakMap;if(i||f.state){var m=f.state||(f.state=new g);m.get=m.get,m.has=m.has,m.set=m.set,n=function(e,t){if(m.has(e))throw v(h);return t.facade=e,m.set(e,t),t},a=function(e){return m.get(e)||{}},o=function(e){return m.has(e)}}else{var y=d("state");p[y]=!0,n=function(e,t){if(c(e,y))throw v(h);return t.facade=e,s(e,y,t),t},a=function(e){return c(e,y)?e[y]:{}},o=function(e){return c(e,y)}}e.exports={set:n,get:a,has:o,enforce:function(e){return o(e)?a(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!l(t)||(r=a(t)).type!==e)throw v("Incompatible receiver, "+e+" required");return r}}}},22919:(e,t,r)=>{var n=r(72931),a=r(9259),o=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||i[o]===e)}},85506:(e,t,r)=>{var n=r(98250);e.exports=Array.isArray||function(e){return"Array"==n(e)}},34132:(e,t,r)=>{var n=r(33114);e.exports=function(e){var t=n(e);return"BigInt64Array"==t||"BigUint64Array"==t}},34354:(e,t,r)=>{var n=r(70736),a=n.all;e.exports=n.IS_HTMLDDA?function(e){return"function"==typeof e||e===a}:function(e){return"function"==typeof e}},37829:(e,t,r)=>{var n=r(81540),a=r(2112),o=r(34354),i=r(33114),u=r(12430),l=r(55193),s=function(){},c=[],f=u("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=n(d.exec),h=!d.exec(s),v=function(e){if(!o(e))return!1;try{return f(s,c,e),!0}catch(e){return!1}},g=function(e){if(!o(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!p(d,l(e))}catch(e){return!0}};g.sham=!0,e.exports=!f||a((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?g:v},64917:(e,t,r)=>{var n=r(95320);e.exports=function(e){return void 0!==e&&(n(e,"value")||n(e,"writable"))}},58787:(e,t,r)=>{var n=r(2112),a=r(34354),o=/#|\.prototype\./,i=function(e,t){var r=l[u(e)];return r==c||r!=s&&(a(t)?n(t):!!t)},u=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=i.data={},s=i.NATIVE="N",c=i.POLYFILL="P";e.exports=i},98635:(e,t,r)=>{var n=r(21651),a=Math.floor;e.exports=Number.isInteger||function(e){return!n(e)&&isFinite(e)&&a(e)===e}},88260:e=>{e.exports=function(e){return null==e}},21651:(e,t,r)=>{var n=r(34354),a=r(70736),o=a.all;e.exports=a.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:n(e)||e===o}:function(e){return"object"==typeof e?null!==e:n(e)}},51274:e=>{e.exports=!1},16499:(e,t,r)=>{var n=r(21651),a=r(98250),o=r(72931)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==a(e))}},98937:(e,t,r)=>{var n=r(12430),a=r(34354),o=r(77652),i=r(97374),u=Object;e.exports=i?function(e){return"symbol"==typeof e}:function(e){var t=n("Symbol");return a(t)&&o(t.prototype,u(e))}},56651:(e,t,r)=>{var n=r(11567),a=r(67425),o=r(1421),i=r(23700),u=r(22919),l=r(36095),s=r(77652),c=r(98061),f=r(43230),d=r(44691),p=TypeError,h=function(e,t){this.stopped=e,this.result=t},v=h.prototype;e.exports=function(e,t,r){var g,m,y,b,w,x,S,E=r&&r.that,k=!(!r||!r.AS_ENTRIES),R=!(!r||!r.IS_RECORD),C=!(!r||!r.IS_ITERATOR),P=!(!r||!r.INTERRUPTED),A=n(t,E),O=function(e){return g&&d(g,"normal",e),new h(!0,e)},T=function(e){return k?(o(e),P?A(e[0],e[1],O):A(e[0],e[1])):P?A(e,O):A(e)};if(R)g=e.iterator;else if(C)g=e;else{if(!(m=f(e)))throw p(i(e)+" is not iterable");if(u(m)){for(y=0,b=l(e);b>y;y++)if((w=T(e[y]))&&s(v,w))return w;return new h(!1)}g=c(e,m)}for(x=R?e.next:g.next;!(S=a(x,g)).done;){try{w=T(S.value)}catch(e){d(g,"throw",e)}if("object"==typeof w&&w&&s(v,w))return w}return new h(!1)}},44691:(e,t,r)=>{var n=r(67425),a=r(1421),o=r(85324);e.exports=function(e,t,r){var i,u;a(e);try{if(!(i=o(e,"return"))){if("throw"===t)throw r;return r}i=n(i,e)}catch(e){u=!0,i=e}if("throw"===t)throw r;if(u)throw i;return a(i),r}},56308:(e,t,r)=>{"use strict";var n=r(25756).IteratorPrototype,a=r(99062),o=r(93233),i=r(22087),u=r(9259),l=function(){return this};e.exports=function(e,t,r,s){var c=t+" Iterator";return e.prototype=a(n,{next:o(+!s,r)}),i(e,c,!1,!0),u[c]=l,e}},39371:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(51274),i=r(50034),u=r(34354),l=r(56308),s=r(19299),c=r(64001),f=r(22087),d=r(27632),p=r(74704),h=r(72931),v=r(9259),g=r(25756),m=i.PROPER,y=i.CONFIGURABLE,b=g.IteratorPrototype,w=g.BUGGY_SAFARI_ITERATORS,x=h("iterator"),S="keys",E="values",k="entries",R=function(){return this};e.exports=function(e,t,r,i,h,g,C){l(r,t,i);var P,A,O,T=function(e){if(e===h&&D)return D;if(!w&&e in I)return I[e];switch(e){case S:case E:case k:return function(){return new r(this,e)}}return function(){return new r(this)}},_=t+" Iterator",M=!1,I=e.prototype,L=I[x]||I["@@iterator"]||h&&I[h],D=!w&&L||T(h),N="Array"==t&&I.entries||L;if(N&&(P=s(N.call(new e)))!==Object.prototype&&P.next&&(o||s(P)===b||(c?c(P,b):u(P[x])||p(P,x,R)),f(P,_,!0,!0),o&&(v[_]=R)),m&&h==E&&L&&L.name!==E&&(!o&&y?d(I,"name",E):(M=!0,D=function(){return a(L,this)})),h)if(A={values:T(E),keys:g?D:T(S),entries:T(k)},C)for(O in A)(w||M||!(O in I))&&p(I,O,A[O]);else n({target:t,proto:!0,forced:w||M},A);return o&&!C||I[x]===D||p(I,x,D,{name:h}),v[t]=D,A}},25756:(e,t,r)=>{"use strict";var n,a,o,i=r(2112),u=r(34354),l=r(21651),s=r(99062),c=r(19299),f=r(74704),d=r(72931),p=r(51274),h=d("iterator"),v=!1;[].keys&&("next"in(o=[].keys())?(a=c(c(o)))!==Object.prototype&&(n=a):v=!0),!l(n)||i((function(){var e={};return n[h].call(e)!==e}))?n={}:p&&(n=s(n)),u(n[h])||f(n,h,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:v}},9259:e=>{e.exports={}},36095:(e,t,r)=>{var n=r(89309);e.exports=function(e){return n(e.length)}},99465:(e,t,r)=>{var n=r(81540),a=r(2112),o=r(34354),i=r(95320),u=r(81738),l=r(50034).CONFIGURABLE,s=r(55193),c=r(73500),f=c.enforce,d=c.get,p=String,h=Object.defineProperty,v=n("".slice),g=n("".replace),m=n([].join),y=u&&!a((function(){return 8!==h((function(){}),"length",{value:8}).length})),b=String(String).split("String"),w=e.exports=function(e,t,r){"Symbol("===v(p(t),0,7)&&(t="["+g(p(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),r&&r.getter&&(t="get "+t),r&&r.setter&&(t="set "+t),(!i(e,"name")||l&&e.name!==t)&&(u?h(e,"name",{value:t,configurable:!0}):e.name=t),y&&r&&i(r,"arity")&&e.length!==r.arity&&h(e,"length",{value:r.arity});try{r&&i(r,"constructor")&&r.constructor?u&&h(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var n=f(e);return i(n,"source")||(n.source=m(b,"string"==typeof t?t:"")),e};Function.prototype.toString=w((function(){return o(this)&&d(this).source||s(this)}),"toString")},8799:(e,t,r)=>{var n=r(81540),a=Map.prototype;e.exports={Map,set:n(a.set),get:n(a.get),has:n(a.has),remove:n(a.delete),proto:a}},66995:e=>{var t=Math.expm1,r=Math.exp;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){var t=+e;return 0==t?t:t>-1e-6&&t<1e-6?t+t*t/2:r(t)-1}:t},30103:(e,t,r)=>{var n=r(31031),a=Math.abs,o=Math.pow,i=o(2,-52),u=o(2,-23),l=o(2,127)*(2-u),s=o(2,-126);e.exports=Math.fround||function(e){var t,r,o=+e,c=a(o),f=n(o);return c<s?f*function(e){return e+1/i-1/i}(c/s/u)*s*u:(r=(t=(1+u/i)*c)-(t-c))>l||r!=r?f*(1/0):f*r}},77157:e=>{var t=Math.log,r=Math.LOG10E;e.exports=Math.log10||function(e){return t(e)*r}},46407:e=>{var t=Math.log;e.exports=Math.log1p||function(e){var r=+e;return r>-1e-8&&r<1e-8?r-r*r/2:t(1+r)}},31031:e=>{e.exports=Math.sign||function(e){var t=+e;return 0==t||t!=t?t:t<0?-1:1}},23846:e=>{var t=Math.ceil,r=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?r:t)(n)}},8217:(e,t,r)=>{var n,a,o,i,u,l=r(2569),s=r(11567),c=r(80892).f,f=r(51306).set,d=r(50854),p=r(49619),h=r(628),v=r(21335),g=r(52285),m=l.MutationObserver||l.WebKitMutationObserver,y=l.document,b=l.process,w=l.Promise,x=c(l,"queueMicrotask"),S=x&&x.value;if(!S){var E=new d,k=function(){var e,t;for(g&&(e=b.domain)&&e.exit();t=E.get();)try{t()}catch(e){throw E.head&&n(),e}e&&e.enter()};p||g||v||!m||!y?!h&&w&&w.resolve?((i=w.resolve(void 0)).constructor=w,u=s(i.then,i),n=function(){u(k)}):g?n=function(){b.nextTick(k)}:(f=s(f,l),n=function(){f(k)}):(a=!0,o=y.createTextNode(""),new m(k).observe(o,{characterData:!0}),n=function(){o.data=a=!a}),S=function(e){E.head||n(),E.add(e)}}e.exports=S},54856:(e,t,r)=>{"use strict";var n=r(92220),a=TypeError,o=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw a("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new o(e)}},88238:(e,t,r)=>{var n=r(44818);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:n(e)}},51733:(e,t,r)=>{var n=r(16499),a=TypeError;e.exports=function(e){if(n(e))throw a("The method doesn't accept regular expressions");return e}},49872:(e,t,r)=>{var n=r(2569).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&n(e)}},28097:(e,t,r)=>{var n=r(2569),a=r(2112),o=r(81540),i=r(44818),u=r(70313).trim,l=r(92738),s=o("".charAt),c=n.parseFloat,f=n.Symbol,d=f&&f.iterator,p=1/c(l+"-0")!=-1/0||d&&!a((function(){c(Object(d))}));e.exports=p?function(e){var t=u(i(e)),r=c(t);return 0===r&&"-"==s(t,0)?-0:r}:c},75191:(e,t,r)=>{var n=r(2569),a=r(2112),o=r(81540),i=r(44818),u=r(70313).trim,l=r(92738),s=n.parseInt,c=n.Symbol,f=c&&c.iterator,d=/^[+-]?0x/i,p=o(d.exec),h=8!==s(l+"08")||22!==s(l+"0x16")||f&&!a((function(){s(Object(f))}));e.exports=h?function(e,t){var r=u(i(e));return s(r,t>>>0||(p(d,r)?16:10))}:s},55069:(e,t,r)=>{"use strict";var n=r(81738),a=r(81540),o=r(67425),i=r(2112),u=r(2551),l=r(10419),s=r(27079),c=r(56416),f=r(96674),d=Object.assign,p=Object.defineProperty,h=a([].concat);e.exports=!d||i((function(){if(n&&1!==d({b:1},d(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol(),a="abcdefghijklmnopqrst";return e[r]=7,a.split("").forEach((function(e){t[e]=e})),7!=d({},e)[r]||u(d({},t)).join("")!=a}))?function(e,t){for(var r=c(e),a=arguments.length,i=1,d=l.f,p=s.f;a>i;)for(var v,g=f(arguments[i++]),m=d?h(u(g),d(g)):u(g),y=m.length,b=0;y>b;)v=m[b++],n&&!o(p,g,v)||(r[v]=g[v]);return r}:d},99062:(e,t,r)=>{var n,a=r(1421),o=r(63116),i=r(64328),u=r(29012),l=r(60099),s=r(77934),c=r(59097),f="prototype",d="script",p=c("IE_PROTO"),h=function(){},v=function(e){return"<"+d+">"+e+"</"+d+">"},g=function(e){e.write(v("")),e.close();var t=e.parentWindow.Object;return e=null,t},m=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t,r;m="undefined"!=typeof document?document.domain&&n?g(n):(t=s("iframe"),r="java"+d+":",t.style.display="none",l.appendChild(t),t.src=String(r),(e=t.contentWindow.document).open(),e.write(v("document.F=Object")),e.close(),e.F):g(n);for(var a=i.length;a--;)delete m[f][i[a]];return m()};u[p]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(h[f]=a(e),r=new h,h[f]=null,r[p]=e):r=m(),void 0===t?r:o.f(r,t)}},63116:(e,t,r)=>{var n=r(81738),a=r(5734),o=r(70378),i=r(1421),u=r(47830),l=r(2551);t.f=n&&!a?Object.defineProperties:function(e,t){i(e);for(var r,n=u(t),a=l(t),s=a.length,c=0;s>c;)o.f(e,r=a[c++],n[r]);return e}},70378:(e,t,r)=>{var n=r(81738),a=r(38232),o=r(5734),i=r(1421),u=r(67411),l=TypeError,s=Object.defineProperty,c=Object.getOwnPropertyDescriptor,f="enumerable",d="configurable",p="writable";t.f=n?o?function(e,t,r){if(i(e),t=u(t),i(r),"function"==typeof e&&"prototype"===t&&"value"in r&&p in r&&!r[p]){var n=c(e,t);n&&n[p]&&(e[t]=r.value,r={configurable:d in r?r[d]:n[d],enumerable:f in r?r[f]:n[f],writable:!1})}return s(e,t,r)}:s:function(e,t,r){if(i(e),t=u(t),i(r),a)try{return s(e,t,r)}catch(e){}if("get"in r||"set"in r)throw l("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},80892:(e,t,r)=>{var n=r(81738),a=r(67425),o=r(27079),i=r(93233),u=r(47830),l=r(67411),s=r(95320),c=r(38232),f=Object.getOwnPropertyDescriptor;t.f=n?f:function(e,t){if(e=u(e),t=l(t),c)try{return f(e,t)}catch(e){}if(s(e,t))return i(!a(o.f,e,t),e[t])}},18322:(e,t,r)=>{var n=r(98250),a=r(47830),o=r(89704).f,i=r(12530),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return u&&"Window"==n(e)?function(e){try{return o(e)}catch(e){return i(u)}}(e):o(a(e))}},89704:(e,t,r)=>{var n=r(19313),a=r(64328).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,a)}},10419:(e,t)=>{t.f=Object.getOwnPropertySymbols},19299:(e,t,r)=>{var n=r(95320),a=r(34354),o=r(56416),i=r(59097),u=r(95031),l=i("IE_PROTO"),s=Object,c=s.prototype;e.exports=u?s.getPrototypeOf:function(e){var t=o(e);if(n(t,l))return t[l];var r=t.constructor;return a(r)&&t instanceof r?r.prototype:t instanceof s?c:null}},20541:(e,t,r)=>{var n=r(2112),a=r(21651),o=r(98250),i=r(59309),u=Object.isExtensible,l=n((function(){u(1)}));e.exports=l||i?function(e){return!!a(e)&&(!i||"ArrayBuffer"!=o(e))&&(!u||u(e))}:u},77652:(e,t,r)=>{var n=r(81540);e.exports=n({}.isPrototypeOf)},19313:(e,t,r)=>{var n=r(81540),a=r(95320),o=r(47830),i=r(54041).indexOf,u=r(29012),l=n([].push);e.exports=function(e,t){var r,n=o(e),s=0,c=[];for(r in n)!a(u,r)&&a(n,r)&&l(c,r);for(;t.length>s;)a(n,r=t[s++])&&(~i(c,r)||l(c,r));return c}},2551:(e,t,r)=>{var n=r(19313),a=r(64328);e.exports=Object.keys||function(e){return n(e,a)}},27079:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,a=n&&!r.call({1:2},1);t.f=a?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},62733:(e,t,r)=>{"use strict";var n=r(51274),a=r(2569),o=r(2112),i=r(64336);e.exports=n||!o((function(){if(!(i&&i<535)){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete a[e]}}))},64001:(e,t,r)=>{var n=r(81540),a=r(1421),o=r(33467);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return a(r),o(n),t?e(r,n):r.__proto__=n,r}}():void 0)},12960:(e,t,r)=>{var n=r(81738),a=r(81540),o=r(2551),i=r(47830),u=a(r(27079).f),l=a([].push),s=function(e){return function(t){for(var r,a=i(t),s=o(a),c=s.length,f=0,d=[];c>f;)r=s[f++],n&&!u(a,r)||l(d,e?[r,a[r]]:a[r]);return d}};e.exports={entries:s(!0),values:s(!1)}},65726:(e,t,r)=>{"use strict";var n=r(12102),a=r(33114);e.exports=n?{}.toString:function(){return"[object "+a(this)+"]"}},86964:(e,t,r)=>{var n=r(67425),a=r(34354),o=r(21651),i=TypeError;e.exports=function(e,t){var r,u;if("string"===t&&a(r=e.toString)&&!o(u=n(r,e)))return u;if(a(r=e.valueOf)&&!o(u=n(r,e)))return u;if("string"!==t&&a(r=e.toString)&&!o(u=n(r,e)))return u;throw i("Can't convert object to primitive value")}},56830:(e,t,r)=>{var n=r(12430),a=r(81540),o=r(89704),i=r(10419),u=r(1421),l=a([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(u(e)),r=i.f;return r?l(t,r(e)):t}},80040:(e,t,r)=>{var n=r(2569);e.exports=n},53783:e=>{e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},77:(e,t,r)=>{var n=r(2569),a=r(15746),o=r(34354),i=r(58787),u=r(55193),l=r(72931),s=r(75879),c=r(67798),f=r(51274),d=r(9318),p=a&&a.prototype,h=l("species"),v=!1,g=o(n.PromiseRejectionEvent),m=i("Promise",(function(){var e=u(a),t=e!==String(a);if(!t&&66===d)return!0;if(f&&(!p.catch||!p.finally))return!0;if(!d||d<51||!/native code/.test(e)){var r=new a((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};if((r.constructor={})[h]=n,!(v=r.then((function(){}))instanceof n))return!0}return!t&&(s||c)&&!g}));e.exports={CONSTRUCTOR:m,REJECTION_EVENT:g,SUBCLASSING:v}},15746:(e,t,r)=>{var n=r(2569);e.exports=n.Promise},8718:(e,t,r)=>{var n=r(1421),a=r(21651),o=r(54856);e.exports=function(e,t){if(n(e),a(t)&&t.constructor===e)return t;var r=o.f(e);return(0,r.resolve)(t),r.promise}},54487:(e,t,r)=>{var n=r(15746),a=r(42997),o=r(77).CONSTRUCTOR;e.exports=o||!a((function(e){n.all(e).then(void 0,(function(){}))}))},55482:(e,t,r)=>{var n=r(70378).f;e.exports=function(e,t,r){r in e||n(e,r,{configurable:!0,get:function(){return t[r]},set:function(e){t[r]=e}})}},50854:e=>{var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null},r=this.tail;r?r.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=t},42216:(e,t,r)=>{var n=r(67425),a=r(1421),o=r(34354),i=r(98250),u=r(56226),l=TypeError;e.exports=function(e,t){var r=e.exec;if(o(r)){var s=n(r,e,t);return null!==s&&a(s),s}if("RegExp"===i(e))return n(u,e,t);throw l("RegExp#exec called on incompatible receiver")}},56226:(e,t,r)=>{"use strict";var n,a,o=r(67425),i=r(81540),u=r(44818),l=r(61174),s=r(95661),c=r(59944),f=r(99062),d=r(73500).get,p=r(7134),h=r(81008),v=c("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,m=g,y=i("".charAt),b=i("".indexOf),w=i("".replace),x=i("".slice),S=(a=/b*/g,o(g,n=/a/,"a"),o(g,a,"a"),0!==n.lastIndex||0!==a.lastIndex),E=s.BROKEN_CARET,k=void 0!==/()??/.exec("")[1];(S||k||E||p||h)&&(m=function(e){var t,r,n,a,i,s,c,p=this,h=d(p),R=u(e),C=h.raw;if(C)return C.lastIndex=p.lastIndex,t=o(m,C,R),p.lastIndex=C.lastIndex,t;var P=h.groups,A=E&&p.sticky,O=o(l,p),T=p.source,_=0,M=R;if(A&&(O=w(O,"y",""),-1===b(O,"g")&&(O+="g"),M=x(R,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==y(R,p.lastIndex-1))&&(T="(?: "+T+")",M=" "+M,_++),r=new RegExp("^(?:"+T+")",O)),k&&(r=new RegExp("^"+T+"$(?!\\s)",O)),S&&(n=p.lastIndex),a=o(g,A?r:p,M),A?a?(a.input=x(a.input,_),a[0]=x(a[0],_),a.index=p.lastIndex,p.lastIndex+=a[0].length):p.lastIndex=0:S&&a&&(p.lastIndex=p.global?a.index+a[0].length:n),k&&a&&a.length>1&&o(v,a[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(a[i]=void 0)})),a&&P)for(a.groups=s=f(null),i=0;i<P.length;i++)s[(c=P[i])[0]]=a[c[1]];return a}),e.exports=m},61174:(e,t,r)=>{"use strict";var n=r(1421);e.exports=function(){var e=n(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},6058:(e,t,r)=>{var n=r(67425),a=r(95320),o=r(77652),i=r(61174),u=RegExp.prototype;e.exports=function(e){var t=e.flags;return void 0!==t||"flags"in u||a(e,"flags")||!o(u,e)?t:n(i,e)}},95661:(e,t,r)=>{var n=r(2112),a=r(2569).RegExp,o=n((function(){var e=a("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),i=o||n((function(){return!a("a","y").sticky})),u=o||n((function(){var e=a("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:u,MISSED_STICKY:i,UNSUPPORTED_Y:o}},7134:(e,t,r)=>{var n=r(2112),a=r(2569).RegExp;e.exports=n((function(){var e=a(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},81008:(e,t,r)=>{var n=r(2112),a=r(2569).RegExp;e.exports=n((function(){var e=a("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},81196:(e,t,r)=>{var n=r(88260),a=TypeError;e.exports=function(e){if(n(e))throw a("Can't call method on "+e);return e}},24726:e=>{e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},47038:(e,t,r)=>{"use strict";var n,a=r(2569),o=r(92976),i=r(34354),u=r(97107),l=r(52831),s=r(28142),c=r(35249),f=a.Function,d=/MSIE .\./.test(l)||u&&((n=a.Bun.version.split(".")).length<3||0==n[0]&&(n[1]<3||3==n[1]&&0==n[2]));e.exports=function(e,t){var r=t?2:1;return d?function(n,a){var u=c(arguments.length,1)>r,l=i(n)?n:f(n),d=u?s(arguments,r):[],p=u?function(){o(l,this,d)}:l;return t?e(p,a):e(p)}:e}},97788:(e,t,r)=>{var n=r(81540),a=Set.prototype;e.exports={Set,add:n(a.add),has:n(a.has),remove:n(a.delete),proto:a,$has:a.has,$keys:a.keys}},81601:(e,t,r)=>{"use strict";var n=r(12430),a=r(70378),o=r(72931),i=r(81738),u=o("species");e.exports=function(e){var t=n(e),r=a.f;i&&t&&!t[u]&&r(t,u,{configurable:!0,get:function(){return this}})}},22087:(e,t,r)=>{var n=r(70378).f,a=r(95320),o=r(72931)("toStringTag");e.exports=function(e,t,r){e&&!r&&(e=e.prototype),e&&!a(e,o)&&n(e,o,{configurable:!0,value:t})}},59097:(e,t,r)=>{var n=r(59944),a=r(9225),o=n("keys");e.exports=function(e){return o[e]||(o[e]=a(e))}},87039:(e,t,r)=>{var n=r(2569),a=r(85967),o="__core-js_shared__",i=n[o]||a(o,{});e.exports=i},59944:(e,t,r)=>{var n=r(51274),a=r(87039);(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.27.2",mode:n?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.27.2/LICENSE",source:"https://github.com/zloirock/core-js"})},79139:(e,t,r)=>{var n=r(1421),a=r(14579),o=r(88260),i=r(72931)("species");e.exports=function(e,t){var r,u=n(e).constructor;return void 0===u||o(r=n(u)[i])?t:a(r)}},62190:(e,t,r)=>{var n=r(2112);e.exports=function(e){return n((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},99075:(e,t,r)=>{var n=r(81540),a=r(11859),o=r(44818),i=r(81196),u=n("".charAt),l=n("".charCodeAt),s=n("".slice),c=function(e){return function(t,r){var n,c,f=o(i(t)),d=a(r),p=f.length;return d<0||d>=p?e?"":void 0:(n=l(f,d))<55296||n>56319||d+1===p||(c=l(f,d+1))<56320||c>57343?e?u(f,d):n:e?s(f,d,d+2):c-56320+(n-55296<<10)+65536}};e.exports={codeAt:c(!1),charAt:c(!0)}},86339:(e,t,r)=>{var n=r(52831);e.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(n)},97459:(e,t,r)=>{var n=r(81540),a=r(89309),o=r(44818),i=r(94081),u=r(81196),l=n(i),s=n("".slice),c=Math.ceil,f=function(e){return function(t,r,n){var i,f,d=o(u(t)),p=a(r),h=d.length,v=void 0===n?" ":o(n);return p<=h||""==v?d:((f=l(v,c((i=p-h)/v.length))).length>i&&(f=s(f,0,i)),e?d+f:f+d)}};e.exports={start:f(!1),end:f(!0)}},48737:(e,t,r)=>{var n=r(81540),a=2147483647,o=/[^\0-\u007E]/,i=/[.\u3002\uFF0E\uFF61]/g,u="Overflow: input needs wider integers to process",l=RangeError,s=n(i.exec),c=Math.floor,f=String.fromCharCode,d=n("".charCodeAt),p=n([].join),h=n([].push),v=n("".replace),g=n("".split),m=n("".toLowerCase),y=function(e){return e+22+75*(e<26)},b=function(e,t,r){var n=0;for(e=r?c(e/700):e>>1,e+=c(e/t);e>455;)e=c(e/35),n+=36;return c(n+36*e/(e+38))},w=function(e){var t=[];e=function(e){for(var t=[],r=0,n=e.length;r<n;){var a=d(e,r++);if(a>=55296&&a<=56319&&r<n){var o=d(e,r++);56320==(64512&o)?h(t,((1023&a)<<10)+(1023&o)+65536):(h(t,a),r--)}else h(t,a)}return t}(e);var r,n,o=e.length,i=128,s=0,v=72;for(r=0;r<e.length;r++)(n=e[r])<128&&h(t,f(n));var g=t.length,m=g;for(g&&h(t,"-");m<o;){var w=a;for(r=0;r<e.length;r++)(n=e[r])>=i&&n<w&&(w=n);var x=m+1;if(w-i>c((a-s)/x))throw l(u);for(s+=(w-i)*x,i=w,r=0;r<e.length;r++){if((n=e[r])<i&&++s>a)throw l(u);if(n==i){for(var S=s,E=36;;){var k=E<=v?1:E>=v+26?26:E-v;if(S<k)break;var R=S-k,C=36-k;h(t,f(y(k+R%C))),S=c(R/C),E+=36}h(t,f(y(S))),v=b(s,x,m==g),s=0,m++}}s++,i++}return p(t,"")};e.exports=function(e){var t,r,n=[],a=g(v(m(e),i,"."),".");for(t=0;t<a.length;t++)r=a[t],h(n,s(o,r)?"xn--"+w(r):r);return p(n,".")}},94081:(e,t,r)=>{"use strict";var n=r(11859),a=r(44818),o=r(81196),i=RangeError;e.exports=function(e){var t=a(o(this)),r="",u=n(e);if(u<0||u==1/0)throw i("Wrong number of repetitions");for(;u>0;(u>>>=1)&&(t+=t))1&u&&(r+=t);return r}},86243:(e,t,r)=>{"use strict";var n=r(70313).end,a=r(94728);e.exports=a("trimEnd")?function(){return n(this)}:"".trimEnd},94728:(e,t,r)=>{var n=r(50034).PROPER,a=r(2112),o=r(92738);e.exports=function(e){return a((function(){return!!o[e]()||"​᠎"!=="​᠎"[e]()||n&&o[e].name!==e}))}},47455:(e,t,r)=>{"use strict";var n=r(70313).start,a=r(94728);e.exports=a("trimStart")?function(){return n(this)}:"".trimStart},70313:(e,t,r)=>{var n=r(81540),a=r(81196),o=r(44818),i=r(92738),u=n("".replace),l="["+i+"]",s=RegExp("^"+l+l+"*"),c=RegExp(l+l+"*$"),f=function(e){return function(t){var r=o(a(t));return 1&e&&(r=u(r,s,"")),2&e&&(r=u(r,c,"")),r}};e.exports={start:f(1),end:f(2),trim:f(3)}},46514:(e,t,r)=>{var n=r(9318),a=r(2112);e.exports=!!Object.getOwnPropertySymbols&&!a((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},16519:(e,t,r)=>{var n=r(67425),a=r(12430),o=r(72931),i=r(74704);e.exports=function(){var e=a("Symbol"),t=e&&e.prototype,r=t&&t.valueOf,u=o("toPrimitive");t&&!t[u]&&i(t,u,(function(e){return n(r,this)}),{arity:1})}},45393:(e,t,r)=>{var n=r(46514);e.exports=n&&!!Symbol.for&&!!Symbol.keyFor},51306:(e,t,r)=>{var n,a,o,i,u=r(2569),l=r(92976),s=r(11567),c=r(34354),f=r(95320),d=r(2112),p=r(60099),h=r(28142),v=r(77934),g=r(35249),m=r(49619),y=r(52285),b=u.setImmediate,w=u.clearImmediate,x=u.process,S=u.Dispatch,E=u.Function,k=u.MessageChannel,R=u.String,C=0,P={},A="onreadystatechange";d((function(){n=u.location}));var O=function(e){if(f(P,e)){var t=P[e];delete P[e],t()}},T=function(e){return function(){O(e)}},_=function(e){O(e.data)},M=function(e){u.postMessage(R(e),n.protocol+"//"+n.host)};b&&w||(b=function(e){g(arguments.length,1);var t=c(e)?e:E(e),r=h(arguments,1);return P[++C]=function(){l(t,void 0,r)},a(C),C},w=function(e){delete P[e]},y?a=function(e){x.nextTick(T(e))}:S&&S.now?a=function(e){S.now(T(e))}:k&&!m?(i=(o=new k).port2,o.port1.onmessage=_,a=s(i.postMessage,i)):u.addEventListener&&c(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!d(M)?(a=M,u.addEventListener("message",_,!1)):a=A in v("script")?function(e){p.appendChild(v("script"))[A]=function(){p.removeChild(this),O(e)}}:function(e){setTimeout(T(e),0)}),e.exports={set:b,clear:w}},25841:(e,t,r)=>{var n=r(81540);e.exports=n(1..valueOf)},47841:(e,t,r)=>{var n=r(11859),a=Math.max,o=Math.min;e.exports=function(e,t){var r=n(e);return r<0?a(r+t,0):o(r,t)}},32324:(e,t,r)=>{var n=r(80038),a=TypeError;e.exports=function(e){var t=n(e,"number");if("number"==typeof t)throw a("Can't convert number to bigint");return BigInt(t)}},46546:(e,t,r)=>{var n=r(11859),a=r(89309),o=RangeError;e.exports=function(e){if(void 0===e)return 0;var t=n(e),r=a(t);if(t!==r)throw o("Wrong length or index");return r}},47830:(e,t,r)=>{var n=r(96674),a=r(81196);e.exports=function(e){return n(a(e))}},11859:(e,t,r)=>{var n=r(23846);e.exports=function(e){var t=+e;return t!=t||0===t?0:n(t)}},89309:(e,t,r)=>{var n=r(11859),a=Math.min;e.exports=function(e){return e>0?a(n(e),9007199254740991):0}},56416:(e,t,r)=>{var n=r(81196),a=Object;e.exports=function(e){return a(n(e))}},40493:(e,t,r)=>{var n=r(81222),a=RangeError;e.exports=function(e,t){var r=n(e);if(r%t)throw a("Wrong offset");return r}},81222:(e,t,r)=>{var n=r(11859),a=RangeError;e.exports=function(e){var t=n(e);if(t<0)throw a("The argument can't be less than 0");return t}},80038:(e,t,r)=>{var n=r(67425),a=r(21651),o=r(98937),i=r(85324),u=r(86964),l=r(72931),s=TypeError,c=l("toPrimitive");e.exports=function(e,t){if(!a(e)||o(e))return e;var r,l=i(e,c);if(l){if(void 0===t&&(t="default"),r=n(l,e,t),!a(r)||o(r))return r;throw s("Can't convert object to primitive value")}return void 0===t&&(t="number"),u(e,t)}},67411:(e,t,r)=>{var n=r(80038),a=r(98937);e.exports=function(e){var t=n(e,"string");return a(t)?t:t+""}},12102:(e,t,r)=>{var n={};n[r(72931)("toStringTag")]="z",e.exports="[object z]"===String(n)},44818:(e,t,r)=>{var n=r(33114),a=String;e.exports=function(e){if("Symbol"===n(e))throw TypeError("Cannot convert a Symbol value to a string");return a(e)}},9138:(e,t,r)=>{var n=r(52285);e.exports=function(e){try{if(n)return Function('return require("'+e+'")')()}catch(e){}}},23700:e=>{var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},36507:(e,t,r)=>{"use strict";var n=r(47641),a=r(2569),o=r(67425),i=r(81738),u=r(66675),l=r(20352),s=r(44659),c=r(85806),f=r(93233),d=r(27632),p=r(98635),h=r(89309),v=r(46546),g=r(40493),m=r(67411),y=r(95320),b=r(33114),w=r(21651),x=r(98937),S=r(99062),E=r(77652),k=r(64001),R=r(89704).f,C=r(99311),P=r(92387).forEach,A=r(81601),O=r(70378),T=r(80892),_=r(73500),M=r(20679),I=_.get,L=_.set,D=_.enforce,N=O.f,j=T.f,U=Math.round,F=a.RangeError,z=s.ArrayBuffer,B=z.prototype,W=s.DataView,V=l.NATIVE_ARRAY_BUFFER_VIEWS,H=l.TYPED_ARRAY_TAG,$=l.TypedArray,q=l.TypedArrayPrototype,Q=l.aTypedArrayConstructor,G=l.isTypedArray,Y="BYTES_PER_ELEMENT",K="Wrong length",X=function(e,t){Q(e);for(var r=0,n=t.length,a=new e(n);n>r;)a[r]=t[r++];return a},J=function(e,t){N(e,t,{get:function(){return I(this)[t]}})},Z=function(e){var t;return E(B,e)||"ArrayBuffer"==(t=b(e))||"SharedArrayBuffer"==t},ee=function(e,t){return G(e)&&!x(t)&&t in e&&p(+t)&&t>=0},te=function(e,t){return t=m(t),ee(e,t)?f(2,e[t]):j(e,t)},re=function(e,t,r){return t=m(t),!(ee(e,t)&&w(r)&&y(r,"value"))||y(r,"get")||y(r,"set")||r.configurable||y(r,"writable")&&!r.writable||y(r,"enumerable")&&!r.enumerable?N(e,t,r):(e[t]=r.value,e)};i?(V||(T.f=te,O.f=re,J(q,"buffer"),J(q,"byteOffset"),J(q,"byteLength"),J(q,"length")),n({target:"Object",stat:!0,forced:!V},{getOwnPropertyDescriptor:te,defineProperty:re}),e.exports=function(e,t,r){var i=e.match(/\d+$/)[0]/8,l=e+(r?"Clamped":"")+"Array",s="get"+e,f="set"+e,p=a[l],m=p,y=m&&m.prototype,b={},x=function(e,t){N(e,t,{get:function(){return function(e,t){var r=I(e);return r.view[s](t*i+r.byteOffset,!0)}(this,t)},set:function(e){return function(e,t,n){var a=I(e);r&&(n=(n=U(n))<0?0:n>255?255:255&n),a.view[f](t*i+a.byteOffset,n,!0)}(this,t,e)},enumerable:!0})};V?u&&(m=t((function(e,t,r,n){return c(e,y),M(w(t)?Z(t)?void 0!==n?new p(t,g(r,i),n):void 0!==r?new p(t,g(r,i)):new p(t):G(t)?X(m,t):o(C,m,t):new p(v(t)),e,m)})),k&&k(m,$),P(R(p),(function(e){e in m||d(m,e,p[e])})),m.prototype=y):(m=t((function(e,t,r,n){c(e,y);var a,u,l,s=0,f=0;if(w(t)){if(!Z(t))return G(t)?X(m,t):o(C,m,t);a=t,f=g(r,i);var d=t.byteLength;if(void 0===n){if(d%i)throw F(K);if((u=d-f)<0)throw F(K)}else if((u=h(n)*i)+f>d)throw F(K);l=u/i}else l=v(t),a=new z(u=l*i);for(L(e,{buffer:a,byteOffset:f,byteLength:u,length:l,view:new W(a)});s<l;)x(e,s++)})),k&&k(m,$),y=m.prototype=S(q)),y.constructor!==m&&d(y,"constructor",m),D(y).TypedArrayConstructor=m,H&&d(y,H,l);var E=m!=p;b[l]=m,n({global:!0,constructor:!0,forced:E,sham:!V},b),Y in m||d(m,Y,i),Y in y||d(y,Y,i),A(l)}):e.exports=function(){}},66675:(e,t,r)=>{var n=r(2569),a=r(2112),o=r(42997),i=r(20352).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,l=n.Int8Array;e.exports=!i||!a((function(){l(1)}))||!a((function(){new l(-1)}))||!o((function(e){new l,new l(null),new l(1.5),new l(e)}),!0)||a((function(){return 1!==new l(new u(2),1,void 0).length}))},45605:(e,t,r)=>{var n=r(19749),a=r(89619);e.exports=function(e,t){return n(a(e),t)}},99311:(e,t,r)=>{var n=r(11567),a=r(67425),o=r(14579),i=r(56416),u=r(36095),l=r(98061),s=r(43230),c=r(22919),f=r(34132),d=r(20352).aTypedArrayConstructor,p=r(32324);e.exports=function(e){var t,r,h,v,g,m,y,b,w=o(this),x=i(e),S=arguments.length,E=S>1?arguments[1]:void 0,k=void 0!==E,R=s(x);if(R&&!c(R))for(b=(y=l(x,R)).next,x=[];!(m=a(b,y)).done;)x.push(m.value);for(k&&S>2&&(E=n(E,arguments[2])),r=u(x),h=new(d(w))(r),v=f(h),t=0;r>t;t++)g=k?E(x[t],t):x[t],h[t]=v?p(g):+g;return h}},89619:(e,t,r)=>{var n=r(20352),a=r(79139),o=n.aTypedArrayConstructor,i=n.getTypedArrayConstructor;e.exports=function(e){return o(a(e,i(e)))}},9225:(e,t,r)=>{var n=r(81540),a=0,o=Math.random(),i=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++a+o,36)}},55888:(e,t,r)=>{var n=r(2112),a=r(72931),o=r(51274),i=a("iterator");e.exports=!n((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,r="";return e.pathname="c%20d",t.forEach((function(e,n){t.delete("b"),r+=n+e})),o&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[i]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},97374:(e,t,r)=>{var n=r(46514);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5734:(e,t,r)=>{var n=r(81738),a=r(2112);e.exports=n&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},35249:e=>{var t=TypeError;e.exports=function(e,r){if(e<r)throw t("Not enough arguments");return e}},63125:(e,t,r)=>{var n=r(2569),a=r(34354),o=n.WeakMap;e.exports=a(o)&&/native code/.test(String(o))},63778:(e,t,r)=>{var n=r(80040),a=r(95320),o=r(29208),i=r(70378).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});a(t,e)||i(t,e,{value:o.f(e)})}},29208:(e,t,r)=>{var n=r(72931);t.f=n},72931:(e,t,r)=>{var n=r(2569),a=r(59944),o=r(95320),i=r(9225),u=r(46514),l=r(97374),s=n.Symbol,c=a("wks"),f=l?s.for||s:s&&s.withoutSetter||i;e.exports=function(e){return o(c,e)||(c[e]=u&&o(s,e)?s[e]:f("Symbol."+e)),c[e]}},92738:e=>{e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},16685:(e,t,r)=>{"use strict";var n=r(12430),a=r(95320),o=r(27632),i=r(77652),u=r(64001),l=r(68778),s=r(55482),c=r(20679),f=r(88238),d=r(56731),p=r(68695),h=r(81738),v=r(51274);e.exports=function(e,t,r,g){var m="stackTraceLimit",y=g?2:1,b=e.split("."),w=b[b.length-1],x=n.apply(null,b);if(x){var S=x.prototype;if(!v&&a(S,"cause")&&delete S.cause,!r)return x;var E=n("Error"),k=t((function(e,t){var r=f(g?t:e,void 0),n=g?new x(e):new x;return void 0!==r&&o(n,"message",r),p(n,k,n.stack,2),this&&i(S,this)&&c(n,this,k),arguments.length>y&&d(n,arguments[y]),n}));if(k.prototype=S,"Error"!==w?u?u(k,E):l(k,E,{name:!0}):h&&m in x&&(s(k,x,m),s(k,x,"prepareStackTrace")),l(k,x),!v)try{S.name!==w&&o(S,"name",w),S.constructor=k}catch(e){}return k}}},3509:(e,t,r)=>{var n=r(47641),a=r(12430),o=r(92976),i=r(2112),u=r(16685),l="AggregateError",s=a(l),c=!i((function(){return 1!==s([1]).errors[0]}))&&i((function(){return 7!==s([1],l,{cause:7}).cause}));n({global:!0,constructor:!0,arity:2,forced:c},{AggregateError:u(l,(function(e){return function(t,r){return o(e,this,arguments)}}),c,!0)})},75358:(e,t,r)=>{"use strict";var n=r(47641),a=r(77652),o=r(19299),i=r(64001),u=r(68778),l=r(99062),s=r(27632),c=r(93233),f=r(56731),d=r(68695),p=r(56651),h=r(88238),v=r(72931)("toStringTag"),g=Error,m=[].push,y=function(e,t){var r,n=a(b,this);i?r=i(g(),n?o(this):b):(r=n?this:l(b),s(r,v,"Error")),void 0!==t&&s(r,"message",h(t)),d(r,y,r.stack,1),arguments.length>2&&f(r,arguments[2]);var u=[];return p(e,m,{that:u}),s(r,"errors",u),r};i?i(y,g):u(y,g,{name:!0});var b=y.prototype=l(g.prototype,{constructor:c(1,y),message:c(1,""),name:c(1,"AggregateError")});n({global:!0,constructor:!0,arity:2},{AggregateError:y})},25200:(e,t,r)=>{r(75358)},31372:(e,t,r)=>{"use strict";var n=r(47641),a=r(2569),o=r(44659),i=r(81601),u="ArrayBuffer",l=o[u];n({global:!0,constructor:!0,forced:a[u]!==l},{ArrayBuffer:l}),i(u)},26132:(e,t,r)=>{var n=r(47641),a=r(20352);n({target:"ArrayBuffer",stat:!0,forced:!a.NATIVE_ARRAY_BUFFER_VIEWS},{isView:a.isView})},18363:(e,t,r)=>{"use strict";var n=r(47641),a=r(51607),o=r(2112),i=r(44659),u=r(1421),l=r(47841),s=r(89309),c=r(79139),f=i.ArrayBuffer,d=i.DataView,p=d.prototype,h=a(f.prototype.slice),v=a(p.getUint8),g=a(p.setUint8);n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:o((function(){return!new f(2).slice(1,void 0).byteLength}))},{slice:function(e,t){if(h&&void 0===t)return h(u(this),e);for(var r=u(this).byteLength,n=l(e,r),a=l(void 0===t?r:t,r),o=new(c(this,f))(s(a-n)),i=new d(this),p=new d(o),m=0;n<a;)g(p,m++,v(i,n++));return o}})},92585:(e,t,r)=>{"use strict";var n=r(47641),a=r(56416),o=r(36095),i=r(11859),u=r(82834);n({target:"Array",proto:!0},{at:function(e){var t=a(this),r=o(t),n=i(e),u=n>=0?n:r+n;return u<0||u>=r?void 0:t[u]}}),u("at")},33460:(e,t,r)=>{"use strict";var n=r(47641),a=r(2112),o=r(85506),i=r(21651),u=r(56416),l=r(36095),s=r(99325),c=r(48923),f=r(33496),d=r(7397),p=r(72931),h=r(9318),v=p("isConcatSpreadable"),g=h>=51||!a((function(){var e=[];return e[v]=!1,e.concat()[0]!==e})),m=function(e){if(!i(e))return!1;var t=e[v];return void 0!==t?!!t:o(e)};n({target:"Array",proto:!0,arity:1,forced:!g||!d("concat")},{concat:function(e){var t,r,n,a,o,i=u(this),d=f(i,0),p=0;for(t=-1,n=arguments.length;t<n;t++)if(m(o=-1===t?i:arguments[t]))for(a=l(o),s(p+a),r=0;r<a;r++,p++)r in o&&c(d,p,o[r]);else s(p+1),c(d,p++,o);return d.length=p,d}})},14138:(e,t,r)=>{var n=r(47641),a=r(78806),o=r(82834);n({target:"Array",proto:!0},{copyWithin:a}),o("copyWithin")},3734:(e,t,r)=>{"use strict";var n=r(47641),a=r(92387).every;n({target:"Array",proto:!0,forced:!r(30258)("every")},{every:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},79455:(e,t,r)=>{var n=r(47641),a=r(55037),o=r(82834);n({target:"Array",proto:!0},{fill:a}),o("fill")},90957:(e,t,r)=>{"use strict";var n=r(47641),a=r(92387).filter;n({target:"Array",proto:!0,forced:!r(7397)("filter")},{filter:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},3101:(e,t,r)=>{"use strict";var n=r(47641),a=r(92387).findIndex,o=r(82834),i="findIndex",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{findIndex:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),o(i)},61505:(e,t,r)=>{"use strict";var n=r(47641),a=r(47086).findLastIndex,o=r(82834);n({target:"Array",proto:!0},{findLastIndex:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),o("findLastIndex")},97942:(e,t,r)=>{"use strict";var n=r(47641),a=r(47086).findLast,o=r(82834);n({target:"Array",proto:!0},{findLast:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),o("findLast")},45565:(e,t,r)=>{"use strict";var n=r(47641),a=r(92387).find,o=r(82834),i="find",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{find:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),o(i)},59046:(e,t,r)=>{"use strict";var n=r(47641),a=r(48450),o=r(92220),i=r(56416),u=r(36095),l=r(33496);n({target:"Array",proto:!0},{flatMap:function(e){var t,r=i(this),n=u(r);return o(e),(t=l(r,0)).length=a(t,r,r,n,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},81387:(e,t,r)=>{"use strict";var n=r(47641),a=r(48450),o=r(56416),i=r(36095),u=r(11859),l=r(33496);n({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=o(this),r=i(t),n=l(t,0);return n.length=a(n,t,t,r,0,void 0===e?1:u(e)),n}})},26376:(e,t,r)=>{"use strict";var n=r(47641),a=r(26948);n({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},40809:(e,t,r)=>{var n=r(47641),a=r(23419);n({target:"Array",stat:!0,forced:!r(42997)((function(e){Array.from(e)}))},{from:a})},30757:(e,t,r)=>{"use strict";var n=r(47641),a=r(54041).includes,o=r(2112),i=r(82834);n({target:"Array",proto:!0,forced:o((function(){return!Array(1).includes()}))},{includes:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},23251:(e,t,r)=>{"use strict";var n=r(47641),a=r(51607),o=r(54041).indexOf,i=r(30258),u=a([].indexOf),l=!!u&&1/u([1],1,-0)<0;n({target:"Array",proto:!0,forced:l||!i("indexOf")},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return l?u(this,e,t)||0:o(this,e,t)}})},22161:(e,t,r)=>{r(47641)({target:"Array",stat:!0},{isArray:r(85506)})},85006:(e,t,r)=>{"use strict";var n=r(47830),a=r(82834),o=r(9259),i=r(73500),u=r(70378).f,l=r(39371),s=r(77354),c=r(51274),f=r(81738),d="Array Iterator",p=i.set,h=i.getterFor(d);e.exports=l(Array,"Array",(function(e,t){p(this,{type:d,target:n(e),index:0,kind:t})}),(function(){var e=h(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,s(void 0,!0)):s("keys"==r?n:"values"==r?t[n]:[n,t[n]],!1)}),"values");var v=o.Arguments=o.Array;if(a("keys"),a("values"),a("entries"),!c&&f&&"values"!==v.name)try{u(v,"name",{value:"values"})}catch(e){}},10924:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(96674),i=r(47830),u=r(30258),l=a([].join);n({target:"Array",proto:!0,forced:o!=Object||!u("join",",")},{join:function(e){return l(i(this),void 0===e?",":e)}})},50538:(e,t,r)=>{var n=r(47641),a=r(32271);n({target:"Array",proto:!0,forced:a!==[].lastIndexOf},{lastIndexOf:a})},45477:(e,t,r)=>{"use strict";var n=r(47641),a=r(92387).map;n({target:"Array",proto:!0,forced:!r(7397)("map")},{map:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},11268:(e,t,r)=>{"use strict";var n=r(47641),a=r(2112),o=r(37829),i=r(48923),u=Array;n({target:"Array",stat:!0,forced:a((function(){function e(){}return!(u.of.call(e)instanceof e)}))},{of:function(){for(var e=0,t=arguments.length,r=new(o(this)?this:u)(t);t>e;)i(r,e,arguments[e++]);return r.length=t,r}})},9796:(e,t,r)=>{"use strict";var n=r(47641),a=r(56416),o=r(36095),i=r(18419),u=r(99325);n({target:"Array",proto:!0,arity:1,forced:r(2112)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var t=a(this),r=o(t),n=arguments.length;u(r+n);for(var l=0;l<n;l++)t[r]=arguments[l],r++;return i(t,r),r}})},32165:(e,t,r)=>{"use strict";var n=r(47641),a=r(67809).right,o=r(30258),i=r(9318);n({target:"Array",proto:!0,forced:!r(52285)&&i>79&&i<83||!o("reduceRight")},{reduceRight:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},4945:(e,t,r)=>{"use strict";var n=r(47641),a=r(67809).left,o=r(30258),i=r(9318);n({target:"Array",proto:!0,forced:!r(52285)&&i>79&&i<83||!o("reduce")},{reduce:function(e){var t=arguments.length;return a(this,e,t,t>1?arguments[1]:void 0)}})},82996:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(85506),i=a([].reverse),u=[1,2];n({target:"Array",proto:!0,forced:String(u)===String(u.reverse())},{reverse:function(){return o(this)&&(this.length=this.length),i(this)}})},3953:(e,t,r)=>{"use strict";var n=r(47641),a=r(85506),o=r(37829),i=r(21651),u=r(47841),l=r(36095),s=r(47830),c=r(48923),f=r(72931),d=r(7397),p=r(28142),h=d("slice"),v=f("species"),g=Array,m=Math.max;n({target:"Array",proto:!0,forced:!h},{slice:function(e,t){var r,n,f,d=s(this),h=l(d),y=u(e,h),b=u(void 0===t?h:t,h);if(a(d)&&(r=d.constructor,(o(r)&&(r===g||a(r.prototype))||i(r)&&null===(r=r[v]))&&(r=void 0),r===g||void 0===r))return p(d,y,b);for(n=new(void 0===r?g:r)(m(b-y,0)),f=0;y<b;y++,f++)y in d&&c(n,f,d[y]);return n.length=f,n}})},33878:(e,t,r)=>{"use strict";var n=r(47641),a=r(92387).some;n({target:"Array",proto:!0,forced:!r(30258)("some")},{some:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},79821:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(92220),i=r(56416),u=r(36095),l=r(10997),s=r(44818),c=r(2112),f=r(38625),d=r(30258),p=r(35010),h=r(34842),v=r(9318),g=r(64336),m=[],y=a(m.sort),b=a(m.push),w=c((function(){m.sort(void 0)})),x=c((function(){m.sort(null)})),S=d("sort"),E=!c((function(){if(v)return v<70;if(!(p&&p>3)){if(h)return!0;if(g)return g<603;var e,t,r,n,a="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:r=3;break;case 68:case 71:r=4;break;default:r=2}for(n=0;n<47;n++)m.push({k:t+n,v:r})}for(m.sort((function(e,t){return t.v-e.v})),n=0;n<m.length;n++)t=m[n].k.charAt(0),a.charAt(a.length-1)!==t&&(a+=t);return"DGBEFHACIJK"!==a}}));n({target:"Array",proto:!0,forced:w||!x||!S||!E},{sort:function(e){void 0!==e&&o(e);var t=i(this);if(E)return void 0===e?y(t):y(t,e);var r,n,a=[],c=u(t);for(n=0;n<c;n++)n in t&&b(a,t[n]);for(f(a,function(e){return function(t,r){return void 0===r?-1:void 0===t?1:void 0!==e?+e(t,r)||0:s(t)>s(r)?1:-1}}(e)),r=u(a),n=0;n<r;)t[n]=a[n++];for(;n<c;)l(t,n++);return t}})},4763:(e,t,r)=>{r(81601)("Array")},25270:(e,t,r)=>{"use strict";var n=r(47641),a=r(56416),o=r(47841),i=r(11859),u=r(36095),l=r(18419),s=r(99325),c=r(33496),f=r(48923),d=r(10997),p=r(7397)("splice"),h=Math.max,v=Math.min;n({target:"Array",proto:!0,forced:!p},{splice:function(e,t){var r,n,p,g,m,y,b=a(this),w=u(b),x=o(e,w),S=arguments.length;for(0===S?r=n=0:1===S?(r=0,n=w-x):(r=S-2,n=v(h(i(t),0),w-x)),s(w+r-n),p=c(b,n),g=0;g<n;g++)(m=x+g)in b&&f(p,g,b[m]);if(p.length=n,r<n){for(g=x;g<w-n;g++)y=g+r,(m=g+n)in b?b[y]=b[m]:d(b,y);for(g=w;g>w-n+r;g--)d(b,g-1)}else if(r>n)for(g=w-n;g>x;g--)y=g+r-1,(m=g+n-1)in b?b[y]=b[m]:d(b,y);for(g=0;g<r;g++)b[g+x]=arguments[g+2];return l(b,w-n+r),p}})},14225:(e,t,r)=>{r(82834)("flatMap")},73599:(e,t,r)=>{r(82834)("flat")},47754:(e,t,r)=>{"use strict";var n=r(47641),a=r(56416),o=r(36095),i=r(18419),u=r(10997),l=r(99325);n({target:"Array",proto:!0,arity:1,forced:1!==[].unshift(0)||!function(){try{Object.defineProperty([],"length",{writable:!1}).unshift()}catch(e){return e instanceof TypeError}}()},{unshift:function(e){var t=a(this),r=o(t),n=arguments.length;if(n){l(r+n);for(var s=r;s--;){var c=s+n;s in t?t[c]=t[s]:u(t,c)}for(var f=0;f<n;f++)t[f]=arguments[f]}return i(t,r+n)}})},14472:(e,t,r)=>{var n=r(47641),a=r(44659);n({global:!0,constructor:!0,forced:!r(96563)},{DataView:a.DataView})},19253:(e,t,r)=>{r(14472)},24399:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(2112)((function(){return 120!==new Date(16e11).getYear()})),i=a(Date.prototype.getFullYear);n({target:"Date",proto:!0,forced:o},{getYear:function(){return i(this)-1900}})},71167:(e,t,r)=>{var n=r(47641),a=r(81540),o=Date,i=a(o.prototype.getTime);n({target:"Date",stat:!0},{now:function(){return i(new o)}})},67636:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(11859),i=Date.prototype,u=a(i.getTime),l=a(i.setFullYear);n({target:"Date",proto:!0},{setYear:function(e){u(this);var t=o(e);return l(this,0<=t&&t<=99?t+1900:t)}})},21751:(e,t,r)=>{r(47641)({target:"Date",proto:!0},{toGMTString:Date.prototype.toUTCString})},13078:(e,t,r)=>{var n=r(47641),a=r(33084);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==a},{toISOString:a})},68982:(e,t,r)=>{"use strict";var n=r(47641),a=r(2112),o=r(56416),i=r(80038);n({target:"Date",proto:!0,arity:1,forced:a((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(e){var t=o(this),r=i(t,"number");return"number"!=typeof r||isFinite(r)?t.toISOString():null}})},33455:(e,t,r)=>{var n=r(95320),a=r(74704),o=r(65598),i=r(72931)("toPrimitive"),u=Date.prototype;n(u,i)||a(u,i,o)},94273:(e,t,r)=>{var n=r(81540),a=r(74704),o=Date.prototype,i="Invalid Date",u="toString",l=n(o[u]),s=n(o.getTime);String(new Date(NaN))!=i&&a(o,u,(function(){var e=s(this);return e==e?l(this):i}))},53247:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(92976),i=r(16685),u="WebAssembly",l=a[u],s=7!==Error("e",{cause:7}).cause,c=function(e,t){var r={};r[e]=i(e,t,s),n({global:!0,constructor:!0,arity:1,forced:s},r)},f=function(e,t){if(l&&l[e]){var r={};r[e]=i(u+"."+e,t,s),n({target:u,stat:!0,constructor:!0,arity:1,forced:s},r)}};c("Error",(function(e){return function(t){return o(e,this,arguments)}})),c("EvalError",(function(e){return function(t){return o(e,this,arguments)}})),c("RangeError",(function(e){return function(t){return o(e,this,arguments)}})),c("ReferenceError",(function(e){return function(t){return o(e,this,arguments)}})),c("SyntaxError",(function(e){return function(t){return o(e,this,arguments)}})),c("TypeError",(function(e){return function(t){return o(e,this,arguments)}})),c("URIError",(function(e){return function(t){return o(e,this,arguments)}})),f("CompileError",(function(e){return function(t){return o(e,this,arguments)}})),f("LinkError",(function(e){return function(t){return o(e,this,arguments)}})),f("RuntimeError",(function(e){return function(t){return o(e,this,arguments)}}))},62319:(e,t,r)=>{var n=r(74704),a=r(55716),o=Error.prototype;o.toString!==a&&n(o,"toString",a)},15916:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(44818),i=a("".charAt),u=a("".charCodeAt),l=a(/./.exec),s=a(1..toString),c=a("".toUpperCase),f=/[\w*+\-./@]/,d=function(e,t){for(var r=s(e,16);r.length<t;)r="0"+r;return r};n({global:!0},{escape:function(e){for(var t,r,n=o(e),a="",s=n.length,p=0;p<s;)t=i(n,p++),l(f,t)?a+=t:a+=(r=u(t,0))<256?"%"+d(r,2):"%u"+c(d(r,4));return a}})},16508:(e,t,r)=>{var n=r(47641),a=r(1966);n({target:"Function",proto:!0,forced:Function.bind!==a},{bind:a})},96406:(e,t,r)=>{"use strict";var n=r(34354),a=r(21651),o=r(70378),i=r(19299),u=r(72931),l=r(99465),s=u("hasInstance"),c=Function.prototype;s in c||o.f(c,s,{value:l((function(e){if(!n(this)||!a(e))return!1;var t=this.prototype;if(!a(t))return e instanceof this;for(;e=i(e);)if(t===e)return!0;return!1}),s)})},28323:(e,t,r)=>{var n=r(81738),a=r(50034).EXISTS,o=r(81540),i=r(70378).f,u=Function.prototype,l=o(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,c=o(s.exec);n&&!a&&i(u,"name",{configurable:!0,get:function(){try{return c(s,l(this))[1]}catch(e){return""}}})},34055:(e,t,r)=>{var n=r(47641),a=r(2569);n({global:!0,forced:a.globalThis!==a},{globalThis:a})},87751:(e,t,r)=>{var n=r(47641),a=r(12430),o=r(92976),i=r(67425),u=r(81540),l=r(2112),s=r(85506),c=r(34354),f=r(21651),d=r(98937),p=r(28142),h=r(46514),v=a("JSON","stringify"),g=u(/./.exec),m=u("".charAt),y=u("".charCodeAt),b=u("".replace),w=u(1..toString),x=/[\uD800-\uDFFF]/g,S=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,k=!h||l((function(){var e=a("Symbol")();return"[null]"!=v([e])||"{}"!=v({a:e})||"{}"!=v(Object(e))})),R=l((function(){return'"\\udf06\\ud834"'!==v("\udf06\ud834")||'"\\udead"'!==v("\udead")})),C=function(e,t){var r=p(arguments),n=t;if((f(t)||void 0!==e)&&!d(e))return s(t)||(t=function(e,t){if(c(n)&&(t=i(n,this,e,t)),!d(t))return t}),r[1]=t,o(v,null,r)},P=function(e,t,r){var n=m(r,t-1),a=m(r,t+1);return g(S,e)&&!g(E,a)||g(E,e)&&!g(S,n)?"\\u"+w(y(e,0),16):e};v&&n({target:"JSON",stat:!0,arity:3,forced:k||R},{stringify:function(e,t,r){var n=p(arguments),a=o(k?C:v,null,n);return R&&"string"==typeof a?b(a,x,P):a}})},67026:(e,t,r)=>{var n=r(2569);r(22087)(n.JSON,"JSON",!0)},65814:(e,t,r)=>{"use strict";r(19892)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(77028))},91330:(e,t,r)=>{r(65814)},76915:(e,t,r)=>{var n=r(47641),a=r(46407),o=Math.acosh,i=Math.log,u=Math.sqrt,l=Math.LN2;n({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(e){var t=+e;return t<1?NaN:t>94906265.62425156?i(t)+l:a(t-1+u(t-1)*u(t+1))}})},78865:(e,t,r)=>{var n=r(47641),a=Math.asinh,o=Math.log,i=Math.sqrt;n({target:"Math",stat:!0,forced:!(a&&1/a(0)>0)},{asinh:function e(t){var r=+t;return isFinite(r)&&0!=r?r<0?-e(-r):o(r+i(r*r+1)):r}})},12815:(e,t,r)=>{var n=r(47641),a=Math.atanh,o=Math.log;n({target:"Math",stat:!0,forced:!(a&&1/a(-0)<0)},{atanh:function(e){var t=+e;return 0==t?t:o((1+t)/(1-t))/2}})},23268:(e,t,r)=>{var n=r(47641),a=r(31031),o=Math.abs,i=Math.pow;n({target:"Math",stat:!0},{cbrt:function(e){var t=+e;return a(t)*i(o(t),1/3)}})},94592:(e,t,r)=>{var n=r(47641),a=Math.floor,o=Math.log,i=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(e){var t=e>>>0;return t?31-a(o(t+.5)*i):32}})},95879:(e,t,r)=>{var n=r(47641),a=r(66995),o=Math.cosh,i=Math.abs,u=Math.E;n({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(e){var t=a(i(e)-1)+1;return(t+1/(t*u*u))*(u/2)}})},66890:(e,t,r)=>{var n=r(47641),a=r(66995);n({target:"Math",stat:!0,forced:a!=Math.expm1},{expm1:a})},62791:(e,t,r)=>{r(47641)({target:"Math",stat:!0},{fround:r(30103)})},11862:(e,t,r)=>{var n=r(47641),a=Math.hypot,o=Math.abs,i=Math.sqrt;n({target:"Math",stat:!0,arity:2,forced:!!a&&a(1/0,NaN)!==1/0},{hypot:function(e,t){for(var r,n,a=0,u=0,l=arguments.length,s=0;u<l;)s<(r=o(arguments[u++]))?(a=a*(n=s/r)*n+1,s=r):a+=r>0?(n=r/s)*n:r;return s===1/0?1/0:s*i(a)}})},6917:(e,t,r)=>{var n=r(47641),a=r(2112),o=Math.imul;n({target:"Math",stat:!0,forced:a((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(e,t){var r=65535,n=+e,a=+t,o=r&n,i=r&a;return 0|o*i+((r&n>>>16)*i+o*(r&a>>>16)<<16>>>0)}})},38190:(e,t,r)=>{r(47641)({target:"Math",stat:!0},{log10:r(77157)})},67323:(e,t,r)=>{r(47641)({target:"Math",stat:!0},{log1p:r(46407)})},16818:(e,t,r)=>{var n=r(47641),a=Math.log,o=Math.LN2;n({target:"Math",stat:!0},{log2:function(e){return a(e)/o}})},21547:(e,t,r)=>{r(47641)({target:"Math",stat:!0},{sign:r(31031)})},43073:(e,t,r)=>{var n=r(47641),a=r(2112),o=r(66995),i=Math.abs,u=Math.exp,l=Math.E;n({target:"Math",stat:!0,forced:a((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(e){var t=+e;return i(t)<1?(o(t)-o(-t))/2:(u(t-1)-u(-t-1))*(l/2)}})},55393:(e,t,r)=>{var n=r(47641),a=r(66995),o=Math.exp;n({target:"Math",stat:!0},{tanh:function(e){var t=+e,r=a(t),n=a(-t);return r==1/0?1:n==1/0?-1:(r-n)/(o(t)+o(-t))}})},70482:(e,t,r)=>{r(22087)(Math,"Math",!0)},44574:(e,t,r)=>{r(47641)({target:"Math",stat:!0},{trunc:r(23846)})},53671:(e,t,r)=>{"use strict";var n=r(47641),a=r(51274),o=r(81738),i=r(2569),u=r(80040),l=r(81540),s=r(58787),c=r(95320),f=r(20679),d=r(77652),p=r(98937),h=r(80038),v=r(2112),g=r(89704).f,m=r(80892).f,y=r(70378).f,b=r(25841),w=r(70313).trim,x="Number",S=i[x],E=u[x],k=S.prototype,R=i.TypeError,C=l("".slice),P=l("".charCodeAt),A=function(e){var t=h(e,"number");return"bigint"==typeof t?t:O(t)},O=function(e){var t,r,n,a,o,i,u,l,s=h(e,"number");if(p(s))throw R("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=w(s),43===(t=P(s,0))||45===t){if(88===(r=P(s,2))||120===r)return NaN}else if(48===t){switch(P(s,1)){case 66:case 98:n=2,a=49;break;case 79:case 111:n=8,a=55;break;default:return+s}for(i=(o=C(s,2)).length,u=0;u<i;u++)if((l=P(o,u))<48||l>a)return NaN;return parseInt(o,n)}return+s},T=s(x,!S(" 0o1")||!S("0b1")||S("+0x1")),_=function(e){return d(k,e)&&v((function(){b(e)}))},M=function(e){var t=arguments.length<1?0:S(A(e));return _(this)?f(Object(t),this,M):t};M.prototype=k,T&&!a&&(k.constructor=M),n({global:!0,constructor:!0,wrap:!0,forced:T},{Number:M});var I=function(e,t){for(var r,n=o?g(t):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),a=0;n.length>a;a++)c(t,r=n[a])&&!c(e,r)&&y(e,r,m(t,r))};a&&E&&I(u[x],E),(T||a)&&I(u[x],S)},13698:(e,t,r)=>{r(47641)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{EPSILON:Math.pow(2,-52)})},62994:(e,t,r)=>{r(47641)({target:"Number",stat:!0},{isFinite:r(49872)})},28127:(e,t,r)=>{r(47641)({target:"Number",stat:!0},{isInteger:r(98635)})},32831:(e,t,r)=>{r(47641)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},61967:(e,t,r)=>{var n=r(47641),a=r(98635),o=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(e){return a(e)&&o(e)<=9007199254740991}})},95354:(e,t,r)=>{r(47641)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MAX_SAFE_INTEGER:9007199254740991})},63961:(e,t,r)=>{r(47641)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MIN_SAFE_INTEGER:-9007199254740991})},64061:(e,t,r)=>{var n=r(47641),a=r(28097);n({target:"Number",stat:!0,forced:Number.parseFloat!=a},{parseFloat:a})},60506:(e,t,r)=>{var n=r(47641),a=r(75191);n({target:"Number",stat:!0,forced:Number.parseInt!=a},{parseInt:a})},52925:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(11859),i=r(25841),u=r(94081),l=r(77157),s=r(2112),c=RangeError,f=String,d=isFinite,p=Math.abs,h=Math.floor,v=Math.pow,g=Math.round,m=a(1..toExponential),y=a(u),b=a("".slice),w="-6.9000e-11"===m(-69e-12,4)&&"1.25e+0"===m(1.255,2)&&"1.235e+4"===m(12345,3)&&"3e+1"===m(25,0);n({target:"Number",proto:!0,forced:!w||!(s((function(){m(1,1/0)}))&&s((function(){m(1,-1/0)})))||!!s((function(){m(1/0,1/0),m(NaN,1/0)}))},{toExponential:function(e){var t=i(this);if(void 0===e)return m(t);var r=o(e);if(!d(t))return String(t);if(r<0||r>20)throw c("Incorrect fraction digits");if(w)return m(t,r);var n="",a="",u=0,s="",x="";if(t<0&&(n="-",t=-t),0===t)u=0,a=y("0",r+1);else{var S=l(t);u=h(S);var E=0,k=v(10,u-r);2*t>=(2*(E=g(t/k))+1)*k&&(E+=1),E>=v(10,r+1)&&(E/=10,u+=1),a=f(E)}return 0!==r&&(a=b(a,0,1)+"."+b(a,1)),0===u?(s="+",x="0"):(s=u>0?"+":"-",x=f(p(u))),n+(a+"e")+s+x}})},74401:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(11859),i=r(25841),u=r(94081),l=r(2112),s=RangeError,c=String,f=Math.floor,d=a(u),p=a("".slice),h=a(1..toFixed),v=function(e,t,r){return 0===t?r:t%2==1?v(e,t-1,r*e):v(e*e,t/2,r)},g=function(e,t,r){for(var n=-1,a=r;++n<6;)a+=t*e[n],e[n]=a%1e7,a=f(a/1e7)},m=function(e,t){for(var r=6,n=0;--r>=0;)n+=e[r],e[r]=f(n/t),n=n%t*1e7},y=function(e){for(var t=6,r="";--t>=0;)if(""!==r||0===t||0!==e[t]){var n=c(e[t]);r=""===r?n:r+d("0",7-n.length)+n}return r};n({target:"Number",proto:!0,forced:l((function(){return"0.000"!==h(8e-5,3)||"1"!==h(.9,0)||"1.25"!==h(1.255,2)||"1000000000000000128"!==h(0xde0b6b3a7640080,0)}))||!l((function(){h({})}))},{toFixed:function(e){var t,r,n,a,u=i(this),l=o(e),f=[0,0,0,0,0,0],h="",b="0";if(l<0||l>20)throw s("Incorrect fraction digits");if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return c(u);if(u<0&&(h="-",u=-u),u>1e-21)if(r=(t=function(e){for(var t=0,r=e;r>=4096;)t+=12,r/=4096;for(;r>=2;)t+=1,r/=2;return t}(u*v(2,69,1))-69)<0?u*v(2,-t,1):u/v(2,t,1),r*=4503599627370496,(t=52-t)>0){for(g(f,0,r),n=l;n>=7;)g(f,1e7,0),n-=7;for(g(f,v(10,n,1),0),n=t-1;n>=23;)m(f,1<<23),n-=23;m(f,1<<n),g(f,1,1),m(f,2),b=y(f)}else g(f,0,r),g(f,1<<-t,0),b=y(f)+d("0",l);return l>0?h+((a=b.length)<=l?"0."+d("0",l-a)+b:p(b,0,a-l)+"."+p(b,a-l)):h+b}})},85961:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(2112),i=r(25841),u=a(1..toPrecision);n({target:"Number",proto:!0,forced:o((function(){return"1"!==u(1,void 0)}))||!o((function(){u({})}))},{toPrecision:function(e){return void 0===e?u(i(this)):u(i(this),e)}})},79988:(e,t,r)=>{var n=r(47641),a=r(55069);n({target:"Object",stat:!0,arity:2,forced:Object.assign!==a},{assign:a})},56208:(e,t,r)=>{r(47641)({target:"Object",stat:!0,sham:!r(81738)},{create:r(99062)})},42251:(e,t,r)=>{"use strict";var n=r(47641),a=r(81738),o=r(62733),i=r(92220),u=r(56416),l=r(70378);a&&n({target:"Object",proto:!0,forced:o},{__defineGetter__:function(e,t){l.f(u(this),e,{get:i(t),enumerable:!0,configurable:!0})}})},95583:(e,t,r)=>{var n=r(47641),a=r(81738),o=r(63116).f;n({target:"Object",stat:!0,forced:Object.defineProperties!==o,sham:!a},{defineProperties:o})},44613:(e,t,r)=>{var n=r(47641),a=r(81738),o=r(70378).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==o,sham:!a},{defineProperty:o})},29554:(e,t,r)=>{"use strict";var n=r(47641),a=r(81738),o=r(62733),i=r(92220),u=r(56416),l=r(70378);a&&n({target:"Object",proto:!0,forced:o},{__defineSetter__:function(e,t){l.f(u(this),e,{set:i(t),enumerable:!0,configurable:!0})}})},5594:(e,t,r)=>{var n=r(47641),a=r(12960).entries;n({target:"Object",stat:!0},{entries:function(e){return a(e)}})},60520:(e,t,r)=>{var n=r(47641),a=r(28982),o=r(2112),i=r(21651),u=r(34314).onFreeze,l=Object.freeze;n({target:"Object",stat:!0,forced:o((function(){l(1)})),sham:!a},{freeze:function(e){return l&&i(e)?l(u(e)):e}})},78926:(e,t,r)=>{var n=r(47641),a=r(56651),o=r(48923);n({target:"Object",stat:!0},{fromEntries:function(e){var t={};return a(e,(function(e,r){o(t,e,r)}),{AS_ENTRIES:!0}),t}})},32783:(e,t,r)=>{var n=r(47641),a=r(2112),o=r(47830),i=r(80892).f,u=r(81738);n({target:"Object",stat:!0,forced:!u||a((function(){i(1)})),sham:!u},{getOwnPropertyDescriptor:function(e,t){return i(o(e),t)}})},36268:(e,t,r)=>{var n=r(47641),a=r(81738),o=r(56830),i=r(47830),u=r(80892),l=r(48923);n({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(e){for(var t,r,n=i(e),a=u.f,s=o(n),c={},f=0;s.length>f;)void 0!==(r=a(n,t=s[f++]))&&l(c,t,r);return c}})},93093:(e,t,r)=>{var n=r(47641),a=r(2112),o=r(18322).f;n({target:"Object",stat:!0,forced:a((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:o})},60173:(e,t,r)=>{var n=r(47641),a=r(46514),o=r(2112),i=r(10419),u=r(56416);n({target:"Object",stat:!0,forced:!a||o((function(){i.f(1)}))},{getOwnPropertySymbols:function(e){var t=i.f;return t?t(u(e)):[]}})},55867:(e,t,r)=>{var n=r(47641),a=r(2112),o=r(56416),i=r(19299),u=r(95031);n({target:"Object",stat:!0,forced:a((function(){i(1)})),sham:!u},{getPrototypeOf:function(e){return i(o(e))}})},33934:(e,t,r)=>{r(47641)({target:"Object",stat:!0},{hasOwn:r(95320)})},1811:(e,t,r)=>{var n=r(47641),a=r(20541);n({target:"Object",stat:!0,forced:Object.isExtensible!==a},{isExtensible:a})},31749:(e,t,r)=>{var n=r(47641),a=r(2112),o=r(21651),i=r(98250),u=r(59309),l=Object.isFrozen;n({target:"Object",stat:!0,forced:u||a((function(){l(1)}))},{isFrozen:function(e){return!o(e)||!(!u||"ArrayBuffer"!=i(e))||!!l&&l(e)}})},56937:(e,t,r)=>{var n=r(47641),a=r(2112),o=r(21651),i=r(98250),u=r(59309),l=Object.isSealed;n({target:"Object",stat:!0,forced:u||a((function(){l(1)}))},{isSealed:function(e){return!o(e)||!(!u||"ArrayBuffer"!=i(e))||!!l&&l(e)}})},93701:(e,t,r)=>{r(47641)({target:"Object",stat:!0},{is:r(24726)})},57682:(e,t,r)=>{var n=r(47641),a=r(56416),o=r(2551);n({target:"Object",stat:!0,forced:r(2112)((function(){o(1)}))},{keys:function(e){return o(a(e))}})},58366:(e,t,r)=>{"use strict";var n=r(47641),a=r(81738),o=r(62733),i=r(56416),u=r(67411),l=r(19299),s=r(80892).f;a&&n({target:"Object",proto:!0,forced:o},{__lookupGetter__:function(e){var t,r=i(this),n=u(e);do{if(t=s(r,n))return t.get}while(r=l(r))}})},56542:(e,t,r)=>{"use strict";var n=r(47641),a=r(81738),o=r(62733),i=r(56416),u=r(67411),l=r(19299),s=r(80892).f;a&&n({target:"Object",proto:!0,forced:o},{__lookupSetter__:function(e){var t,r=i(this),n=u(e);do{if(t=s(r,n))return t.set}while(r=l(r))}})},39177:(e,t,r)=>{var n=r(47641),a=r(21651),o=r(34314).onFreeze,i=r(28982),u=r(2112),l=Object.preventExtensions;n({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{preventExtensions:function(e){return l&&a(e)?l(o(e)):e}})},52772:(e,t,r)=>{"use strict";var n=r(81738),a=r(6230),o=r(21651),i=r(56416),u=r(81196),l=Object.getPrototypeOf,s=Object.setPrototypeOf,c=Object.prototype,f="__proto__";if(n&&l&&s&&!(f in c))try{a(c,f,{configurable:!0,get:function(){return l(i(this))},set:function(e){var t=u(this);(o(e)||null===e)&&o(t)&&s(t,e)}})}catch(e){}},68083:(e,t,r)=>{var n=r(47641),a=r(21651),o=r(34314).onFreeze,i=r(28982),u=r(2112),l=Object.seal;n({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{seal:function(e){return l&&a(e)?l(o(e)):e}})},93462:(e,t,r)=>{r(47641)({target:"Object",stat:!0},{setPrototypeOf:r(64001)})},6925:(e,t,r)=>{var n=r(12102),a=r(74704),o=r(65726);n||a(Object.prototype,"toString",o,{unsafe:!0})},82538:(e,t,r)=>{var n=r(47641),a=r(12960).values;n({target:"Object",stat:!0},{values:function(e){return a(e)}})},15689:(e,t,r)=>{var n=r(47641),a=r(28097);n({global:!0,forced:parseFloat!=a},{parseFloat:a})},12787:(e,t,r)=>{var n=r(47641),a=r(75191);n({global:!0,forced:parseInt!=a},{parseInt:a})},35650:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(92220),i=r(54856),u=r(53783),l=r(56651);n({target:"Promise",stat:!0,forced:r(54487)},{allSettled:function(e){var t=this,r=i.f(t),n=r.resolve,s=r.reject,c=u((function(){var r=o(t.resolve),i=[],u=0,s=1;l(e,(function(e){var o=u++,l=!1;s++,a(r,t,e).then((function(e){l||(l=!0,i[o]={status:"fulfilled",value:e},--s||n(i))}),(function(e){l||(l=!0,i[o]={status:"rejected",reason:e},--s||n(i))}))})),--s||n(i)}));return c.error&&s(c.value),r.promise}})},54730:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(92220),i=r(54856),u=r(53783),l=r(56651);n({target:"Promise",stat:!0,forced:r(54487)},{all:function(e){var t=this,r=i.f(t),n=r.resolve,s=r.reject,c=u((function(){var r=o(t.resolve),i=[],u=0,c=1;l(e,(function(e){var o=u++,l=!1;c++,a(r,t,e).then((function(e){l||(l=!0,i[o]=e,--c||n(i))}),s)})),--c||n(i)}));return c.error&&s(c.value),r.promise}})},11848:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(92220),i=r(12430),u=r(54856),l=r(53783),s=r(56651),c=r(54487),f="No one promise resolved";n({target:"Promise",stat:!0,forced:c},{any:function(e){var t=this,r=i("AggregateError"),n=u.f(t),c=n.resolve,d=n.reject,p=l((function(){var n=o(t.resolve),i=[],u=0,l=1,p=!1;s(e,(function(e){var o=u++,s=!1;l++,a(n,t,e).then((function(e){s||p||(p=!0,c(e))}),(function(e){s||p||(s=!0,i[o]=e,--l||d(new r(i,f)))}))})),--l||d(new r(i,f))}));return p.error&&d(p.value),n.promise}})},31935:(e,t,r)=>{"use strict";var n=r(47641),a=r(51274),o=r(77).CONSTRUCTOR,i=r(15746),u=r(12430),l=r(34354),s=r(74704),c=i&&i.prototype;if(n({target:"Promise",proto:!0,forced:o,real:!0},{catch:function(e){return this.then(void 0,e)}}),!a&&l(i)){var f=u("Promise").prototype.catch;c.catch!==f&&s(c,"catch",f,{unsafe:!0})}},5487:(e,t,r)=>{"use strict";var n,a,o,i=r(47641),u=r(51274),l=r(52285),s=r(2569),c=r(67425),f=r(74704),d=r(64001),p=r(22087),h=r(81601),v=r(92220),g=r(34354),m=r(21651),y=r(85806),b=r(79139),w=r(51306).set,x=r(8217),S=r(53725),E=r(53783),k=r(50854),R=r(73500),C=r(15746),P=r(77),A=r(54856),O="Promise",T=P.CONSTRUCTOR,_=P.REJECTION_EVENT,M=P.SUBCLASSING,I=R.getterFor(O),L=R.set,D=C&&C.prototype,N=C,j=D,U=s.TypeError,F=s.document,z=s.process,B=A.f,W=B,V=!!(F&&F.createEvent&&s.dispatchEvent),H="unhandledrejection",$=function(e){var t;return!(!m(e)||!g(t=e.then))&&t},q=function(e,t){var r,n,a,o=t.value,i=1==t.state,u=i?e.ok:e.fail,l=e.resolve,s=e.reject,f=e.domain;try{u?(i||(2===t.rejection&&X(t),t.rejection=1),!0===u?r=o:(f&&f.enter(),r=u(o),f&&(f.exit(),a=!0)),r===e.promise?s(U("Promise-chain cycle")):(n=$(r))?c(n,r,l,s):l(r)):s(o)}catch(e){f&&!a&&f.exit(),s(e)}},Q=function(e,t){e.notified||(e.notified=!0,x((function(){for(var r,n=e.reactions;r=n.get();)q(r,e);e.notified=!1,t&&!e.rejection&&Y(e)})))},G=function(e,t,r){var n,a;V?((n=F.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),s.dispatchEvent(n)):n={promise:t,reason:r},!_&&(a=s["on"+e])?a(n):e===H&&S("Unhandled promise rejection",r)},Y=function(e){c(w,s,(function(){var t,r=e.facade,n=e.value;if(K(e)&&(t=E((function(){l?z.emit("unhandledRejection",n,r):G(H,r,n)})),e.rejection=l||K(e)?2:1,t.error))throw t.value}))},K=function(e){return 1!==e.rejection&&!e.parent},X=function(e){c(w,s,(function(){var t=e.facade;l?z.emit("rejectionHandled",t):G("rejectionhandled",t,e.value)}))},J=function(e,t,r){return function(n){e(t,n,r)}},Z=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,Q(e,!0))},ee=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw U("Promise can't be resolved itself");var n=$(t);n?x((function(){var r={done:!1};try{c(n,t,J(ee,r,e),J(Z,r,e))}catch(t){Z(r,t,e)}})):(e.value=t,e.state=1,Q(e,!1))}catch(t){Z({done:!1},t,e)}}};if(T&&(j=(N=function(e){y(this,j),v(e),c(n,this);var t=I(this);try{e(J(ee,t),J(Z,t))}catch(e){Z(t,e)}}).prototype,(n=function(e){L(this,{type:O,done:!1,notified:!1,parent:!1,reactions:new k,rejection:!1,state:0,value:void 0})}).prototype=f(j,"then",(function(e,t){var r=I(this),n=B(b(this,N));return r.parent=!0,n.ok=!g(e)||e,n.fail=g(t)&&t,n.domain=l?z.domain:void 0,0==r.state?r.reactions.add(n):x((function(){q(n,r)})),n.promise})),a=function(){var e=new n,t=I(e);this.promise=e,this.resolve=J(ee,t),this.reject=J(Z,t)},A.f=B=function(e){return e===N||void 0===e?new a(e):W(e)},!u&&g(C)&&D!==Object.prototype)){o=D.then,M||f(D,"then",(function(e,t){var r=this;return new N((function(e,t){c(o,r,e,t)})).then(e,t)}),{unsafe:!0});try{delete D.constructor}catch(e){}d&&d(D,j)}i({global:!0,constructor:!0,wrap:!0,forced:T},{Promise:N}),p(N,O,!1,!0),h(O)},38709:(e,t,r)=>{"use strict";var n=r(47641),a=r(51274),o=r(15746),i=r(2112),u=r(12430),l=r(34354),s=r(79139),c=r(8718),f=r(74704),d=o&&o.prototype;if(n({target:"Promise",proto:!0,real:!0,forced:!!o&&i((function(){d.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=s(this,u("Promise")),r=l(e);return this.then(r?function(r){return c(t,e()).then((function(){return r}))}:e,r?function(r){return c(t,e()).then((function(){throw r}))}:e)}}),!a&&l(o)){var p=u("Promise").prototype.finally;d.finally!==p&&f(d,"finally",p,{unsafe:!0})}},79160:(e,t,r)=>{r(5487),r(54730),r(31935),r(36679),r(40284),r(17840)},36679:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(92220),i=r(54856),u=r(53783),l=r(56651);n({target:"Promise",stat:!0,forced:r(54487)},{race:function(e){var t=this,r=i.f(t),n=r.reject,s=u((function(){var i=o(t.resolve);l(e,(function(e){a(i,t,e).then(r.resolve,n)}))}));return s.error&&n(s.value),r.promise}})},40284:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(54856);n({target:"Promise",stat:!0,forced:r(77).CONSTRUCTOR},{reject:function(e){var t=o.f(this);return a(t.reject,void 0,e),t.promise}})},17840:(e,t,r)=>{"use strict";var n=r(47641),a=r(12430),o=r(51274),i=r(15746),u=r(77).CONSTRUCTOR,l=r(8718),s=a("Promise"),c=o&&!u;n({target:"Promise",stat:!0,forced:o||u},{resolve:function(e){return l(c&&this===s?i:this,e)}})},65077:(e,t,r)=>{var n=r(47641),a=r(92976),o=r(92220),i=r(1421);n({target:"Reflect",stat:!0,forced:!r(2112)((function(){Reflect.apply((function(){}))}))},{apply:function(e,t,r){return a(o(e),t,i(r))}})},74038:(e,t,r)=>{var n=r(47641),a=r(12430),o=r(92976),i=r(1966),u=r(14579),l=r(1421),s=r(21651),c=r(99062),f=r(2112),d=a("Reflect","construct"),p=Object.prototype,h=[].push,v=f((function(){function e(){}return!(d((function(){}),[],e)instanceof e)})),g=!f((function(){d((function(){}))})),m=v||g;n({target:"Reflect",stat:!0,forced:m,sham:m},{construct:function(e,t){u(e),l(t);var r=arguments.length<3?e:u(arguments[2]);if(g&&!v)return d(e,t,r);if(e==r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var n=[null];return o(h,n,t),new(o(i,e,n))}var a=r.prototype,f=c(s(a)?a:p),m=o(e,f,t);return s(m)?m:f}})},60844:(e,t,r)=>{var n=r(47641),a=r(81738),o=r(1421),i=r(67411),u=r(70378);n({target:"Reflect",stat:!0,forced:r(2112)((function(){Reflect.defineProperty(u.f({},1,{value:1}),1,{value:2})})),sham:!a},{defineProperty:function(e,t,r){o(e);var n=i(t);o(r);try{return u.f(e,n,r),!0}catch(e){return!1}}})},16370:(e,t,r)=>{var n=r(47641),a=r(1421),o=r(80892).f;n({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var r=o(a(e),t);return!(r&&!r.configurable)&&delete e[t]}})},49012:(e,t,r)=>{var n=r(47641),a=r(81738),o=r(1421),i=r(80892);n({target:"Reflect",stat:!0,sham:!a},{getOwnPropertyDescriptor:function(e,t){return i.f(o(e),t)}})},12763:(e,t,r)=>{var n=r(47641),a=r(1421),o=r(19299);n({target:"Reflect",stat:!0,sham:!r(95031)},{getPrototypeOf:function(e){return o(a(e))}})},18529:(e,t,r)=>{var n=r(47641),a=r(67425),o=r(21651),i=r(1421),u=r(64917),l=r(80892),s=r(19299);n({target:"Reflect",stat:!0},{get:function e(t,r){var n,c,f=arguments.length<3?t:arguments[2];return i(t)===f?t[r]:(n=l.f(t,r))?u(n)?n.value:void 0===n.get?void 0:a(n.get,f):o(c=s(t))?e(c,r,f):void 0}})},85889:(e,t,r)=>{r(47641)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},59004:(e,t,r)=>{var n=r(47641),a=r(1421),o=r(20541);n({target:"Reflect",stat:!0},{isExtensible:function(e){return a(e),o(e)}})},51010:(e,t,r)=>{r(47641)({target:"Reflect",stat:!0},{ownKeys:r(56830)})},25399:(e,t,r)=>{var n=r(47641),a=r(12430),o=r(1421);n({target:"Reflect",stat:!0,sham:!r(28982)},{preventExtensions:function(e){o(e);try{var t=a("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},28759:(e,t,r)=>{var n=r(47641),a=r(1421),o=r(33467),i=r(64001);i&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){a(e),o(t);try{return i(e,t),!0}catch(e){return!1}}})},5218:(e,t,r)=>{var n=r(47641),a=r(67425),o=r(1421),i=r(21651),u=r(64917),l=r(2112),s=r(70378),c=r(80892),f=r(19299),d=r(93233);n({target:"Reflect",stat:!0,forced:l((function(){var e=function(){},t=s.f(new e,"a",{configurable:!0});return!1!==Reflect.set(e.prototype,"a",1,t)}))},{set:function e(t,r,n){var l,p,h,v=arguments.length<4?t:arguments[3],g=c.f(o(t),r);if(!g){if(i(p=f(t)))return e(p,r,n,v);g=d(0)}if(u(g)){if(!1===g.writable||!i(v))return!1;if(l=c.f(v,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=n,s.f(v,r,l)}else s.f(v,r,d(0,n))}else{if(void 0===(h=g.set))return!1;a(h,v,n)}return!0}})},61327:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(22087);n({global:!0},{Reflect:{}}),o(a.Reflect,"Reflect",!0)},58786:(e,t,r)=>{var n=r(81738),a=r(2569),o=r(81540),i=r(58787),u=r(20679),l=r(27632),s=r(89704).f,c=r(77652),f=r(16499),d=r(44818),p=r(6058),h=r(95661),v=r(55482),g=r(74704),m=r(2112),y=r(95320),b=r(73500).enforce,w=r(81601),x=r(72931),S=r(7134),E=r(81008),k=x("match"),R=a.RegExp,C=R.prototype,P=a.SyntaxError,A=o(C.exec),O=o("".charAt),T=o("".replace),_=o("".indexOf),M=o("".slice),I=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,L=/a/g,D=/a/g,N=new R(L)!==L,j=h.MISSED_STICKY,U=h.UNSUPPORTED_Y;if(i("RegExp",n&&(!N||j||S||E||m((function(){return D[k]=!1,R(L)!=L||R(D)==D||"/a/i"!=R(L,"i")}))))){for(var F=function(e,t){var r,n,a,o,i,s,h=c(C,this),v=f(e),g=void 0===t,m=[],w=e;if(!h&&v&&g&&e.constructor===F)return e;if((v||c(C,e))&&(e=e.source,g&&(t=p(w))),e=void 0===e?"":d(e),t=void 0===t?"":d(t),w=e,S&&"dotAll"in L&&(n=!!t&&_(t,"s")>-1)&&(t=T(t,/s/g,"")),r=t,j&&"sticky"in L&&(a=!!t&&_(t,"y")>-1)&&U&&(t=T(t,/y/g,"")),E&&(o=function(e){for(var t,r=e.length,n=0,a="",o=[],i={},u=!1,l=!1,s=0,c="";n<=r;n++){if("\\"===(t=O(e,n)))t+=O(e,++n);else if("]"===t)u=!1;else if(!u)switch(!0){case"["===t:u=!0;break;case"("===t:A(I,M(e,n+1))&&(n+=2,l=!0),a+=t,s++;continue;case">"===t&&l:if(""===c||y(i,c))throw new P("Invalid capture group name");i[c]=!0,o[o.length]=[c,s],l=!1,c="";continue}l?c+=t:a+=t}return[a,o]}(e),e=o[0],m=o[1]),i=u(R(e,t),h?this:C,F),(n||a||m.length)&&(s=b(i),n&&(s.dotAll=!0,s.raw=F(function(e){for(var t,r=e.length,n=0,a="",o=!1;n<=r;n++)"\\"!==(t=O(e,n))?o||"."!==t?("["===t?o=!0:"]"===t&&(o=!1),a+=t):a+="[\\s\\S]":a+=t+O(e,++n);return a}(e),r)),a&&(s.sticky=!0),m.length&&(s.groups=m)),e!==w)try{l(i,"source",""===w?"(?:)":w)}catch(e){}return i},z=s(R),B=0;z.length>B;)v(F,R,z[B++]);C.constructor=F,F.prototype=C,g(a,"RegExp",F,{constructor:!0})}w("RegExp")},46370:(e,t,r)=>{var n=r(81738),a=r(7134),o=r(98250),i=r(6230),u=r(73500).get,l=RegExp.prototype,s=TypeError;n&&a&&i(l,"dotAll",{configurable:!0,get:function(){if(this!==l){if("RegExp"===o(this))return!!u(this).dotAll;throw s("Incompatible receiver, RegExp required")}}})},72966:(e,t,r)=>{"use strict";var n=r(47641),a=r(56226);n({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},85755:(e,t,r)=>{var n=r(2569),a=r(81738),o=r(6230),i=r(61174),u=r(2112),l=n.RegExp,s=l.prototype;a&&u((function(){var e=!0;try{l(".","d")}catch(t){e=!1}var t={},r="",n=e?"dgimsy":"gimsy",a=function(e,n){Object.defineProperty(t,e,{get:function(){return r+=n,!0}})},o={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var i in e&&(o.hasIndices="d"),o)a(i,o[i]);return Object.getOwnPropertyDescriptor(s,"flags").get.call(t)!==n||r!==n}))&&o(s,"flags",{configurable:!0,get:i})},62475:(e,t,r)=>{var n=r(81738),a=r(95661).MISSED_STICKY,o=r(98250),i=r(6230),u=r(73500).get,l=RegExp.prototype,s=TypeError;n&&a&&i(l,"sticky",{configurable:!0,get:function(){if(this!==l){if("RegExp"===o(this))return!!u(this).sticky;throw s("Incompatible receiver, RegExp required")}}})},29655:(e,t,r)=>{"use strict";r(72966);var n,a,o=r(47641),i=r(67425),u=r(34354),l=r(1421),s=r(44818),c=(n=!1,(a=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===a.test("abc")&&n),f=/./.test;o({target:"RegExp",proto:!0,forced:!c},{test:function(e){var t=l(this),r=s(e),n=t.exec;if(!u(n))return i(f,t,r);var a=i(n,t,r);return null!==a&&(l(a),!0)}})},41965:(e,t,r)=>{"use strict";var n=r(50034).PROPER,a=r(74704),o=r(1421),i=r(44818),u=r(2112),l=r(6058),s="toString",c=RegExp.prototype[s],f=u((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),d=n&&c.name!=s;(f||d)&&a(RegExp.prototype,s,(function(){var e=o(this);return"/"+i(e.source)+"/"+i(l(e))}),{unsafe:!0})},51233:(e,t,r)=>{"use strict";r(19892)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(77028))},64453:(e,t,r)=>{r(51233)},27907:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("anchor")},{anchor:function(e){return a(this,"a","name",e)}})},84880:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(81196),i=r(11859),u=r(44818),l=r(2112),s=a("".charAt);n({target:"String",proto:!0,forced:l((function(){return"\ud842"!=="𠮷".at(-2)}))},{at:function(e){var t=u(o(this)),r=t.length,n=i(e),a=n>=0?n:r+n;return a<0||a>=r?void 0:s(t,a)}})},86543:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("big")},{big:function(){return a(this,"big","","")}})},60451:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("blink")},{blink:function(){return a(this,"blink","","")}})},77089:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("bold")},{bold:function(){return a(this,"b","","")}})},79981:(e,t,r)=>{"use strict";var n=r(47641),a=r(99075).codeAt;n({target:"String",proto:!0},{codePointAt:function(e){return a(this,e)}})},88605:(e,t,r)=>{"use strict";var n,a=r(47641),o=r(51607),i=r(80892).f,u=r(89309),l=r(44818),s=r(51733),c=r(81196),f=r(57971),d=r(51274),p=o("".endsWith),h=o("".slice),v=Math.min,g=f("endsWith");a({target:"String",proto:!0,forced:!(!d&&!g&&(n=i(String.prototype,"endsWith"),n&&!n.writable)||g)},{endsWith:function(e){var t=l(c(this));s(e);var r=arguments.length>1?arguments[1]:void 0,n=t.length,a=void 0===r?n:v(u(r),n),o=l(e);return p?p(t,o,a):h(t,a-o.length,a)===o}})},48705:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("fixed")},{fixed:function(){return a(this,"tt","","")}})},25562:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("fontcolor")},{fontcolor:function(e){return a(this,"font","color",e)}})},13102:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("fontsize")},{fontsize:function(e){return a(this,"font","size",e)}})},67543:(e,t,r)=>{var n=r(47641),a=r(81540),o=r(47841),i=RangeError,u=String.fromCharCode,l=String.fromCodePoint,s=a([].join);n({target:"String",stat:!0,arity:1,forced:!!l&&1!=l.length},{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,a=0;n>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw i(t+" is not a valid code point");r[a]=t<65536?u(t):u(55296+((t-=65536)>>10),t%1024+56320)}return s(r,"")}})},52329:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(51733),i=r(81196),u=r(44818),l=r(57971),s=a("".indexOf);n({target:"String",proto:!0,forced:!l("includes")},{includes:function(e){return!!~s(u(i(this)),u(o(e)),arguments.length>1?arguments[1]:void 0)}})},96749:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("italics")},{italics:function(){return a(this,"i","","")}})},31021:(e,t,r)=>{"use strict";var n=r(99075).charAt,a=r(44818),o=r(73500),i=r(39371),u=r(77354),l="String Iterator",s=o.set,c=o.getterFor(l);i(String,"String",(function(e){s(this,{type:l,string:a(e),index:0})}),(function(){var e,t=c(this),r=t.string,a=t.index;return a>=r.length?u(void 0,!0):(e=n(r,a),t.index+=e.length,u(e,!1))}))},13645:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("link")},{link:function(e){return a(this,"a","href",e)}})},57488:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(51607),i=r(56308),u=r(77354),l=r(81196),s=r(89309),c=r(44818),f=r(1421),d=r(88260),p=r(98250),h=r(16499),v=r(6058),g=r(85324),m=r(74704),y=r(2112),b=r(72931),w=r(79139),x=r(70902),S=r(42216),E=r(73500),k=r(51274),R=b("matchAll"),C="RegExp String",P=C+" Iterator",A=E.set,O=E.getterFor(P),T=RegExp.prototype,_=TypeError,M=o("".indexOf),I=o("".matchAll),L=!!I&&!y((function(){I("a",/./)})),D=i((function(e,t,r,n){A(this,{type:P,regexp:e,string:t,global:r,unicode:n,done:!1})}),C,(function(){var e=O(this);if(e.done)return u(void 0,!0);var t=e.regexp,r=e.string,n=S(t,r);return null===n?(e.done=!0,u(void 0,!0)):e.global?(""===c(n[0])&&(t.lastIndex=x(r,s(t.lastIndex),e.unicode)),u(n,!1)):(e.done=!0,u(n,!1))})),N=function(e){var t,r,n,a=f(this),o=c(e),i=w(a,RegExp),u=c(v(a));return t=new i(i===RegExp?a.source:a,u),r=!!~M(u,"g"),n=!!~M(u,"u"),t.lastIndex=s(a.lastIndex),new D(t,o,r,n)};n({target:"String",proto:!0,forced:L},{matchAll:function(e){var t,r,n,o,i=l(this);if(d(e)){if(L)return I(i,e)}else{if(h(e)&&(t=c(l(v(e))),!~M(t,"g")))throw _("`.matchAll` does not allow non-global regexes");if(L)return I(i,e);if(void 0===(n=g(e,R))&&k&&"RegExp"==p(e)&&(n=N),n)return a(n,e,i)}return r=c(i),o=new RegExp(e,"g"),k?a(N,o,r):o[R](r)}}),k||R in T||m(T,R,N)},70891:(e,t,r)=>{"use strict";var n=r(67425),a=r(20802),o=r(1421),i=r(88260),u=r(89309),l=r(44818),s=r(81196),c=r(85324),f=r(70902),d=r(42216);a("match",(function(e,t,r){return[function(t){var r=s(this),a=i(t)?void 0:c(t,e);return a?n(a,t,r):new RegExp(t)[e](l(r))},function(e){var n=o(this),a=l(e),i=r(t,n,a);if(i.done)return i.value;if(!n.global)return d(n,a);var s=n.unicode;n.lastIndex=0;for(var c,p=[],h=0;null!==(c=d(n,a));){var v=l(c[0]);p[h]=v,""===v&&(n.lastIndex=f(a,u(n.lastIndex),s)),h++}return 0===h?null:p}]}))},2584:(e,t,r)=>{"use strict";var n=r(47641),a=r(97459).end;n({target:"String",proto:!0,forced:r(86339)},{padEnd:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},32168:(e,t,r)=>{"use strict";var n=r(47641),a=r(97459).start;n({target:"String",proto:!0,forced:r(86339)},{padStart:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},31722:(e,t,r)=>{var n=r(47641),a=r(81540),o=r(47830),i=r(56416),u=r(44818),l=r(36095),s=a([].push),c=a([].join);n({target:"String",stat:!0},{raw:function(e){var t=o(i(e).raw),r=l(t);if(!r)return"";for(var n=arguments.length,a=[],f=0;;){if(s(a,u(t[f++])),f===r)return c(a,"");f<n&&s(a,u(arguments[f]))}}})},22104:(e,t,r)=>{r(47641)({target:"String",proto:!0},{repeat:r(94081)})},16054:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425),o=r(81540),i=r(81196),u=r(34354),l=r(88260),s=r(16499),c=r(44818),f=r(85324),d=r(6058),p=r(35677),h=r(72931),v=r(51274),g=h("replace"),m=TypeError,y=o("".indexOf),b=o("".replace),w=o("".slice),x=Math.max,S=function(e,t,r){return r>e.length?-1:""===t?r:y(e,t,r)};n({target:"String",proto:!0},{replaceAll:function(e,t){var r,n,o,h,E,k,R,C,P,A=i(this),O=0,T=0,_="";if(!l(e)){if((r=s(e))&&(n=c(i(d(e))),!~y(n,"g")))throw m("`.replaceAll` does not allow non-global regexes");if(o=f(e,g))return a(o,e,A,t);if(v&&r)return b(c(A),e,t)}for(h=c(A),E=c(e),(k=u(t))||(t=c(t)),R=E.length,C=x(1,R),O=S(h,E,0);-1!==O;)P=k?c(t(E,O,h)):p(E,h,O,[],void 0,t),_+=w(h,T,O)+P,T=O+R,O=S(h,E,O+C);return T<h.length&&(_+=w(h,T)),_}})},57786:(e,t,r)=>{"use strict";var n=r(92976),a=r(67425),o=r(81540),i=r(20802),u=r(2112),l=r(1421),s=r(34354),c=r(88260),f=r(11859),d=r(89309),p=r(44818),h=r(81196),v=r(70902),g=r(85324),m=r(35677),y=r(42216),b=r(72931)("replace"),w=Math.max,x=Math.min,S=o([].concat),E=o([].push),k=o("".indexOf),R=o("".slice),C="$0"==="a".replace(/./,"$0"),P=!!/./[b]&&""===/./[b]("a","$0");i("replace",(function(e,t,r){var o=P?"$":"$0";return[function(e,r){var n=h(this),o=c(e)?void 0:g(e,b);return o?a(o,e,n,r):a(t,p(n),e,r)},function(e,a){var i=l(this),u=p(e);if("string"==typeof a&&-1===k(a,o)&&-1===k(a,"$<")){var c=r(t,i,u,a);if(c.done)return c.value}var h=s(a);h||(a=p(a));var g=i.global;if(g){var b=i.unicode;i.lastIndex=0}for(var C=[];;){var P=y(i,u);if(null===P)break;if(E(C,P),!g)break;""===p(P[0])&&(i.lastIndex=v(u,d(i.lastIndex),b))}for(var A,O="",T=0,_=0;_<C.length;_++){for(var M=p((P=C[_])[0]),I=w(x(f(P.index),u.length),0),L=[],D=1;D<P.length;D++)E(L,void 0===(A=P[D])?A:String(A));var N=P.groups;if(h){var j=S([M],L,I,u);void 0!==N&&E(j,N);var U=p(n(a,void 0,j))}else U=m(M,u,I,L,N,a);I>=T&&(O+=R(u,T,I)+U,T=I+M.length)}return O+R(u,T)}]}),!!u((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!C||P)},20782:(e,t,r)=>{"use strict";var n=r(67425),a=r(20802),o=r(1421),i=r(88260),u=r(81196),l=r(24726),s=r(44818),c=r(85324),f=r(42216);a("search",(function(e,t,r){return[function(t){var r=u(this),a=i(t)?void 0:c(t,e);return a?n(a,t,r):new RegExp(t)[e](s(r))},function(e){var n=o(this),a=s(e),i=r(t,n,a);if(i.done)return i.value;var u=n.lastIndex;l(u,0)||(n.lastIndex=0);var c=f(n,a);return l(n.lastIndex,u)||(n.lastIndex=u),null===c?-1:c.index}]}))},6550:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("small")},{small:function(){return a(this,"small","","")}})},3378:(e,t,r)=>{"use strict";var n=r(92976),a=r(67425),o=r(81540),i=r(20802),u=r(1421),l=r(88260),s=r(16499),c=r(81196),f=r(79139),d=r(70902),p=r(89309),h=r(44818),v=r(85324),g=r(12530),m=r(42216),y=r(56226),b=r(95661),w=r(2112),x=b.UNSUPPORTED_Y,S=4294967295,E=Math.min,k=[].push,R=o(/./.exec),C=o(k),P=o("".slice);i("split",(function(e,t,r){var o;return o="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,r){var o=h(c(this)),i=void 0===r?S:r>>>0;if(0===i)return[];if(void 0===e)return[o];if(!s(e))return a(t,o,e,i);for(var u,l,f,d=[],p=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),v=0,m=new RegExp(e.source,p+"g");(u=a(y,m,o))&&!((l=m.lastIndex)>v&&(C(d,P(o,v,u.index)),u.length>1&&u.index<o.length&&n(k,d,g(u,1)),f=u[0].length,v=l,d.length>=i));)m.lastIndex===u.index&&m.lastIndex++;return v===o.length?!f&&R(m,"")||C(d,""):C(d,P(o,v)),d.length>i?g(d,0,i):d}:"0".split(void 0,0).length?function(e,r){return void 0===e&&0===r?[]:a(t,this,e,r)}:t,[function(t,r){var n=c(this),i=l(t)?void 0:v(t,e);return i?a(i,t,n,r):a(o,h(n),t,r)},function(e,n){var a=u(this),i=h(e),l=r(o,a,i,n,o!==t);if(l.done)return l.value;var s=f(a,RegExp),c=a.unicode,v=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(x?"g":"y"),g=new s(x?"^(?:"+a.source+")":a,v),y=void 0===n?S:n>>>0;if(0===y)return[];if(0===i.length)return null===m(g,i)?[i]:[];for(var b=0,w=0,k=[];w<i.length;){g.lastIndex=x?0:w;var R,A=m(g,x?P(i,w):i);if(null===A||(R=E(p(g.lastIndex+(x?w:0)),i.length))===b)w=d(i,w,c);else{if(C(k,P(i,b,w)),k.length===y)return k;for(var O=1;O<=A.length-1;O++)if(C(k,A[O]),k.length===y)return k;w=b=R}}return C(k,P(i,b)),k}]}),!!w((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),x)},29714:(e,t,r)=>{"use strict";var n,a=r(47641),o=r(51607),i=r(80892).f,u=r(89309),l=r(44818),s=r(51733),c=r(81196),f=r(57971),d=r(51274),p=o("".startsWith),h=o("".slice),v=Math.min,g=f("startsWith");a({target:"String",proto:!0,forced:!(!d&&!g&&(n=i(String.prototype,"startsWith"),n&&!n.writable)||g)},{startsWith:function(e){var t=l(c(this));s(e);var r=u(v(arguments.length>1?arguments[1]:void 0,t.length)),n=l(e);return p?p(t,n,r):h(t,r,r+n.length)===n}})},36926:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("strike")},{strike:function(){return a(this,"strike","","")}})},18515:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("sub")},{sub:function(){return a(this,"sub","","")}})},32753:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(81196),i=r(11859),u=r(44818),l=a("".slice),s=Math.max,c=Math.min;n({target:"String",proto:!0,forced:!"".substr||"b"!=="ab".substr(-1)},{substr:function(e,t){var r,n,a=u(o(this)),f=a.length,d=i(e);return d===1/0&&(d=0),d<0&&(d=s(f+d,0)),(r=void 0===t?f:i(t))<=0||r===1/0||d>=(n=c(d+r,f))?"":l(a,d,n)}})},42360:(e,t,r)=>{"use strict";var n=r(47641),a=r(58625);n({target:"String",proto:!0,forced:r(62190)("sup")},{sup:function(){return a(this,"sup","","")}})},67950:(e,t,r)=>{r(14134);var n=r(47641),a=r(86243);n({target:"String",proto:!0,name:"trimEnd",forced:"".trimEnd!==a},{trimEnd:a})},20251:(e,t,r)=>{var n=r(47641),a=r(47455);n({target:"String",proto:!0,name:"trimStart",forced:"".trimLeft!==a},{trimLeft:a})},14134:(e,t,r)=>{var n=r(47641),a=r(86243);n({target:"String",proto:!0,name:"trimEnd",forced:"".trimRight!==a},{trimRight:a})},72376:(e,t,r)=>{r(20251);var n=r(47641),a=r(47455);n({target:"String",proto:!0,name:"trimStart",forced:"".trimStart!==a},{trimStart:a})},76565:(e,t,r)=>{"use strict";var n=r(47641),a=r(70313).trim;n({target:"String",proto:!0,forced:r(94728)("trim")},{trim:function(){return a(this)}})},83951:(e,t,r)=>{r(63778)("asyncIterator")},89457:(e,t,r)=>{"use strict";var n=r(47641),a=r(2569),o=r(67425),i=r(81540),u=r(51274),l=r(81738),s=r(46514),c=r(2112),f=r(95320),d=r(77652),p=r(1421),h=r(47830),v=r(67411),g=r(44818),m=r(93233),y=r(99062),b=r(2551),w=r(89704),x=r(18322),S=r(10419),E=r(80892),k=r(70378),R=r(63116),C=r(27079),P=r(74704),A=r(59944),O=r(59097),T=r(29012),_=r(9225),M=r(72931),I=r(29208),L=r(63778),D=r(16519),N=r(22087),j=r(73500),U=r(92387).forEach,F=O("hidden"),z="Symbol",B="prototype",W=j.set,V=j.getterFor(z),H=Object[B],$=a.Symbol,q=$&&$[B],Q=a.TypeError,G=a.QObject,Y=E.f,K=k.f,X=x.f,J=C.f,Z=i([].push),ee=A("symbols"),te=A("op-symbols"),re=A("wks"),ne=!G||!G[B]||!G[B].findChild,ae=l&&c((function(){return 7!=y(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=Y(H,t);n&&delete H[t],K(e,t,r),n&&e!==H&&K(H,t,n)}:K,oe=function(e,t){var r=ee[e]=y(q);return W(r,{type:z,tag:e,description:t}),l||(r.description=t),r},ie=function(e,t,r){e===H&&ie(te,t,r),p(e);var n=v(t);return p(r),f(ee,n)?(r.enumerable?(f(e,F)&&e[F][n]&&(e[F][n]=!1),r=y(r,{enumerable:m(0,!1)})):(f(e,F)||K(e,F,m(1,{})),e[F][n]=!0),ae(e,n,r)):K(e,n,r)},ue=function(e,t){p(e);var r=h(t),n=b(r).concat(fe(r));return U(n,(function(t){l&&!o(le,r,t)||ie(e,t,r[t])})),e},le=function(e){var t=v(e),r=o(J,this,t);return!(this===H&&f(ee,t)&&!f(te,t))&&(!(r||!f(this,t)||!f(ee,t)||f(this,F)&&this[F][t])||r)},se=function(e,t){var r=h(e),n=v(t);if(r!==H||!f(ee,n)||f(te,n)){var a=Y(r,n);return!a||!f(ee,n)||f(r,F)&&r[F][n]||(a.enumerable=!0),a}},ce=function(e){var t=X(h(e)),r=[];return U(t,(function(e){f(ee,e)||f(T,e)||Z(r,e)})),r},fe=function(e){var t=e===H,r=X(t?te:h(e)),n=[];return U(r,(function(e){!f(ee,e)||t&&!f(H,e)||Z(n,ee[e])})),n};s||(P(q=($=function(){if(d(q,this))throw Q("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?g(arguments[0]):void 0,t=_(e),r=function(e){this===H&&o(r,te,e),f(this,F)&&f(this[F],t)&&(this[F][t]=!1),ae(this,t,m(1,e))};return l&&ne&&ae(H,t,{configurable:!0,set:r}),oe(t,e)})[B],"toString",(function(){return V(this).tag})),P($,"withoutSetter",(function(e){return oe(_(e),e)})),C.f=le,k.f=ie,R.f=ue,E.f=se,w.f=x.f=ce,S.f=fe,I.f=function(e){return oe(M(e),e)},l&&(K(q,"description",{configurable:!0,get:function(){return V(this).description}}),u||P(H,"propertyIsEnumerable",le,{unsafe:!0}))),n({global:!0,constructor:!0,wrap:!0,forced:!s,sham:!s},{Symbol:$}),U(b(re),(function(e){L(e)})),n({target:z,stat:!0,forced:!s},{useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!s,sham:!l},{create:function(e,t){return void 0===t?y(e):ue(y(e),t)},defineProperty:ie,defineProperties:ue,getOwnPropertyDescriptor:se}),n({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ce}),D(),N($,z),T[F]=!0},34423:(e,t,r)=>{"use strict";var n=r(47641),a=r(81738),o=r(2569),i=r(81540),u=r(95320),l=r(34354),s=r(77652),c=r(44818),f=r(70378).f,d=r(68778),p=o.Symbol,h=p&&p.prototype;if(a&&l(p)&&(!("description"in h)||void 0!==p().description)){var v={},g=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:c(arguments[0]),t=s(h,this)?new p(e):void 0===e?p():p(e);return""===e&&(v[t]=!0),t};d(g,p),g.prototype=h,h.constructor=g;var m="Symbol(test)"==String(p("test")),y=i(h.valueOf),b=i(h.toString),w=/^Symbol\((.*)\)[^)]+$/,x=i("".replace),S=i("".slice);f(h,"description",{configurable:!0,get:function(){var e=y(this);if(u(v,e))return"";var t=b(e),r=m?S(t,7,-1):x(t,w,"$1");return""===r?void 0:r}}),n({global:!0,constructor:!0,forced:!0},{Symbol:g})}},3035:(e,t,r)=>{var n=r(47641),a=r(12430),o=r(95320),i=r(44818),u=r(59944),l=r(45393),s=u("string-to-symbol-registry"),c=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!l},{for:function(e){var t=i(e);if(o(s,t))return s[t];var r=a("Symbol")(t);return s[t]=r,c[r]=t,r}})},29973:(e,t,r)=>{r(63778)("hasInstance")},43136:(e,t,r)=>{r(63778)("isConcatSpreadable")},64182:(e,t,r)=>{r(63778)("iterator")},93696:(e,t,r)=>{r(89457),r(3035),r(55013),r(87751),r(60173)},55013:(e,t,r)=>{var n=r(47641),a=r(95320),o=r(98937),i=r(23700),u=r(59944),l=r(45393),s=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!l},{keyFor:function(e){if(!o(e))throw TypeError(i(e)+" is not a symbol");if(a(s,e))return s[e]}})},7417:(e,t,r)=>{r(63778)("matchAll")},84416:(e,t,r)=>{r(63778)("match")},96555:(e,t,r)=>{r(63778)("replace")},45717:(e,t,r)=>{r(63778)("search")},14457:(e,t,r)=>{r(63778)("species")},21801:(e,t,r)=>{r(63778)("split")},26139:(e,t,r)=>{var n=r(63778),a=r(16519);n("toPrimitive"),a()},92251:(e,t,r)=>{var n=r(12430),a=r(63778),o=r(22087);a("toStringTag"),o(n("Symbol"),"Symbol")},76712:(e,t,r)=>{r(63778)("unscopables")},7471:(e,t,r)=>{"use strict";var n=r(20352),a=r(36095),o=r(11859),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("at",(function(e){var t=i(this),r=a(t),n=o(e),u=n>=0?n:r+n;return u<0||u>=r?void 0:t[u]}))},372:(e,t,r)=>{"use strict";var n=r(81540),a=r(20352),o=n(r(78806)),i=a.aTypedArray;(0,a.exportTypedArrayMethod)("copyWithin",(function(e,t){return o(i(this),e,t,arguments.length>2?arguments[2]:void 0)}))},71112:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).every,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},13364:(e,t,r)=>{"use strict";var n=r(20352),a=r(55037),o=r(32324),i=r(33114),u=r(67425),l=r(81540),s=r(2112),c=n.aTypedArray,f=n.exportTypedArrayMethod,d=l("".slice);f("fill",(function(e){var t=arguments.length;c(this);var r="Big"===d(i(this),0,3)?o(e):+e;return u(a,this,r,t>1?arguments[1]:void 0,t>2?arguments[2]:void 0)}),s((function(){var e=0;return new Int8Array(2).fill({valueOf:function(){return e++}}),1!==e})))},33056:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).filter,o=r(45605),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("filter",(function(e){var t=a(i(this),e,arguments.length>1?arguments[1]:void 0);return o(this,t)}))},11570:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).findIndex,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},90439:(e,t,r)=>{"use strict";var n=r(20352),a=r(47086).findLastIndex,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("findLastIndex",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},11072:(e,t,r)=>{"use strict";var n=r(20352),a=r(47086).findLast,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("findLast",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},75890:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).find,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},73742:(e,t,r)=>{r(36507)("Float32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},88675:(e,t,r)=>{r(36507)("Float64",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},72686:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).forEach,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(e){a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},48165:(e,t,r)=>{"use strict";var n=r(66675);(0,r(20352).exportTypedArrayStaticMethod)("from",r(99311),n)},21657:(e,t,r)=>{"use strict";var n=r(20352),a=r(54041).includes,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},2991:(e,t,r)=>{"use strict";var n=r(20352),a=r(54041).indexOf,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},51246:(e,t,r)=>{r(36507)("Int16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},64301:(e,t,r)=>{r(36507)("Int32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},68010:(e,t,r)=>{r(36507)("Int8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},64:(e,t,r)=>{"use strict";var n=r(2569),a=r(2112),o=r(81540),i=r(20352),u=r(85006),l=r(72931)("iterator"),s=n.Uint8Array,c=o(u.values),f=o(u.keys),d=o(u.entries),p=i.aTypedArray,h=i.exportTypedArrayMethod,v=s&&s.prototype,g=!a((function(){v[l].call([1])})),m=!!v&&v.values&&v[l]===v.values&&"values"===v.values.name,y=function(){return c(p(this))};h("entries",(function(){return d(p(this))}),g),h("keys",(function(){return f(p(this))}),g),h("values",y,g||!m,{name:"values"}),h(l,y,g||!m,{name:"values"})},25943:(e,t,r)=>{"use strict";var n=r(20352),a=r(81540),o=n.aTypedArray,i=n.exportTypedArrayMethod,u=a([].join);i("join",(function(e){return u(o(this),e)}))},56591:(e,t,r)=>{"use strict";var n=r(20352),a=r(92976),o=r(32271),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(e){var t=arguments.length;return a(o,i(this),t>1?[e,arguments[1]]:[e])}))},75204:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).map,o=r(89619),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("map",(function(e){return a(i(this),e,arguments.length>1?arguments[1]:void 0,(function(e,t){return new(o(e))(t)}))}))},65513:(e,t,r)=>{"use strict";var n=r(20352),a=r(66675),o=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var e=0,t=arguments.length,r=new(o(this))(t);t>e;)r[e]=arguments[e++];return r}),a)},61016:(e,t,r)=>{"use strict";var n=r(20352),a=r(67809).right,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(e){var t=arguments.length;return a(o(this),e,t,t>1?arguments[1]:void 0)}))},51543:(e,t,r)=>{"use strict";var n=r(20352),a=r(67809).left,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(e){var t=arguments.length;return a(o(this),e,t,t>1?arguments[1]:void 0)}))},83002:(e,t,r)=>{"use strict";var n=r(20352),a=n.aTypedArray,o=n.exportTypedArrayMethod,i=Math.floor;o("reverse",(function(){for(var e,t=this,r=a(t).length,n=i(r/2),o=0;o<n;)e=t[o],t[o++]=t[--r],t[r]=e;return t}))},29163:(e,t,r)=>{"use strict";var n=r(2569),a=r(67425),o=r(20352),i=r(36095),u=r(40493),l=r(56416),s=r(2112),c=n.RangeError,f=n.Int8Array,d=f&&f.prototype,p=d&&d.set,h=o.aTypedArray,v=o.exportTypedArrayMethod,g=!s((function(){var e=new Uint8ClampedArray(2);return a(p,e,{length:1,0:3},1),3!==e[1]})),m=g&&o.NATIVE_ARRAY_BUFFER_VIEWS&&s((function(){var e=new f(2);return e.set(1),e.set("2",1),0!==e[0]||2!==e[1]}));v("set",(function(e){h(this);var t=u(arguments.length>1?arguments[1]:void 0,1),r=l(e);if(g)return a(p,this,r,t);var n=this.length,o=i(r),s=0;if(o+t>n)throw c("Wrong length");for(;s<o;)this[t+s]=r[s++]}),!g||m)},83939:(e,t,r)=>{"use strict";var n=r(20352),a=r(89619),o=r(2112),i=r(28142),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("slice",(function(e,t){for(var r=i(u(this),e,t),n=a(this),o=0,l=r.length,s=new n(l);l>o;)s[o]=r[o++];return s}),o((function(){new Int8Array(1).slice()})))},81394:(e,t,r)=>{"use strict";var n=r(20352),a=r(92387).some,o=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(e){return a(o(this),e,arguments.length>1?arguments[1]:void 0)}))},8124:(e,t,r)=>{"use strict";var n=r(2569),a=r(51607),o=r(2112),i=r(92220),u=r(38625),l=r(20352),s=r(35010),c=r(34842),f=r(9318),d=r(64336),p=l.aTypedArray,h=l.exportTypedArrayMethod,v=n.Uint16Array,g=v&&a(v.prototype.sort),m=!(!g||o((function(){g(new v(2),null)}))&&o((function(){g(new v(2),{})}))),y=!!g&&!o((function(){if(f)return f<74;if(s)return s<67;if(c)return!0;if(d)return d<602;var e,t,r=new v(516),n=Array(516);for(e=0;e<516;e++)t=e%4,r[e]=515-e,n[e]=e-2*t+3;for(g(r,(function(e,t){return(e/4|0)-(t/4|0)})),e=0;e<516;e++)if(r[e]!==n[e])return!0}));h("sort",(function(e){return void 0!==e&&i(e),y?g(this,e):u(p(this),function(e){return function(t,r){return void 0!==e?+e(t,r)||0:r!=r?-1:t!=t?1:0===t&&0===r?1/t>0&&1/r<0?1:-1:t>r}}(e))}),!y||m)},16573:(e,t,r)=>{"use strict";var n=r(20352),a=r(89309),o=r(47841),i=r(89619),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(e,t){var r=u(this),n=r.length,l=o(e,n);return new(i(r))(r.buffer,r.byteOffset+l*r.BYTES_PER_ELEMENT,a((void 0===t?n:o(t,n))-l))}))},47704:(e,t,r)=>{"use strict";var n=r(2569),a=r(92976),o=r(20352),i=r(2112),u=r(28142),l=n.Int8Array,s=o.aTypedArray,c=o.exportTypedArrayMethod,f=[].toLocaleString,d=!!l&&i((function(){f.call(new l(1))}));c("toLocaleString",(function(){return a(f,d?u(s(this)):s(this),u(arguments))}),i((function(){return[1,2].toLocaleString()!=new l([1,2]).toLocaleString()}))||!i((function(){l.prototype.toLocaleString.call([1,2])})))},80986:(e,t,r)=>{"use strict";var n=r(20352).exportTypedArrayMethod,a=r(2112),o=r(2569),i=r(81540),u=o.Uint8Array,l=u&&u.prototype||{},s=[].toString,c=i([].join);a((function(){s.call({})}))&&(s=function(){return c(this)});var f=l.toString!=s;n("toString",s,f)},31786:(e,t,r)=>{r(36507)("Uint16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},1658:(e,t,r)=>{r(36507)("Uint32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},61456:(e,t,r)=>{r(36507)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},74492:(e,t,r)=>{r(36507)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}),!0)},39148:(e,t,r)=>{"use strict";var n=r(47641),a=r(81540),o=r(44818),i=String.fromCharCode,u=a("".charAt),l=a(/./.exec),s=a("".slice),c=/^[\da-f]{2}$/i,f=/^[\da-f]{4}$/i;n({global:!0},{unescape:function(e){for(var t,r,n=o(e),a="",d=n.length,p=0;p<d;){if("%"===(t=u(n,p++)))if("u"===u(n,p)){if(r=s(n,p+1,p+5),l(f,r)){a+=i(parseInt(r,16)),p+=5;continue}}else if(r=s(n,p,p+2),l(c,r)){a+=i(parseInt(r,16)),p+=2;continue}a+=t}return a}})},81415:(e,t,r)=>{"use strict";var n,a=r(28982),o=r(2569),i=r(81540),u=r(6804),l=r(34314),s=r(19892),c=r(22380),f=r(21651),d=r(73500).enforce,p=r(2112),h=r(63125),v=Object,g=Array.isArray,m=v.isExtensible,y=v.isFrozen,b=v.isSealed,w=v.freeze,x=v.seal,S={},E={},k=!o.ActiveXObject&&"ActiveXObject"in o,R=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},C=s("WeakMap",R,c),P=C.prototype,A=i(P.set);if(h)if(k){n=c.getConstructor(R,"WeakMap",!0),l.enable();var O=i(P.delete),T=i(P.has),_=i(P.get);u(P,{delete:function(e){if(f(e)&&!m(e)){var t=d(this);return t.frozen||(t.frozen=new n),O(this,e)||t.frozen.delete(e)}return O(this,e)},has:function(e){if(f(e)&&!m(e)){var t=d(this);return t.frozen||(t.frozen=new n),T(this,e)||t.frozen.has(e)}return T(this,e)},get:function(e){if(f(e)&&!m(e)){var t=d(this);return t.frozen||(t.frozen=new n),T(this,e)?_(this,e):t.frozen.get(e)}return _(this,e)},set:function(e,t){if(f(e)&&!m(e)){var r=d(this);r.frozen||(r.frozen=new n),T(this,e)?A(this,e,t):r.frozen.set(e,t)}else A(this,e,t);return this}})}else a&&p((function(){var e=w([]);return A(new C,e,1),!y(e)}))&&u(P,{set:function(e,t){var r;return g(e)&&(y(e)?r=S:b(e)&&(r=E)),A(this,e,t),r==S&&w(e),r==E&&x(e),this}})},80682:(e,t,r)=>{r(81415)},30912:(e,t,r)=>{"use strict";r(19892)("WeakSet",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(22380))},99859:(e,t,r)=>{r(30912)},99845:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(12430),i=r(81540),u=r(67425),l=r(2112),s=r(44818),c=r(95320),f=r(35249),d=r(44669).ctoi,p=/[^\d+/a-z]/i,h=/[\t\n\f\r ]+/g,v=/[=]+$/,g=o("atob"),m=String.fromCharCode,y=i("".charAt),b=i("".replace),w=i(p.exec),x=l((function(){return""!==g(" ")})),S=!l((function(){g("a")})),E=!x&&!S&&!l((function(){g()})),k=!x&&!S&&1!==g.length;n({global:!0,bind:!0,enumerable:!0,forced:x||S||E||k},{atob:function(e){if(f(arguments.length,1),E||k)return u(g,a,e);var t,r,n=b(s(e),h,""),i="",l=0,x=0;if(n.length%4==0&&(n=b(n,v,"")),n.length%4==1||w(p,n))throw new(o("DOMException"))("The string is not correctly encoded","InvalidCharacterError");for(;t=y(n,l++);)c(d,t)&&(r=x%4?64*r+d[t]:d[t],x++%4&&(i+=m(255&r>>(-2*x&6))));return i}})},21693:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(12430),i=r(81540),u=r(67425),l=r(2112),s=r(44818),c=r(35249),f=r(44669).itoc,d=o("btoa"),p=i("".charAt),h=i("".charCodeAt),v=!!d&&!l((function(){d()})),g=!!d&&l((function(){return"bnVsbA=="!==d(null)})),m=!!d&&1!==d.length;n({global:!0,bind:!0,enumerable:!0,forced:v||g||m},{btoa:function(e){if(c(arguments.length,1),v||g||m)return u(d,a,s(e));for(var t,r,n=s(e),i="",l=0,y=f;p(n,l)||(y="=",l%1);){if((r=h(n,l+=3/4))>255)throw new(o("DOMException"))("The string contains characters outside of the Latin1 range","InvalidCharacterError");i+=p(y,63&(t=t<<8|r)>>8-l%1*8)}return i}})},47336:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(51306).clear;n({global:!0,bind:!0,enumerable:!0,forced:a.clearImmediate!==o},{clearImmediate:o})},51634:(e,t,r)=>{var n=r(2569),a=r(7921),o=r(96583),i=r(26948),u=r(27632),l=function(e){if(e&&e.forEach!==i)try{u(e,"forEach",i)}catch(t){e.forEach=i}};for(var s in a)a[s]&&l(n[s]&&n[s].prototype);l(o)},8669:(e,t,r)=>{var n=r(2569),a=r(7921),o=r(96583),i=r(85006),u=r(27632),l=r(72931),s=l("iterator"),c=l("toStringTag"),f=i.values,d=function(e,t){if(e){if(e[s]!==f)try{u(e,s,f)}catch(t){e[s]=f}if(e[c]||u(e,c,t),a[t])for(var r in i)if(e[r]!==i[r])try{u(e,r,i[r])}catch(t){e[r]=i[r]}}};for(var p in a)d(n[p]&&n[p].prototype,p);d(o,"DOMTokenList")},80228:(e,t,r)=>{"use strict";var n=r(47641),a=r(9138),o=r(12430),i=r(2112),u=r(99062),l=r(93233),s=r(70378).f,c=r(74704),f=r(6230),d=r(95320),p=r(85806),h=r(1421),v=r(55716),g=r(88238),m=r(73799),y=r(90225),b=r(73500),w=r(81738),x=r(51274),S="DOMException",E="DATA_CLONE_ERR",k=o("Error"),R=o(S)||function(){try{(new(o("MessageChannel")||a("worker_threads").MessageChannel)).port1.postMessage(new WeakMap)}catch(e){if(e.name==E&&25==e.code)return e.constructor}}(),C=R&&R.prototype,P=k.prototype,A=b.set,O=b.getterFor(S),T="stack"in k(S),_=function(e){return d(m,e)&&m[e].m?m[e].c:0},M=function(){p(this,I);var e=arguments.length,t=g(e<1?void 0:arguments[0]),r=g(e<2?void 0:arguments[1],"Error"),n=_(r);if(A(this,{type:S,name:r,message:t,code:n}),w||(this.name=r,this.message=t,this.code=n),T){var a=k(t);a.name=S,s(this,"stack",l(1,y(a.stack,1)))}},I=M.prototype=u(P),L=function(e){return{enumerable:!0,configurable:!0,get:e}},D=function(e){return L((function(){return O(this)[e]}))};w&&(f(I,"code",D("code")),f(I,"message",D("message")),f(I,"name",D("name"))),s(I,"constructor",l(1,M));var N=i((function(){return!(new R instanceof k)})),j=N||i((function(){return P.toString!==v||"2: 1"!==String(new R(1,2))})),U=N||i((function(){return 25!==new R(1,"DataCloneError").code})),F=N||25!==R[E]||25!==C[E],z=x?j||U||F:N;n({global:!0,constructor:!0,forced:z},{DOMException:z?M:R});var B=o(S),W=B.prototype;for(var V in j&&(x||R===B)&&c(W,"toString",v),U&&w&&R===B&&f(W,"code",L((function(){return _(h(this).name)}))),m)if(d(m,V)){var H=m[V],$=H.s,q=l(6,H.c);d(B,$)||s(B,$,q),d(W,$)||s(W,$,q)}},13610:(e,t,r)=>{"use strict";var n=r(47641),a=r(2569),o=r(12430),i=r(93233),u=r(70378).f,l=r(95320),s=r(85806),c=r(20679),f=r(88238),d=r(73799),p=r(90225),h=r(81738),v=r(51274),g="DOMException",m=o("Error"),y=o(g),b=function(){s(this,w);var e=arguments.length,t=f(e<1?void 0:arguments[0]),r=f(e<2?void 0:arguments[1],"Error"),n=new y(t,r),a=m(t);return a.name=g,u(n,"stack",i(1,p(a.stack,1))),c(n,this,b),n},w=b.prototype=y.prototype,x="stack"in m(g),S="stack"in new y(1,2),E=y&&h&&Object.getOwnPropertyDescriptor(a,g),k=!(!E||E.writable&&E.configurable),R=x&&!k&&!S;n({global:!0,constructor:!0,forced:v||R},{DOMException:R?b:y});var C=o(g),P=C.prototype;if(P.constructor!==C)for(var A in v||u(P,"constructor",i(1,C)),d)if(l(d,A)){var O=d[A],T=O.s;l(C,T)||u(C,T,i(6,O.c))}},29302:(e,t,r)=>{var n=r(12430),a="DOMException";r(22087)(n(a),a)},49028:(e,t,r)=>{r(47336),r(26612)},39775:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(8217),i=r(92220),u=r(35249),l=r(52285),s=a.process;n({global:!0,enumerable:!0,dontCallGetSet:!0},{queueMicrotask:function(e){u(arguments.length,1),i(e);var t=l&&s.domain;o(t?t.bind(e):e)}})},13002:(e,t,r)=>{"use strict";var n=r(47641),a=r(2569),o=r(6230),i=r(81738),u=TypeError,l=Object.defineProperty,s=a.self!==a;try{if(i){var c=Object.getOwnPropertyDescriptor(a,"self");!s&&c&&c.get&&c.enumerable||o(a,"self",{get:function(){return a},set:function(e){if(this!==a)throw u("Illegal invocation");l(a,"self",{value:e,writable:!0,configurable:!0,enumerable:!0})},configurable:!0,enumerable:!0})}else n({global:!0,simple:!0,forced:s},{self:a})}catch(e){}},26612:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(51306).set,i=r(47038),u=a.setImmediate?i(o,!1):o;n({global:!0,bind:!0,enumerable:!0,forced:a.setImmediate!==u},{setImmediate:u})},2391:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(47038)(a.setInterval,!0);n({global:!0,bind:!0,forced:a.setInterval!==o},{setInterval:o})},80468:(e,t,r)=>{var n=r(47641),a=r(2569),o=r(47038)(a.setTimeout,!0);n({global:!0,bind:!0,forced:a.setTimeout!==o},{setTimeout:o})},52824:(e,t,r)=>{var n,a=r(51274),o=r(47641),i=r(2569),u=r(12430),l=r(81540),s=r(2112),c=r(9225),f=r(34354),d=r(37829),p=r(88260),h=r(21651),v=r(98937),g=r(56651),m=r(1421),y=r(33114),b=r(95320),w=r(48923),x=r(27632),S=r(36095),E=r(35249),k=r(6058),R=r(8799),C=r(97788),P=r(53137),A=r(9318),O=r(75879),T=r(67798),_=r(52285),M=i.Object,I=i.Array,L=i.Date,D=i.Error,N=i.EvalError,j=i.RangeError,U=i.ReferenceError,F=i.SyntaxError,z=i.TypeError,B=i.URIError,W=i.PerformanceMark,V=i.WebAssembly,H=V&&V.CompileError||D,$=V&&V.LinkError||D,q=V&&V.RuntimeError||D,Q=u("DOMException"),G=R.Map,Y=R.has,K=R.get,X=R.set,J=C.Set,Z=C.add,ee=u("Object","keys"),te=l([].push),re=l((!0).valueOf),ne=l(1..valueOf),ae=l("".valueOf),oe=l(L.prototype.getTime),ie=c("structuredClone"),ue="DataCloneError",le="Transferring",se=function(e){return!s((function(){var t=new i.Set([7]),r=e(t),n=e(M(7));return r==t||!r.has(7)||"object"!=typeof n||7!=n}))&&e},ce=function(e,t){return!s((function(){var r=new t,n=e({a:r,b:r});return!(n&&n.a===n.b&&n.a instanceof t&&n.a.stack===r.stack)}))},fe=i.structuredClone,de=a||!ce(fe,D)||!ce(fe,Q)||(n=fe,!!s((function(){var e=n(new i.AggregateError([1],ie,{cause:3}));return"AggregateError"!=e.name||1!=e.errors[0]||e.message!=ie||3!=e.cause}))),pe=!fe&&se((function(e){return new W(ie,{detail:e}).detail})),he=se(fe)||pe,ve=function(e){throw new Q("Uncloneable type: "+e,ue)},ge=function(e,t){throw new Q((t||"Cloning")+" of "+e+" cannot be properly polyfilled in this engine",ue)},me=function(e,t){if(v(e)&&ve("Symbol"),!h(e))return e;if(t){if(Y(t,e))return K(t,e)}else t=new G;var r,n,a,o,l,s,c,d,p,g,m=y(e),E=!1;switch(m){case"Array":a=I(S(e)),E=!0;break;case"Object":a={},E=!0;break;case"Map":a=new G,E=!0;break;case"Set":a=new J,E=!0;break;case"RegExp":a=new RegExp(e.source,k(e));break;case"Error":switch(n=e.name){case"AggregateError":a=u("AggregateError")([]);break;case"EvalError":a=N();break;case"RangeError":a=j();break;case"ReferenceError":a=U();break;case"SyntaxError":a=F();break;case"TypeError":a=z();break;case"URIError":a=B();break;case"CompileError":a=H();break;case"LinkError":a=$();break;case"RuntimeError":a=q();break;default:a=D()}E=!0;break;case"DOMException":a=new Q(e.message,e.name),E=!0;break;case"DataView":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":r=i[m],h(r)||ge(m),a=new r(me(e.buffer,t),e.byteOffset,"DataView"===m?e.byteLength:e.length);break;case"DOMQuad":try{a=new DOMQuad(me(e.p1,t),me(e.p2,t),me(e.p3,t),me(e.p4,t))}catch(t){he?a=he(e):ge(m)}break;case"FileList":if(o=function(){var e;try{e=new i.DataTransfer}catch(t){try{e=new i.ClipboardEvent("").clipboardData}catch(e){}}return e&&e.items&&e.files?e:null}()){for(l=0,s=S(e);l<s;l++)o.items.add(me(e[l],t));a=o.files}else he?a=he(e):ge(m);break;case"ImageData":try{a=new ImageData(me(e.data,t),e.width,e.height,{colorSpace:e.colorSpace})}catch(t){he?a=he(e):ge(m)}break;default:if(he)a=he(e);else switch(m){case"BigInt":a=M(e.valueOf());break;case"Boolean":a=M(re(e));break;case"Number":a=M(ne(e));break;case"String":a=M(ae(e));break;case"Date":a=new L(oe(e));break;case"ArrayBuffer":(r=i.DataView)||"function"==typeof e.slice||ge(m);try{if("function"==typeof e.slice)a=e.slice(0);else for(s=e.byteLength,a=new ArrayBuffer(s),p=new r(e),g=new r(a),l=0;l<s;l++)g.setUint8(l,p.getUint8(l))}catch(e){throw new Q("ArrayBuffer is detached",ue)}break;case"SharedArrayBuffer":a=e;break;case"Blob":try{a=e.slice(0,e.size,e.type)}catch(e){ge(m)}break;case"DOMPoint":case"DOMPointReadOnly":r=i[m];try{a=r.fromPoint?r.fromPoint(e):new r(e.x,e.y,e.z,e.w)}catch(e){ge(m)}break;case"DOMRect":case"DOMRectReadOnly":r=i[m];try{a=r.fromRect?r.fromRect(e):new r(e.x,e.y,e.width,e.height)}catch(e){ge(m)}break;case"DOMMatrix":case"DOMMatrixReadOnly":r=i[m];try{a=r.fromMatrix?r.fromMatrix(e):new r(e)}catch(e){ge(m)}break;case"AudioData":case"VideoFrame":f(e.clone)||ge(m);try{a=e.clone()}catch(e){ve(m)}break;case"File":try{a=new File([e],e.name,e)}catch(e){ge(m)}break;case"CropTarget":case"CryptoKey":case"FileSystemDirectoryHandle":case"FileSystemFileHandle":case"FileSystemHandle":case"GPUCompilationInfo":case"GPUCompilationMessage":case"ImageBitmap":case"RTCCertificate":case"WebAssembly.Module":ge(m);default:ve(m)}}if(X(t,e,a),E)switch(m){case"Array":case"Object":for(c=ee(e),l=0,s=S(c);l<s;l++)d=c[l],w(a,d,me(e[d],t));break;case"Map":e.forEach((function(e,r){X(a,me(r,t),me(e,t))}));break;case"Set":e.forEach((function(e){Z(a,me(e,t))}));break;case"Error":x(a,"message",me(e.message,t)),b(e,"cause")&&x(a,"cause",me(e.cause,t)),"AggregateError"==n&&(a.errors=me(e.errors,t));case"DOMException":P&&x(a,"stack",me(e.stack,t))}return a},ye=fe&&!s((function(){if(T&&A>92||_&&A>94||O&&A>97)return!1;var e=new ArrayBuffer(8),t=fe(e,{transfer:[e]});return 0!=e.byteLength||8!=t.byteLength})),be=function(e,t){if(!h(e))throw z("Transfer option cannot be converted to a sequence");var r=[];g(e,(function(e){te(r,m(e))}));var n,a,o,u,l,s,c=0,p=S(r);if(ye)for(u=fe(r,{transfer:r});c<p;)X(t,r[c],u[c++]);else for(;c<p;){if(n=r[c++],Y(t,n))throw new Q("Duplicate transferable",ue);switch(a=y(n)){case"ImageBitmap":o=i.OffscreenCanvas,d(o)||ge(a,le);try{(s=new o(n.width,n.height)).getContext("bitmaprenderer").transferFromImageBitmap(n),l=s.transferToImageBitmap()}catch(e){}break;case"AudioData":case"VideoFrame":f(n.clone)&&f(n.close)||ge(a,le);try{l=n.clone(),n.close()}catch(e){}break;case"ArrayBuffer":case"MediaSourceHandle":case"MessagePort":case"OffscreenCanvas":case"ReadableStream":case"TransformStream":case"WritableStream":ge(a,le)}if(void 0===l)throw new Q("This object cannot be transferred: "+a,ue);X(t,n,l)}};o({global:!0,enumerable:!0,sham:!ye,forced:de},{structuredClone:function(e){var t,r=E(arguments.length,1)>1&&!p(arguments[1])?m(arguments[1]):void 0,n=r?r.transfer:void 0;return void 0!==n&&(t=new G,be(n,t)),me(e,t)}})},84750:(e,t,r)=>{r(2391),r(80468)},95082:(e,t,r)=>{"use strict";r(85006);var n=r(47641),a=r(2569),o=r(67425),i=r(81540),u=r(81738),l=r(55888),s=r(74704),c=r(6804),f=r(22087),d=r(56308),p=r(73500),h=r(85806),v=r(34354),g=r(95320),m=r(11567),y=r(33114),b=r(1421),w=r(21651),x=r(44818),S=r(99062),E=r(93233),k=r(98061),R=r(43230),C=r(35249),P=r(72931),A=r(38625),O=P("iterator"),T="URLSearchParams",_=T+"Iterator",M=p.set,I=p.getterFor(T),L=p.getterFor(_),D=Object.getOwnPropertyDescriptor,N=function(e){if(!u)return a[e];var t=D(a,e);return t&&t.value},j=N("fetch"),U=N("Request"),F=N("Headers"),z=U&&U.prototype,B=F&&F.prototype,W=a.RegExp,V=a.TypeError,H=a.decodeURIComponent,$=a.encodeURIComponent,q=i("".charAt),Q=i([].join),G=i([].push),Y=i("".replace),K=i([].shift),X=i([].splice),J=i("".split),Z=i("".slice),ee=/\+/g,te=Array(4),re=function(e){return te[e-1]||(te[e-1]=W("((?:%[\\da-f]{2}){"+e+"})","gi"))},ne=function(e){try{return H(e)}catch(t){return e}},ae=function(e){var t=Y(e,ee," "),r=4;try{return H(t)}catch(e){for(;r;)t=Y(t,re(r--),ne);return t}},oe=/[!'()~]|%20/g,ie={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},ue=function(e){return ie[e]},le=function(e){return Y($(e),oe,ue)},se=d((function(e,t){M(this,{type:_,iterator:k(I(e).entries),kind:t})}),"Iterator",(function(){var e=L(this),t=e.kind,r=e.iterator.next(),n=r.value;return r.done||(r.value="keys"===t?n.key:"values"===t?n.value:[n.key,n.value]),r}),!0),ce=function(e){this.entries=[],this.url=null,void 0!==e&&(w(e)?this.parseObject(e):this.parseQuery("string"==typeof e?"?"===q(e,0)?Z(e,1):e:x(e)))};ce.prototype={type:T,bindURL:function(e){this.url=e,this.update()},parseObject:function(e){var t,r,n,a,i,u,l,s=R(e);if(s)for(r=(t=k(e,s)).next;!(n=o(r,t)).done;){if(i=(a=k(b(n.value))).next,(u=o(i,a)).done||(l=o(i,a)).done||!o(i,a).done)throw V("Expected sequence with length 2");G(this.entries,{key:x(u.value),value:x(l.value)})}else for(var c in e)g(e,c)&&G(this.entries,{key:c,value:x(e[c])})},parseQuery:function(e){if(e)for(var t,r,n=J(e,"&"),a=0;a<n.length;)(t=n[a++]).length&&(r=J(t,"="),G(this.entries,{key:ae(K(r)),value:ae(Q(r,"="))}))},serialize:function(){for(var e,t=this.entries,r=[],n=0;n<t.length;)e=t[n++],G(r,le(e.key)+"="+le(e.value));return Q(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var fe=function(){h(this,de);var e=arguments.length>0?arguments[0]:void 0;M(this,new ce(e))},de=fe.prototype;if(c(de,{append:function(e,t){C(arguments.length,2);var r=I(this);G(r.entries,{key:x(e),value:x(t)}),r.updateURL()},delete:function(e){C(arguments.length,1);for(var t=I(this),r=t.entries,n=x(e),a=0;a<r.length;)r[a].key===n?X(r,a,1):a++;t.updateURL()},get:function(e){C(arguments.length,1);for(var t=I(this).entries,r=x(e),n=0;n<t.length;n++)if(t[n].key===r)return t[n].value;return null},getAll:function(e){C(arguments.length,1);for(var t=I(this).entries,r=x(e),n=[],a=0;a<t.length;a++)t[a].key===r&&G(n,t[a].value);return n},has:function(e){C(arguments.length,1);for(var t=I(this).entries,r=x(e),n=0;n<t.length;)if(t[n++].key===r)return!0;return!1},set:function(e,t){C(arguments.length,1);for(var r,n=I(this),a=n.entries,o=!1,i=x(e),u=x(t),l=0;l<a.length;l++)(r=a[l]).key===i&&(o?X(a,l--,1):(o=!0,r.value=u));o||G(a,{key:i,value:u}),n.updateURL()},sort:function(){var e=I(this);A(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,r=I(this).entries,n=m(e,arguments.length>1?arguments[1]:void 0),a=0;a<r.length;)n((t=r[a++]).value,t.key,this)},keys:function(){return new se(this,"keys")},values:function(){return new se(this,"values")},entries:function(){return new se(this,"entries")}},{enumerable:!0}),s(de,O,de.entries,{name:"entries"}),s(de,"toString",(function(){return I(this).serialize()}),{enumerable:!0}),f(fe,T),n({global:!0,constructor:!0,forced:!l},{URLSearchParams:fe}),!l&&v(F)){var pe=i(B.has),he=i(B.set),ve=function(e){if(w(e)){var t,r=e.body;if(y(r)===T)return t=e.headers?new F(e.headers):new F,pe(t,"content-type")||he(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),S(e,{body:E(0,x(r)),headers:E(0,t)})}return e};if(v(j)&&n({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(e){return j(e,arguments.length>1?ve(arguments[1]):{})}}),v(U)){var ge=function(e){return h(this,z),new U(e,arguments.length>1?ve(arguments[1]):{})};z.constructor=ge,ge.prototype=z,n({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:ge})}}e.exports={URLSearchParams:fe,getState:I}},46879:(e,t,r)=>{r(95082)},39075:(e,t,r)=>{"use strict";r(31021);var n,a=r(47641),o=r(81738),i=r(55888),u=r(2569),l=r(11567),s=r(81540),c=r(74704),f=r(6230),d=r(85806),p=r(95320),h=r(55069),v=r(23419),g=r(12530),m=r(99075).codeAt,y=r(48737),b=r(44818),w=r(22087),x=r(35249),S=r(95082),E=r(73500),k=E.set,R=E.getterFor("URL"),C=S.URLSearchParams,P=S.getState,A=u.URL,O=u.TypeError,T=u.parseInt,_=Math.floor,M=Math.pow,I=s("".charAt),L=s(/./.exec),D=s([].join),N=s(1..toString),j=s([].pop),U=s([].push),F=s("".replace),z=s([].shift),B=s("".split),W=s("".slice),V=s("".toLowerCase),H=s([].unshift),$="Invalid scheme",q="Invalid host",Q="Invalid port",G=/[a-z]/i,Y=/[\d+-.a-z]/i,K=/\d/,X=/^0x/i,J=/^[0-7]+$/,Z=/^\d+$/,ee=/^[\da-f]+$/i,te=/[\0\t\n\r #%/:<>?@[\\\]^|]/,re=/[\0\t\n\r #/:<>?@[\\\]^|]/,ne=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,ae=/[\t\n\r]/g,oe=function(e){var t,r,n,a;if("number"==typeof e){for(t=[],r=0;r<4;r++)H(t,e%256),e=_(e/256);return D(t,".")}if("object"==typeof e){for(t="",n=function(e){for(var t=null,r=1,n=null,a=0,o=0;o<8;o++)0!==e[o]?(a>r&&(t=n,r=a),n=null,a=0):(null===n&&(n=o),++a);return a>r&&(t=n,r=a),t}(e),r=0;r<8;r++)a&&0===e[r]||(a&&(a=!1),n===r?(t+=r?":":"::",a=!0):(t+=N(e[r],16),r<7&&(t+=":")));return"["+t+"]"}return e},ie={},ue=h({},ie,{" ":1,'"':1,"<":1,">":1,"`":1}),le=h({},ue,{"#":1,"?":1,"{":1,"}":1}),se=h({},le,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),ce=function(e,t){var r=m(e,0);return r>32&&r<127&&!p(t,e)?e:encodeURIComponent(e)},fe={ftp:21,file:null,http:80,https:443,ws:80,wss:443},de=function(e,t){var r;return 2==e.length&&L(G,I(e,0))&&(":"==(r=I(e,1))||!t&&"|"==r)},pe=function(e){var t;return e.length>1&&de(W(e,0,2))&&(2==e.length||"/"===(t=I(e,2))||"\\"===t||"?"===t||"#"===t)},he=function(e){return"."===e||"%2e"===V(e)},ve={},ge={},me={},ye={},be={},we={},xe={},Se={},Ee={},ke={},Re={},Ce={},Pe={},Ae={},Oe={},Te={},_e={},Me={},Ie={},Le={},De={},Ne=function(e,t,r){var n,a,o,i=b(e);if(t){if(a=this.parse(i))throw O(a);this.searchParams=null}else{if(void 0!==r&&(n=new Ne(r,!0)),a=this.parse(i,null,n))throw O(a);(o=P(new C)).bindURL(this),this.searchParams=o}};Ne.prototype={type:"URL",parse:function(e,t,r){var a,o,i,u,l,s=this,c=t||ve,f=0,d="",h=!1,m=!1,y=!1;for(e=b(e),t||(s.scheme="",s.username="",s.password="",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,e=F(e,ne,"")),e=F(e,ae,""),a=v(e);f<=a.length;){switch(o=a[f],c){case ve:if(!o||!L(G,o)){if(t)return $;c=me;continue}d+=V(o),c=ge;break;case ge:if(o&&(L(Y,o)||"+"==o||"-"==o||"."==o))d+=V(o);else{if(":"!=o){if(t)return $;d="",c=me,f=0;continue}if(t&&(s.isSpecial()!=p(fe,d)||"file"==d&&(s.includesCredentials()||null!==s.port)||"file"==s.scheme&&!s.host))return;if(s.scheme=d,t)return void(s.isSpecial()&&fe[s.scheme]==s.port&&(s.port=null));d="","file"==s.scheme?c=Ae:s.isSpecial()&&r&&r.scheme==s.scheme?c=ye:s.isSpecial()?c=Se:"/"==a[f+1]?(c=be,f++):(s.cannotBeABaseURL=!0,U(s.path,""),c=Ie)}break;case me:if(!r||r.cannotBeABaseURL&&"#"!=o)return $;if(r.cannotBeABaseURL&&"#"==o){s.scheme=r.scheme,s.path=g(r.path),s.query=r.query,s.fragment="",s.cannotBeABaseURL=!0,c=De;break}c="file"==r.scheme?Ae:we;continue;case ye:if("/"!=o||"/"!=a[f+1]){c=we;continue}c=Ee,f++;break;case be:if("/"==o){c=ke;break}c=Me;continue;case we:if(s.scheme=r.scheme,o==n)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query;else if("/"==o||"\\"==o&&s.isSpecial())c=xe;else if("?"==o)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query="",c=Le;else{if("#"!=o){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.path.length--,c=Me;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query,s.fragment="",c=De}break;case xe:if(!s.isSpecial()||"/"!=o&&"\\"!=o){if("/"!=o){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,c=Me;continue}c=ke}else c=Ee;break;case Se:if(c=Ee,"/"!=o||"/"!=I(d,f+1))continue;f++;break;case Ee:if("/"!=o&&"\\"!=o){c=ke;continue}break;case ke:if("@"==o){h&&(d="%40"+d),h=!0,i=v(d);for(var w=0;w<i.length;w++){var x=i[w];if(":"!=x||y){var S=ce(x,se);y?s.password+=S:s.username+=S}else y=!0}d=""}else if(o==n||"/"==o||"?"==o||"#"==o||"\\"==o&&s.isSpecial()){if(h&&""==d)return"Invalid authority";f-=v(d).length+1,d="",c=Re}else d+=o;break;case Re:case Ce:if(t&&"file"==s.scheme){c=Te;continue}if(":"!=o||m){if(o==n||"/"==o||"?"==o||"#"==o||"\\"==o&&s.isSpecial()){if(s.isSpecial()&&""==d)return q;if(t&&""==d&&(s.includesCredentials()||null!==s.port))return;if(u=s.parseHost(d))return u;if(d="",c=_e,t)return;continue}"["==o?m=!0:"]"==o&&(m=!1),d+=o}else{if(""==d)return q;if(u=s.parseHost(d))return u;if(d="",c=Pe,t==Ce)return}break;case Pe:if(!L(K,o)){if(o==n||"/"==o||"?"==o||"#"==o||"\\"==o&&s.isSpecial()||t){if(""!=d){var E=T(d,10);if(E>65535)return Q;s.port=s.isSpecial()&&E===fe[s.scheme]?null:E,d=""}if(t)return;c=_e;continue}return Q}d+=o;break;case Ae:if(s.scheme="file","/"==o||"\\"==o)c=Oe;else{if(!r||"file"!=r.scheme){c=Me;continue}if(o==n)s.host=r.host,s.path=g(r.path),s.query=r.query;else if("?"==o)s.host=r.host,s.path=g(r.path),s.query="",c=Le;else{if("#"!=o){pe(D(g(a,f),""))||(s.host=r.host,s.path=g(r.path),s.shortenPath()),c=Me;continue}s.host=r.host,s.path=g(r.path),s.query=r.query,s.fragment="",c=De}}break;case Oe:if("/"==o||"\\"==o){c=Te;break}r&&"file"==r.scheme&&!pe(D(g(a,f),""))&&(de(r.path[0],!0)?U(s.path,r.path[0]):s.host=r.host),c=Me;continue;case Te:if(o==n||"/"==o||"\\"==o||"?"==o||"#"==o){if(!t&&de(d))c=Me;else if(""==d){if(s.host="",t)return;c=_e}else{if(u=s.parseHost(d))return u;if("localhost"==s.host&&(s.host=""),t)return;d="",c=_e}continue}d+=o;break;case _e:if(s.isSpecial()){if(c=Me,"/"!=o&&"\\"!=o)continue}else if(t||"?"!=o)if(t||"#"!=o){if(o!=n&&(c=Me,"/"!=o))continue}else s.fragment="",c=De;else s.query="",c=Le;break;case Me:if(o==n||"/"==o||"\\"==o&&s.isSpecial()||!t&&("?"==o||"#"==o)){if(".."===(l=V(l=d))||"%2e."===l||".%2e"===l||"%2e%2e"===l?(s.shortenPath(),"/"==o||"\\"==o&&s.isSpecial()||U(s.path,"")):he(d)?"/"==o||"\\"==o&&s.isSpecial()||U(s.path,""):("file"==s.scheme&&!s.path.length&&de(d)&&(s.host&&(s.host=""),d=I(d,0)+":"),U(s.path,d)),d="","file"==s.scheme&&(o==n||"?"==o||"#"==o))for(;s.path.length>1&&""===s.path[0];)z(s.path);"?"==o?(s.query="",c=Le):"#"==o&&(s.fragment="",c=De)}else d+=ce(o,le);break;case Ie:"?"==o?(s.query="",c=Le):"#"==o?(s.fragment="",c=De):o!=n&&(s.path[0]+=ce(o,ie));break;case Le:t||"#"!=o?o!=n&&("'"==o&&s.isSpecial()?s.query+="%27":s.query+="#"==o?"%23":ce(o,ie)):(s.fragment="",c=De);break;case De:o!=n&&(s.fragment+=ce(o,ue))}f++}},parseHost:function(e){var t,r,n;if("["==I(e,0)){if("]"!=I(e,e.length-1))return q;if(t=function(e){var t,r,n,a,o,i,u,l=[0,0,0,0,0,0,0,0],s=0,c=null,f=0,d=function(){return I(e,f)};if(":"==d()){if(":"!=I(e,1))return;f+=2,c=++s}for(;d();){if(8==s)return;if(":"!=d()){for(t=r=0;r<4&&L(ee,d());)t=16*t+T(d(),16),f++,r++;if("."==d()){if(0==r)return;if(f-=r,s>6)return;for(n=0;d();){if(a=null,n>0){if(!("."==d()&&n<4))return;f++}if(!L(K,d()))return;for(;L(K,d());){if(o=T(d(),10),null===a)a=o;else{if(0==a)return;a=10*a+o}if(a>255)return;f++}l[s]=256*l[s]+a,2!=++n&&4!=n||s++}if(4!=n)return;break}if(":"==d()){if(f++,!d())return}else if(d())return;l[s++]=t}else{if(null!==c)return;f++,c=++s}}if(null!==c)for(i=s-c,s=7;0!=s&&i>0;)u=l[s],l[s--]=l[c+i-1],l[c+--i]=u;else if(8!=s)return;return l}(W(e,1,-1)),!t)return q;this.host=t}else if(this.isSpecial()){if(e=y(e),L(te,e))return q;if(t=function(e){var t,r,n,a,o,i,u,l=B(e,".");if(l.length&&""==l[l.length-1]&&l.length--,(t=l.length)>4)return e;for(r=[],n=0;n<t;n++){if(""==(a=l[n]))return e;if(o=10,a.length>1&&"0"==I(a,0)&&(o=L(X,a)?16:8,a=W(a,8==o?1:2)),""===a)i=0;else{if(!L(10==o?Z:8==o?J:ee,a))return e;i=T(a,o)}U(r,i)}for(n=0;n<t;n++)if(i=r[n],n==t-1){if(i>=M(256,5-t))return null}else if(i>255)return null;for(u=j(r),n=0;n<r.length;n++)u+=r[n]*M(256,3-n);return u}(e),null===t)return q;this.host=t}else{if(L(re,e))return q;for(t="",r=v(e),n=0;n<r.length;n++)t+=ce(r[n],ie);this.host=t}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return p(fe,this.scheme)},shortenPath:function(){var e=this.path,t=e.length;!t||"file"==this.scheme&&1==t&&de(e[0],!0)||e.length--},serialize:function(){var e=this,t=e.scheme,r=e.username,n=e.password,a=e.host,o=e.port,i=e.path,u=e.query,l=e.fragment,s=t+":";return null!==a?(s+="//",e.includesCredentials()&&(s+=r+(n?":"+n:"")+"@"),s+=oe(a),null!==o&&(s+=":"+o)):"file"==t&&(s+="//"),s+=e.cannotBeABaseURL?i[0]:i.length?"/"+D(i,"/"):"",null!==u&&(s+="?"+u),null!==l&&(s+="#"+l),s},setHref:function(e){var t=this.parse(e);if(t)throw O(t);this.searchParams.update()},getOrigin:function(){var e=this.scheme,t=this.port;if("blob"==e)try{return new je(e.path[0]).origin}catch(e){return"null"}return"file"!=e&&this.isSpecial()?e+"://"+oe(this.host)+(null!==t?":"+t:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(e){this.parse(b(e)+":",ve)},getUsername:function(){return this.username},setUsername:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<t.length;r++)this.username+=ce(t[r],se)}},getPassword:function(){return this.password},setPassword:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<t.length;r++)this.password+=ce(t[r],se)}},getHost:function(){var e=this.host,t=this.port;return null===e?"":null===t?oe(e):oe(e)+":"+t},setHost:function(e){this.cannotBeABaseURL||this.parse(e,Re)},getHostname:function(){var e=this.host;return null===e?"":oe(e)},setHostname:function(e){this.cannotBeABaseURL||this.parse(e,Ce)},getPort:function(){var e=this.port;return null===e?"":b(e)},setPort:function(e){this.cannotHaveUsernamePasswordPort()||(""==(e=b(e))?this.port=null:this.parse(e,Pe))},getPathname:function(){var e=this.path;return this.cannotBeABaseURL?e[0]:e.length?"/"+D(e,"/"):""},setPathname:function(e){this.cannotBeABaseURL||(this.path=[],this.parse(e,_e))},getSearch:function(){var e=this.query;return e?"?"+e:""},setSearch:function(e){""==(e=b(e))?this.query=null:("?"==I(e,0)&&(e=W(e,1)),this.query="",this.parse(e,Le)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var e=this.fragment;return e?"#"+e:""},setHash:function(e){""!=(e=b(e))?("#"==I(e,0)&&(e=W(e,1)),this.fragment="",this.parse(e,De)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var je=function(e){var t=d(this,Ue),r=x(arguments.length,1)>1?arguments[1]:void 0,n=k(t,new Ne(e,!1,r));o||(t.href=n.serialize(),t.origin=n.getOrigin(),t.protocol=n.getProtocol(),t.username=n.getUsername(),t.password=n.getPassword(),t.host=n.getHost(),t.hostname=n.getHostname(),t.port=n.getPort(),t.pathname=n.getPathname(),t.search=n.getSearch(),t.searchParams=n.getSearchParams(),t.hash=n.getHash())},Ue=je.prototype,Fe=function(e,t){return{get:function(){return R(this)[e]()},set:t&&function(e){return R(this)[t](e)},configurable:!0,enumerable:!0}};if(o&&(f(Ue,"href",Fe("serialize","setHref")),f(Ue,"origin",Fe("getOrigin")),f(Ue,"protocol",Fe("getProtocol","setProtocol")),f(Ue,"username",Fe("getUsername","setUsername")),f(Ue,"password",Fe("getPassword","setPassword")),f(Ue,"host",Fe("getHost","setHost")),f(Ue,"hostname",Fe("getHostname","setHostname")),f(Ue,"port",Fe("getPort","setPort")),f(Ue,"pathname",Fe("getPathname","setPathname")),f(Ue,"search",Fe("getSearch","setSearch")),f(Ue,"searchParams",Fe("getSearchParams")),f(Ue,"hash",Fe("getHash","setHash"))),c(Ue,"toJSON",(function(){return R(this).serialize()}),{enumerable:!0}),c(Ue,"toString",(function(){return R(this).serialize()}),{enumerable:!0}),A){var ze=A.createObjectURL,Be=A.revokeObjectURL;ze&&c(je,"createObjectURL",l(ze,A)),Be&&c(je,"revokeObjectURL",l(Be,A))}w(je,"URL"),a({global:!0,constructor:!0,forced:!i,sham:!o},{URL:je})},20858:(e,t,r)=>{r(39075)},9261:(e,t,r)=>{"use strict";var n=r(47641),a=r(67425);n({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return a(URL.prototype.toString,this)}})},137:(e,t,r)=>{r(93696),r(34423),r(83951),r(29973),r(43136),r(64182),r(84416),r(7417),r(96555),r(45717),r(14457),r(21801),r(26139),r(92251),r(76712),r(53247),r(62319),r(25200),r(3509),r(92585),r(33460),r(14138),r(3734),r(79455),r(90957),r(45565),r(3101),r(97942),r(61505),r(81387),r(59046),r(26376),r(40809),r(30757),r(23251),r(22161),r(85006),r(10924),r(50538),r(45477),r(11268),r(9796),r(4945),r(32165),r(82996),r(3953),r(33878),r(79821),r(4763),r(25270),r(73599),r(14225),r(47754),r(31372),r(26132),r(18363),r(19253),r(24399),r(71167),r(67636),r(21751),r(13078),r(68982),r(33455),r(94273),r(15916),r(16508),r(96406),r(28323),r(34055),r(87751),r(67026),r(91330),r(76915),r(78865),r(12815),r(23268),r(94592),r(95879),r(66890),r(62791),r(11862),r(6917),r(38190),r(67323),r(16818),r(21547),r(43073),r(55393),r(70482),r(44574),r(53671),r(13698),r(62994),r(28127),r(32831),r(61967),r(95354),r(63961),r(64061),r(60506),r(52925),r(74401),r(85961),r(79988),r(56208),r(42251),r(95583),r(44613),r(29554),r(5594),r(60520),r(78926),r(32783),r(36268),r(93093),r(55867),r(33934),r(93701),r(1811),r(31749),r(56937),r(57682),r(58366),r(56542),r(39177),r(52772),r(68083),r(93462),r(6925),r(82538),r(15689),r(12787),r(79160),r(35650),r(11848),r(38709),r(65077),r(74038),r(60844),r(16370),r(18529),r(49012),r(12763),r(85889),r(59004),r(51010),r(25399),r(5218),r(28759),r(61327),r(58786),r(46370),r(72966),r(85755),r(62475),r(29655),r(41965),r(64453),r(84880),r(79981),r(88605),r(67543),r(52329),r(31021),r(70891),r(57488),r(2584),r(32168),r(31722),r(22104),r(57786),r(16054),r(20782),r(3378),r(29714),r(32753),r(76565),r(67950),r(72376),r(27907),r(86543),r(60451),r(77089),r(48705),r(25562),r(13102),r(96749),r(13645),r(6550),r(36926),r(18515),r(42360),r(73742),r(88675),r(68010),r(51246),r(64301),r(61456),r(74492),r(31786),r(1658),r(7471),r(372),r(71112),r(13364),r(33056),r(75890),r(11570),r(11072),r(90439),r(72686),r(48165),r(21657),r(2991),r(64),r(25943),r(56591),r(75204),r(65513),r(51543),r(61016),r(83002),r(29163),r(83939),r(81394),r(8124),r(16573),r(47704),r(80986),r(39148),r(80682),r(99859),r(99845),r(21693),r(51634),r(8669),r(80228),r(13610),r(29302),r(49028),r(39775),r(13002),r(52824),r(84750),r(20858),r(9261),r(46879),r(80040)},12599:(e,t,r)=>{"use strict";function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}var a;r.d(t,{RQ:()=>P,WK:()=>D,Zn:()=>E,aU:()=>a,cP:()=>f,fp:()=>h,iQ:()=>L,kG:()=>u,lX:()=>i,p7:()=>Q}),function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(a||(a={}));const o="popstate";function i(e){return void 0===e&&(e={}),function(e,t,r,i){void 0===i&&(i={});let{window:f=document.defaultView,v5Compat:d=!1}=i,p=f.history,h=a.Pop,v=null,g=m();function m(){return(p.state||{idx:null}).idx}function y(){h=a.Pop;let e=m(),t=null==e?null:e-g;g=e,v&&v({action:h,location:w.location,delta:t})}function b(e){let t="null"!==f.location.origin?f.location.origin:f.location.href,r="string"==typeof e?e:c(e);return u(t,"No window.location.(origin|href) available to create URL for href: "+r),new URL(r,t)}null==g&&(g=0,p.replaceState(n({},p.state,{idx:g}),""));let w={get action(){return h},get location(){return e(f,p)},listen(e){if(v)throw new Error("A history only accepts one active listener");return f.addEventListener(o,y),v=e,()=>{f.removeEventListener(o,y),v=null}},createHref:e=>t(f,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){h=a.Push;let n=s(w.location,e,t);r&&r(n,e),g=m()+1;let o=l(n,g),i=w.createHref(n);try{p.pushState(o,"",i)}catch(e){f.location.assign(i)}d&&v&&v({action:h,location:w.location,delta:1})},replace:function(e,t){h=a.Replace;let n=s(w.location,e,t);r&&r(n,e),g=m();let o=l(n,g),i=w.createHref(n);p.replaceState(o,"",i),d&&v&&v({action:h,location:w.location,delta:0})},go:e=>p.go(e)};return w}((function(e,t){let{pathname:r,search:n,hash:a}=e.location;return s("",{pathname:r,search:n,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:c(t)}),null,e)}function u(e,t){if(!1===e||null==e)throw new Error(t)}function l(e,t){return{usr:e.state,key:e.key,idx:t}}function s(e,t,r,a){return void 0===r&&(r=null),n({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:r,key:t&&t.key||a||Math.random().toString(36).substr(2,8)})}function c(e){let{pathname:t="/",search:r="",hash:n=""}=e;return r&&"?"!==r&&(t+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(t+="#"===n.charAt(0)?n:"#"+n),t}function f(e){let t={};if(e){let r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));let n=e.indexOf("?");n>=0&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}var d;function p(e,t,r){return void 0===t&&(t=[]),void 0===r&&(r=new Set),e.map(((e,a)=>{let o=[...t,a],i="string"==typeof e.id?e.id:o.join("-");return u(!0!==e.index||!e.children,"Cannot specify children on an index route"),u(!r.has(i),'Found a route id collision on id "'+i+"\".  Route id's must be globally unique within Data Router usages"),r.add(i),function(e){return!0===e.index}(e)?n({},e,{id:i}):n({},e,{id:i,children:e.children?p(e.children,o,r):void 0})}))}function h(e,t,r){void 0===r&&(r="/");let n=E(("string"==typeof t?f(t):t).pathname||"/",r);if(null==n)return null;let a=v(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,r)=>e===t[r]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=w(a[e],S(n));return o}function v(e,t,r,n){void 0===t&&(t=[]),void 0===r&&(r=[]),void 0===n&&(n="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(u(i.relativePath.startsWith(n),'Absolute route path "'+i.relativePath+'" nested under path "'+n+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(n.length));let l=P([n,i.relativePath]),s=r.concat(i);e.children&&e.children.length>0&&(u(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),v(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:b(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var r;if(""!==e.path&&null!=(r=e.path)&&r.includes("?"))for(let r of g(e.path))a(e,t,r);else a(e,t)})),t}function g(e){let t=e.split("/");if(0===t.length)return[];let[r,...n]=t,a=r.endsWith("?"),o=r.replace(/\?$/,"");if(0===n.length)return a?[o,""]:[o];let i=g(n.join("/")),u=[];return u.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&u.push(...i),u.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(d||(d={}));const m=/^:\w+$/,y=e=>"*"===e;function b(e,t){let r=e.split("/"),n=r.length;return r.some(y)&&(n+=-2),t&&(n+=2),r.filter((e=>!y(e))).reduce(((e,t)=>e+(m.test(t)?3:""===t?1:10)),n)}function w(e,t){let{routesMeta:r}=e,n={},a="/",o=[];for(let e=0;e<r.length;++e){let i=r[e],u=e===r.length-1,l="/"===a?t:t.slice(a.length)||"/",s=x({path:i.relativePath,caseSensitive:i.caseSensitive,end:u},l);if(!s)return null;Object.assign(n,s.params);let c=i.route;o.push({params:n,pathname:P([a,s.pathname]),pathnameBase:A(P([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=P([a,s.pathnameBase]))}return o}function x(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[r,n]=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!0),k("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let n=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(n.push(t),"/([^\\/]+)")));return e.endsWith("*")?(n.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),n]}(e.path,e.caseSensitive,e.end),a=t.match(r);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),u=a.slice(1);return{params:n.reduce(((e,t,r)=>{if("*"===t){let e=u[r]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(r){return k(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+r+")."),e}}(u[r]||"",t),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function S(e){try{return decodeURI(e)}catch(t){return k(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function E(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=t.endsWith("/")?t.length-1:t.length,n=e.charAt(r);return n&&"/"!==n?null:e.slice(r)||"/"}function k(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function R(e,t,r,n){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(n)+"].  Please separate it out to the `to."+r+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function C(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}const P=e=>e.join("/").replace(/\/\/+/g,"/"),A=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),O=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",T=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class _ extends Error{}class M{constructor(e,t){let r;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],u(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>r=t)),this.controller=new AbortController;let n=()=>r(new _("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",n),this.controller.signal.addEventListener("abort",n),this.data=Object.entries(e).reduce(((e,t)=>{let[r,n]=t;return Object.assign(e,{[r]:this.trackPromise(r,n)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let r=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(r,e,null,t)),(t=>this.onSettle(r,e,t)));return r.catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),r}onSettle(e,t,r,n){return this.controller.signal.aborted&&r instanceof _?(this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>r}),Promise.reject(r)):(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),r?(Object.defineProperty(e,"_error",{get:()=>r}),this.emit(!1,t),Promise.reject(r)):(Object.defineProperty(e,"_data",{get:()=>n}),this.emit(!1,t),n))}emit(e,t){this.subscribers.forEach((r=>r(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let r=()=>this.cancel();e.addEventListener("abort",r),t=await new Promise((t=>{this.subscribe((n=>{e.removeEventListener("abort",r),(n||this.done)&&t(n)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return u(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[r,n]=t;return Object.assign(e,{[r]:I(n)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function I(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}class L{constructor(e,t,r,n){void 0===n&&(n=!1),this.status=e,this.statusText=t||"",this.internal=n,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function D(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const N=["post","put","patch","delete"],j=new Set(N),U=["get",...N],F=new Set(U),z=new Set([301,302,303,307,308]),B=new Set([307,308]),W={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},V={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},H={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},$="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,q=!$;function Q(e){u(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t=p(e.routes),r=null,o=new Set,i=null,l=null,c=null,f=null!=e.hydrationData,v=h(t,e.history.location,e.basename),g=null;if(null==v){let r=oe(404,{pathname:e.history.location.pathname}),{matches:n,route:a}=ae(t);v=n,g={[a.id]:r}}let m,y,b=!v.some((e=>e.route.loader))||null!=e.hydrationData,w={historyAction:e.history.action,location:e.history.location,matches:v,initialized:b,navigation:W,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||g,fetchers:new Map,blockers:new Map},x=a.Pop,S=!1,E=!1,R=!1,C=[],P=[],A=new Map,O=0,T=-1,_=new Map,M=new Set,I=new Map,L=new Map,D=null,N=new Map,j=!1;function U(e){w=n({},w,e),o.forEach((e=>e(w)))}function F(t,r){var o,i;let u,l=null!=w.actionData&&null!=w.navigation.formMethod&&fe(w.navigation.formMethod)&&"loading"===w.navigation.state&&!0!==(null==(o=t.state)?void 0:o._isRedirect);u=r.actionData?Object.keys(r.actionData).length>0?r.actionData:null:l?w.actionData:null;let s=r.loaderData?re(w.loaderData,r.loaderData,r.matches||[],r.errors):w.loaderData;for(let[e]of N)we(e);let c=!0===S||null!=w.navigation.formMethod&&fe(w.navigation.formMethod)&&!0!==(null==(i=t.state)?void 0:i._isRedirect);U(n({},r,{actionData:u,loaderData:s,historyAction:x,location:t,initialized:!0,navigation:W,revalidation:"idle",restoreScrollPosition:ke(t,r.matches||w.matches),preventScrollReset:c,blockers:new Map(w.blockers)})),E||x===a.Pop||(x===a.Push?e.history.push(t,t.state):x===a.Replace&&e.history.replace(t,t.state)),x=a.Pop,S=!1,E=!1,R=!1,C=[],P=[]}async function z(r,o,s){y&&y.abort(),y=null,x=r,E=!0===(s&&s.startUninterruptedRevalidation),function(e,t){if(i&&l&&c){let r=t.map((e=>ve(e,w.loaderData))),n=l(e,r)||e.key;i[n]=c()}}(w.location,w.matches),S=!0===(s&&s.preventScrollReset);let f=s&&s.overrideNavigation,p=h(t,o,e.basename);if(!p){let e=oe(404,{pathname:o.pathname}),{matches:r,route:n}=ae(t);return Ee(),void F(o,{matches:r,loaderData:{},errors:{[n.id]:e}})}if(g=o,!((v=w.location).pathname!==g.pathname||v.search!==g.search||v.hash===g.hash||s&&s.submission&&fe(s.submission.formMethod)))return void F(o,{matches:p});var v,g;y=new AbortController;let b,k,_=Z(e.history,o,y.signal,s&&s.submission);if(s&&s.pendingError)k={[ne(p).route.id]:s.pendingError};else if(s&&s.submission&&fe(s.submission.formMethod)){let e=await async function(e,t,r,o,i){let u;ee(),U({navigation:n({state:"submitting",location:t},r)});let l=ge(o,t);if(l.route.action){if(u=await J("action",e,l,o,m.basename),e.signal.aborted)return{shortCircuited:!0}}else u={type:d.error,error:oe(405,{method:e.method,pathname:t.pathname,routeId:l.route.id})};if(ce(u)){let e;return e=i&&null!=i.replace?i.replace:u.location===w.location.pathname+w.location.search,await K(w,u,{submission:r,replace:e}),{shortCircuited:!0}}if(se(u)){let e=ne(o,l.route.id);return!0!==(i&&i.replace)&&(x=a.Push),{pendingActionData:{},pendingActionError:{[e.route.id]:u.error}}}if(le(u))throw oe(400,{type:"defer-action"});return{pendingActionData:{[l.route.id]:u.data}}}(_,o,s.submission,p,{replace:s.replace});if(e.shortCircuited)return;b=e.pendingActionData,k=e.pendingActionError,f=n({state:"loading",location:o},s.submission),_=new Request(_.url,{signal:_.signal})}let{shortCircuited:D,loaderData:N,errors:j}=await async function(t,r,a,o,i,l,s,c){let f=o;f||(f=n({state:"loading",location:r,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},i));let d=i||(f.formMethod&&f.formAction&&f.formData&&f.formEncType?{formMethod:f.formMethod,formAction:f.formAction,formData:f.formData,formEncType:f.formEncType}:void 0),[p,h]=Y(e.history,w,a,d,r,R,C,P,s,c,I);if(Ee((e=>!(a&&a.some((t=>t.route.id===e)))||p&&p.some((t=>t.route.id===e)))),0===p.length&&0===h.length)return F(r,n({matches:a,loaderData:{},errors:c||null},s?{actionData:s}:{})),{shortCircuited:!0};if(!E){h.forEach((e=>{let t=w.fetchers.get(e.key),r={state:"loading",data:t&&t.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};w.fetchers.set(e.key,r)}));let e=s||w.actionData;U(n({navigation:f},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},h.length>0?{fetchers:new Map(w.fetchers)}:{}))}T=++O,h.forEach((e=>A.set(e.key,y)));let{results:v,loaderResults:g,fetcherResults:m}=await X(w.matches,a,p,h,t);if(t.signal.aborted)return{shortCircuited:!0};h.forEach((e=>A.delete(e.key)));let b=ie(v);if(b)return await K(w,b,{replace:l}),{shortCircuited:!0};let{loaderData:x,errors:S}=te(w,a,p,g,c,h,m,L);return L.forEach(((e,t)=>{e.subscribe((r=>{(r||e.done)&&L.delete(t)}))})),function(){let e=[];for(let t of M){let r=w.fetchers.get(t);u(r,"Expected fetcher: "+t),"loading"===r.state&&(M.delete(t),e.push(t))}ye(e)}(),n({loaderData:x,errors:S},be(T)||h.length>0?{fetchers:new Map(w.fetchers)}:{})}(_,o,p,f,s&&s.submission,s&&s.replace,b,k);D||(y=null,F(o,n({matches:p},b?{actionData:b}:{},{loaderData:N,errors:j})))}function Q(e){return w.fetchers.get(e)||V}async function K(t,r,o){var i;let{submission:l,replace:c,isFetchActionRedirect:f}=void 0===o?{}:o;r.revalidate&&(R=!0);let d=s(t.location,r.location,n({_isRedirect:!0},f?{_isFetchActionRedirect:!0}:{}));if(u(d,"Expected a location on the redirect navigation"),$&&void 0!==(null==(i=window)?void 0:i.location)){let t=e.history.createURL(r.location).origin;if(window.location.origin!==t)return void(c?window.location.replace(r.location):window.location.assign(r.location))}y=null;let p=!0===c?a.Replace:a.Push,{formMethod:h,formAction:v,formEncType:g,formData:m}=t.navigation;!l&&h&&v&&m&&g&&(l={formMethod:h,formAction:v,formEncType:g,formData:m}),B.has(r.status)&&l&&fe(l.formMethod)?await z(p,d,{submission:n({},l,{formAction:r.location}),preventScrollReset:S}):await z(p,d,{overrideNavigation:{state:"loading",location:d,formMethod:l?l.formMethod:void 0,formAction:l?l.formAction:void 0,formEncType:l?l.formEncType:void 0,formData:l?l.formData:void 0},preventScrollReset:S})}async function X(t,r,n,a,o){let i=await Promise.all([...n.map((e=>J("loader",o,e,r,m.basename))),...a.map((t=>J("loader",Z(e.history,t.path,o.signal),t.match,t.matches,m.basename)))]),u=i.slice(0,n.length),l=i.slice(n.length);return await Promise.all([de(t,n,u,o.signal,!1,w.loaderData),de(t,a.map((e=>e.match)),l,o.signal,!0)]),{results:i,loaderResults:u,fetcherResults:l}}function ee(){R=!0,C.push(...Ee()),I.forEach(((e,t)=>{A.has(t)&&(P.push(t),me(t))}))}function ue(e,t,r){let n=ne(w.matches,t);he(e),U({errors:{[n.route.id]:r},fetchers:new Map(w.fetchers)})}function he(e){A.has(e)&&me(e),I.delete(e),_.delete(e),M.delete(e),w.fetchers.delete(e)}function me(e){let t=A.get(e);u(t,"Expected fetch controller: "+e),t.abort(),A.delete(e)}function ye(e){for(let t of e){let e={state:"idle",data:Q(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};w.fetchers.set(t,e)}}function be(e){let t=[];for(let[r,n]of _)if(n<e){let e=w.fetchers.get(r);u(e,"Expected fetcher: "+r),"loading"===e.state&&(me(r),_.delete(r),t.push(r))}return ye(t),t.length>0}function we(e){w.blockers.delete(e),N.delete(e),D===e&&(D=null)}function xe(e,t){let r=w.blockers.get(e)||H;u("unblocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"proceeding"===t.state||"blocked"===r.state&&"unblocked"===t.state||"proceeding"===r.state&&"unblocked"===t.state,"Invalid blocker state transition: "+r.state+" -> "+t.state),w.blockers.set(e,t),U({blockers:new Map(w.blockers)})}function Se(e){let{currentLocation:t,nextLocation:r,historyAction:n}=e;if(null==D)return;let a=N.get(D);u(a,"Could not find a function for the active blocker");let o=w.blockers.get(D);return o&&"proceeding"===o.state?void 0:a({currentLocation:t,nextLocation:r,historyAction:n})?D:void 0}function Ee(e){let t=[];return L.forEach(((r,n)=>{e&&!e(n)||(r.cancel(),t.push(n),L.delete(n))})),t}function ke(e,t){if(i&&l&&c){let r=t.map((e=>ve(e,w.loaderData))),n=l(e,r)||e.key,a=i[n];if("number"==typeof a)return a}return null}return m={get basename(){return e.basename},get state(){return w},get routes(){return t},initialize:function(){return r=e.history.listen((t=>{let{action:r,location:n,delta:a}=t;if(j)return void(j=!1);k(null!=D&&null===a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=Se({currentLocation:w.location,nextLocation:n,historyAction:r});return o&&null!=a?(j=!0,e.history.go(-1*a),void xe(o,{state:"blocked",location:n,proceed(){xe(o,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),e.history.go(a)},reset(){we(o),U({blockers:new Map(m.state.blockers)})}})):z(r,n)})),w.initialized||z(a.Pop,w.location),m},subscribe:function(e){return o.add(e),()=>o.delete(e)},enableScrollRestoration:function(e,t,r){if(i=e,c=t,l=r||(e=>e.key),!f&&w.navigation===W){f=!0;let e=ke(w.location,w.matches);null!=e&&U({restoreScrollPosition:e})}return()=>{i=null,c=null,l=null}},navigate:async function t(r,o){if("number"==typeof r)return void e.history.go(r);let{path:i,submission:u,error:l}=G(r,o),c=w.location,f=s(w.location,i,o&&o.state);f=n({},f,e.history.encodeLocation(f));let d=o&&null!=o.replace?o.replace:void 0,p=a.Push;!0===d?p=a.Replace:!1===d||null!=u&&fe(u.formMethod)&&u.formAction===w.location.pathname+w.location.search&&(p=a.Replace);let h=o&&"preventScrollReset"in o?!0===o.preventScrollReset:void 0,v=Se({currentLocation:c,nextLocation:f,historyAction:p});if(!v)return await z(p,f,{submission:u,pendingError:l,preventScrollReset:h,replace:o&&o.replace});xe(v,{state:"blocked",location:f,proceed(){xe(v,{state:"proceeding",proceed:void 0,reset:void 0,location:f}),t(r,o)},reset(){we(v),U({blockers:new Map(w.blockers)})}})},fetch:function(r,a,o,i){if(q)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");A.has(r)&&me(r);let l=h(t,o,e.basename);if(!l)return void ue(r,a,oe(404,{pathname:o}));let{path:s,submission:c}=G(o,i,!0),f=ge(l,s);S=!0===(i&&i.preventScrollReset),c&&fe(c.formMethod)?async function(r,a,o,i,l,s){if(ee(),I.delete(r),!i.route.action){let e=oe(405,{method:s.formMethod,pathname:o,routeId:a});return void ue(r,a,e)}let c=w.fetchers.get(r),f=n({state:"submitting"},s,{data:c&&c.data," _hasFetcherDoneAnything ":!0});w.fetchers.set(r,f),U({fetchers:new Map(w.fetchers)});let d=new AbortController,p=Z(e.history,o,d.signal,s);A.set(r,d);let v=await J("action",p,i,l,m.basename);if(p.signal.aborted)return void(A.get(r)===d&&A.delete(r));if(ce(v)){A.delete(r),M.add(r);let e=n({state:"loading"},s,{data:void 0," _hasFetcherDoneAnything ":!0});return w.fetchers.set(r,e),U({fetchers:new Map(w.fetchers)}),K(w,v,{isFetchActionRedirect:!0})}if(se(v))return void ue(r,a,v.error);if(le(v))throw oe(400,{type:"defer-action"});let g=w.navigation.location||w.location,b=Z(e.history,g,d.signal),S="idle"!==w.navigation.state?h(t,w.navigation.location,e.basename):w.matches;u(S,"Didn't find any matches after fetcher action");let E=++O;_.set(r,E);let k=n({state:"loading",data:v.data},s,{" _hasFetcherDoneAnything ":!0});w.fetchers.set(r,k);let[D,N]=Y(e.history,w,S,s,g,R,C,P,{[i.route.id]:v.data},void 0,I);N.filter((e=>e.key!==r)).forEach((e=>{let t=e.key,r=w.fetchers.get(t),n={state:"loading",data:r&&r.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};w.fetchers.set(t,n),A.set(t,d)})),U({fetchers:new Map(w.fetchers)});let{results:j,loaderResults:z,fetcherResults:B}=await X(w.matches,S,D,N,b);if(d.signal.aborted)return;_.delete(r),A.delete(r),N.forEach((e=>A.delete(e.key)));let W=ie(j);if(W)return K(w,W);let{loaderData:V,errors:H}=te(w,w.matches,D,z,void 0,N,B,L),$={state:"idle",data:v.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};w.fetchers.set(r,$);let q=be(E);"loading"===w.navigation.state&&E>T?(u(x,"Expected pending action"),y&&y.abort(),F(w.navigation.location,{matches:S,loaderData:V,errors:H,fetchers:new Map(w.fetchers)})):(U(n({errors:H,loaderData:re(w.loaderData,V,S,H)},q?{fetchers:new Map(w.fetchers)}:{})),R=!1)}(r,a,s,f,l,c):(I.set(r,{routeId:a,path:s,match:f,matches:l}),async function(t,r,a,o,i,l){let s=w.fetchers.get(t),c=n({state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},l,{data:s&&s.data," _hasFetcherDoneAnything ":!0});w.fetchers.set(t,c),U({fetchers:new Map(w.fetchers)});let f=new AbortController,d=Z(e.history,a,f.signal);A.set(t,f);let p=await J("loader",d,o,i,m.basename);if(le(p)&&(p=await pe(p,d.signal,!0)||p),A.get(t)===f&&A.delete(t),d.signal.aborted)return;if(ce(p))return void await K(w,p);if(se(p)){let e=ne(w.matches,r);return w.fetchers.delete(t),void U({fetchers:new Map(w.fetchers),errors:{[e.route.id]:p.error}})}u(!le(p),"Unhandled fetcher deferred data");let h={state:"idle",data:p.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};w.fetchers.set(t,h),U({fetchers:new Map(w.fetchers)})}(r,a,s,f,l,c))},revalidate:function(){ee(),U({revalidation:"loading"}),"submitting"!==w.navigation.state&&("idle"!==w.navigation.state?z(x||w.historyAction,w.navigation.location,{overrideNavigation:w.navigation}):z(w.historyAction,w.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:Q,deleteFetcher:he,dispose:function(){r&&r(),o.clear(),y&&y.abort(),w.fetchers.forEach(((e,t)=>he(t))),w.blockers.forEach(((e,t)=>we(t)))},getBlocker:function(e,t){let r=w.blockers.get(e)||H;return N.get(e)!==t&&(N.set(e,t),null==D?D=e:e!==D&&k(!1,"A router only supports one blocker at a time")),r},deleteBlocker:we,_internalFetchControllers:A,_internalActiveDeferreds:L},m}function G(e,t,r){void 0===r&&(r=!1);let n,a="string"==typeof e?e:c(e);if(!t||!function(e){return null!=e&&"formData"in e}(t))return{path:a};if(t.formMethod&&(o=t.formMethod,!F.has(o)))return{path:a,error:oe(405,{method:t.formMethod})};var o;if(t.formData&&(n={formMethod:t.formMethod||"get",formAction:ue(a),formEncType:t&&t.formEncType||"application/x-www-form-urlencoded",formData:t.formData},fe(n.formMethod)))return{path:a,submission:n};let i=f(a),u=ee(t.formData);return r&&i.search&&he(i.search)&&u.append("index",""),i.search="?"+u,{path:c(i),submission:n}}function Y(e,t,r,a,o,i,u,l,s,c,f){let d=c?Object.values(c)[0]:s?Object.values(s)[0]:void 0,p=e.createURL(t.location),h=e.createURL(o),v=i||p.toString()===h.toString()||p.search!==h.search,g=c?Object.keys(c)[0]:void 0,m=function(e,t){let r=e;if(t){let n=e.findIndex((e=>e.route.id===t));n>=0&&(r=e.slice(0,n))}return r}(r,g).filter(((e,r)=>{if(null==e.route.loader)return!1;if(function(e,t,r){let n=!t||r.route.id!==t.route.id,a=void 0===e[r.route.id];return n||a}(t.loaderData,t.matches[r],e)||u.some((t=>t===e.route.id)))return!0;let o=t.matches[r],i=e;return X(e,n({currentUrl:p,currentParams:o.params,nextUrl:h,nextParams:i.params},a,{actionResult:d,defaultShouldRevalidate:v||K(o,i)}))})),y=[];return f&&f.forEach(((e,o)=>{r.some((t=>t.route.id===e.routeId))&&(l.includes(o)||X(e.match,n({currentUrl:p,currentParams:t.matches[t.matches.length-1].params,nextUrl:h,nextParams:r[r.length-1].params},a,{actionResult:d,defaultShouldRevalidate:v})))&&y.push(n({key:o},e))})),[m,y]}function K(e,t){let r=e.route.path;return e.pathname!==t.pathname||null!=r&&r.endsWith("*")&&e.params["*"]!==t.params["*"]}function X(e,t){if(e.route.shouldRevalidate){let r=e.route.shouldRevalidate(t);if("boolean"==typeof r)return r}return t.defaultShouldRevalidate}async function J(e,t,r,a,o,i,l,s){let p,h,v;void 0===o&&(o="/"),void 0===i&&(i=!1),void 0===l&&(l=!1);let g=new Promise(((e,t)=>v=t)),m=()=>v();t.signal.addEventListener("abort",m);try{let n=r.route[e];u(n,"Could not find the "+e+' to run on the "'+r.route.id+'" route'),h=await Promise.race([n({request:t,params:r.params,context:s}),g]),u(void 0!==h,"You defined "+("action"===e?"an action":"a loader")+' for route "'+r.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){p=d.error,h=e}finally{t.signal.removeEventListener("abort",m)}if(null!=(y=h)&&"number"==typeof y.status&&"string"==typeof y.statusText&&"object"==typeof y.headers&&void 0!==y.body){let e,s=h.status;if(z.has(s)){let e=h.headers.get("Location");if(u(e,"Redirects returned/thrown from loaders/actions must have a Location header"),/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i.test(e)){if(!i){let r=new URL(t.url),n=e.startsWith("//")?new URL(r.protocol+e):new URL(e);n.origin===r.origin&&(e=n.pathname+n.search+n.hash)}}else{let i=function(e,t,r,a){let o;void 0===a&&(a=!1),"string"==typeof e?o=f(e):(o=n({},e),u(!o.pathname||!o.pathname.includes("?"),R("?","pathname","search",o)),u(!o.pathname||!o.pathname.includes("#"),R("#","pathname","hash",o)),u(!o.search||!o.search.includes("#"),R("#","search","hash",o)));let i,l=""===e||""===o.pathname,s=l?"/":o.pathname;if(a||null==s)i=r;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:r,search:n="",hash:a=""}="string"==typeof e?f(e):e,o=r?r.startsWith("/")?r:function(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?r.length>1&&r.pop():"."!==e&&r.push(e)})),r.length>1?r.join("/"):"/"}(r,t):t;return{pathname:o,search:O(n),hash:T(a)}}(o,i),d=s&&"/"!==s&&s.endsWith("/"),p=(l||"."===s)&&r.endsWith("/");return c.pathname.endsWith("/")||!d&&!p||(c.pathname+="/"),c}(e,C(a.slice(0,a.indexOf(r)+1)).map((e=>e.pathnameBase)),new URL(t.url).pathname);if(u(c(i),"Unable to resolve redirect location: "+e),o){let e=i.pathname;i.pathname="/"===e?o:P([o,e])}e=c(i)}if(i)throw h.headers.set("Location",e),h;return{type:d.redirect,status:s,location:e,revalidate:null!==h.headers.get("X-Remix-Revalidate")}}if(l)throw{type:p||d.data,response:h};let v=h.headers.get("Content-Type");return e=v&&/\bapplication\/json\b/.test(v)?await h.json():await h.text(),p===d.error?{type:p,error:new L(s,h.statusText,e),headers:h.headers}:{type:d.data,data:e,statusCode:h.status,headers:h.headers}}var y;return p===d.error?{type:p,error:h}:h instanceof M?{type:d.deferred,deferredData:h}:{type:d.data,data:h}}function Z(e,t,r,n){let a=e.createURL(ue(t)).toString(),o={signal:r};if(n&&fe(n.formMethod)){let{formMethod:e,formEncType:t,formData:r}=n;o.method=e.toUpperCase(),o.body="application/x-www-form-urlencoded"===t?ee(r):r}return new Request(a,o)}function ee(e){let t=new URLSearchParams;for(let[r,n]of e.entries())t.append(r,n instanceof File?n.name:n);return t}function te(e,t,r,a,o,i,l,s){let{loaderData:c,errors:f}=function(e,t,r,n,a){let o,i={},l=null,s=!1,c={};return r.forEach(((r,f)=>{let d=t[f].route.id;if(u(!ce(r),"Cannot handle redirect results in processLoaderData"),se(r)){let t=ne(e,d),a=r.error;n&&(a=Object.values(n)[0],n=void 0),l=l||{},null==l[t.route.id]&&(l[t.route.id]=a),i[d]=void 0,s||(s=!0,o=D(r.error)?r.error.status:500),r.headers&&(c[d]=r.headers)}else le(r)?(a.set(d,r.deferredData),i[d]=r.deferredData.data):i[d]=r.data,null==r.statusCode||200===r.statusCode||s||(o=r.statusCode),r.headers&&(c[d]=r.headers)})),n&&(l=n,i[Object.keys(n)[0]]=void 0),{loaderData:i,errors:l,statusCode:o||200,loaderHeaders:c}}(t,r,a,o,s);for(let t=0;t<i.length;t++){let{key:r,match:a}=i[t];u(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let o=l[t];if(se(o)){let t=ne(e.matches,a.route.id);f&&f[t.route.id]||(f=n({},f,{[t.route.id]:o.error})),e.fetchers.delete(r)}else if(ce(o))u(!1,"Unhandled fetcher revalidation redirect");else if(le(o))u(!1,"Unhandled fetcher deferred data");else{let t={state:"idle",data:o.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};e.fetchers.set(r,t)}}return{loaderData:c,errors:f}}function re(e,t,r,a){let o=n({},t);for(let n of r){let r=n.route.id;if(t.hasOwnProperty(r)?void 0!==t[r]&&(o[r]=t[r]):void 0!==e[r]&&(o[r]=e[r]),a&&a.hasOwnProperty(r))break}return o}function ne(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function ae(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function oe(e,t){let{pathname:r,routeId:n,method:a,type:o}=void 0===t?{}:t,i="Unknown Server Error",u="Unknown @remix-run/router error";return 400===e?(i="Bad Request",a&&r&&n?u="You made a "+a+' request to "'+r+'" but did not provide a `loader` for route "'+n+'", so there is no way to handle the request.':"defer-action"===o&&(u="defer() is not supported in actions")):403===e?(i="Forbidden",u='Route "'+n+'" does not match URL "'+r+'"'):404===e?(i="Not Found",u='No route matches URL "'+r+'"'):405===e&&(i="Method Not Allowed",a&&r&&n?u="You made a "+a.toUpperCase()+' request to "'+r+'" but did not provide an `action` for route "'+n+'", so there is no way to handle the request.':a&&(u='Invalid request method "'+a.toUpperCase()+'"')),new L(e||500,i,new Error(u),!0)}function ie(e){for(let t=e.length-1;t>=0;t--){let r=e[t];if(ce(r))return r}}function ue(e){return c(n({},"string"==typeof e?f(e):e,{hash:""}))}function le(e){return e.type===d.deferred}function se(e){return e.type===d.error}function ce(e){return(e&&e.type)===d.redirect}function fe(e){return j.has(e)}async function de(e,t,r,n,a,o){for(let i=0;i<r.length;i++){let u=r[i],l=t[i],s=e.find((e=>e.route.id===l.route.id)),c=null!=s&&!K(s,l)&&void 0!==(o&&o[l.route.id]);le(u)&&(a||c)&&await pe(u,n,a).then((e=>{e&&(r[i]=e||r[i])}))}}async function pe(e,t,r){if(void 0===r&&(r=!1),!await e.deferredData.resolveData(t)){if(r)try{return{type:d.data,data:e.deferredData.unwrappedData}}catch(e){return{type:d.error,error:e}}return{type:d.data,data:e.deferredData.data}}}function he(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function ve(e,t){let{route:r,pathname:n,params:a}=e;return{id:r.id,pathname:n,params:a,data:t[r.id],handle:r.handle}}function ge(e,t){let r="string"==typeof t?f(t).search:t.search;if(e[e.length-1].route.index&&he(r||""))return e[e.length-1];let n=C(e);return n[n.length-1]}Symbol("deferred")},64448:(e,t,r)=>{"use strict";var n=r(67294),a=r(63840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,u={};function l(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function v(e,t,r,n,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=a,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,r,n){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,a,n)&&(r=null),n||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):a.mustUseProperty?e[a.propertyName]=null===r?3!==a.type&&"":r:(t=a.attributeName,n=a.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(a=a.type)||4===a&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,y);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,y);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,y);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),R=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),P=Symbol.for("react.context"),A=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),M=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var N,j=Object.assign;function U(e){if(void 0===N)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);N=t&&t[1]||""}return"\n"+N+e}var F=!1;function z(e,t){if(!e||F)return"";F=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=n.stack.split("\n"),i=a.length-1,u=o.length-1;1<=i&&0<=u&&a[i]!==o[u];)u--;for(;1<=i&&0<=u;i--,u--)if(a[i]!==o[u]){if(1!==i||1!==u)do{if(i--,0>--u||a[i]!==o[u]){var l="\n"+a[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=u);break}}}finally{F=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?U(e):""}function B(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case R:return"Profiler";case k:return"StrictMode";case O:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case M:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var a=r.get,o=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){n=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=$(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var r=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function K(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=H(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var r=H(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,r):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function ee(e,t,r){"number"===t&&G(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var te=Array.isArray;function re(e,t,r,n){if(e=e.options,t){t={};for(var a=0;a<r.length;a++)t["$"+r[a]]=!0;for(r=0;r<e.length;r++)a=t.hasOwnProperty("$"+e[r].value),e[r].selected!==a&&(e[r].selected=a),a&&n&&(e[r].defaultSelected=!0)}else{for(r=""+H(r),t=null,a=0;a<e.length;a++){if(e[a].value===r)return e[a].selected=!0,void(n&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(o(92));if(te(r)){if(1<r.length)throw Error(o(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:H(r)}}function oe(e,t){var r=H(t.value),n=H(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ve(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),a=ve(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,a):e[r]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var me=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(me[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ee=null,ke=null;function Re(e){if(e=ba(e)){if("function"!=typeof Se)throw Error(o(280));var t=e.stateNode;t&&(t=xa(t),Se(e.stateNode,e.type,t))}}function Ce(e){Ee?ke?ke.push(e):ke=[e]:Ee=e}function Pe(){if(Ee){var e=Ee,t=ke;if(ke=Ee=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Ae(e,t){return e(t)}function Oe(){}var Te=!1;function _e(e,t,r){if(Te)return e(t,r);Te=!0;try{return Ae(e,t,r)}finally{Te=!1,(null!==Ee||null!==ke)&&(Oe(),Pe())}}function Me(e,t){var r=e.stateNode;if(null===r)return null;var n=xa(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(o(231,t,typeof r));return r}var Ie=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){Ie=!1}function De(e,t,r,n,a,o,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(r,s)}catch(e){this.onError(e)}}var Ne=!1,je=null,Ue=!1,Fe=null,ze={onError:function(e){Ne=!0,je=e}};function Be(e,t,r,n,a,o,i,u,l){Ne=!1,je=null,De.apply(ze,arguments)}function We(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(We(e)!==e)throw Error(o(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(o(188));return t!==e?null:e}for(var r=e,n=t;;){var a=r.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(n=a.return)){r=n;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===r)return He(a),e;if(i===n)return He(a),t;i=i.sibling}throw Error(o(188))}if(r.return!==n.return)r=a,n=i;else{for(var u=!1,l=a.child;l;){if(l===r){u=!0,r=a,n=i;break}if(l===n){u=!0,n=a,r=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===r){u=!0,r=i,n=a;break}if(l===n){u=!0,n=i,r=a;break}l=l.sibling}if(!u)throw Error(o(189))}}if(r.alternate!==n)throw Error(o(190))}if(3!==r.tag)throw Error(o(188));return r.stateNode.current===r?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Qe=a.unstable_scheduleCallback,Ge=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,rt=a.unstable_LowPriority,nt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ut(e)/lt|0)|0},ut=Math.log,lt=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var r=e.pendingLanes;if(0===r)return 0;var n=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&r;if(0!==i){var u=i&~a;0!==u?n=ft(u):0!=(o&=i)&&(n=ft(o))}else 0!=(i=r&~a)?n=ft(i):0!==o&&(n=ft(o));if(0===n)return 0;if(0!==t&&t!==n&&0==(t&a)&&((a=n&-n)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&n)&&(n|=16&r),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)a=1<<(r=31-it(t)),n|=e[r],t&=~a;return n}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function mt(e,t,r){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=r}function yt(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-it(r),a=1<<n;a&t|e[n]&t&&(e[n]|=t),r&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,St,Et,kt,Rt,Ct=!1,Pt=[],At=null,Ot=null,Tt=null,_t=new Map,Mt=new Map,It=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":At=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mt.delete(t.pointerId)}}function Nt(e,t,r,n,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&St(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ya(e.target);if(null!==t){var r=We(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Ve(r)))return e.blockedOn=t,void Rt(e.priority,(function(){Et(r)}))}else if(3===t&&r.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function Ut(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=ba(r))&&St(t),e.blockedOn=r,!1;var n=new(r=e.nativeEvent).constructor(r.type,r);we=n,r.target.dispatchEvent(n),we=null,t.shift()}return!0}function Ft(e,t,r){Ut(e)&&r.delete(t)}function zt(){Ct=!1,null!==At&&Ut(At)&&(At=null),null!==Ot&&Ut(Ot)&&(Ot=null),null!==Tt&&Ut(Tt)&&(Tt=null),_t.forEach(Ft),Mt.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Wt(e){function t(t){return Bt(t,e)}if(0<Pt.length){Bt(Pt[0],e);for(var r=1;r<Pt.length;r++){var n=Pt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==At&&Bt(At,e),null!==Ot&&Bt(Ot,e),null!==Tt&&Bt(Tt,e),_t.forEach(t),Mt.forEach(t),r=0;r<It.length;r++)(n=It[r]).blockedOn===e&&(n.blockedOn=null);for(;0<It.length&&null===(r=It[0]).blockedOn;)jt(r),null===r.blockedOn&&It.shift()}var Vt=w.ReactCurrentBatchConfig,Ht=!0;function $t(e,t,r,n){var a=bt,o=Vt.transition;Vt.transition=null;try{bt=1,Qt(e,t,r,n)}finally{bt=a,Vt.transition=o}}function qt(e,t,r,n){var a=bt,o=Vt.transition;Vt.transition=null;try{bt=4,Qt(e,t,r,n)}finally{bt=a,Vt.transition=o}}function Qt(e,t,r,n){if(Ht){var a=Yt(e,t,r,n);if(null===a)Hn(e,t,n,Gt,r),Dt(e,n);else if(function(e,t,r,n,a){switch(t){case"focusin":return At=Nt(At,e,t,r,n,a),!0;case"dragenter":return Ot=Nt(Ot,e,t,r,n,a),!0;case"mouseover":return Tt=Nt(Tt,e,t,r,n,a),!0;case"pointerover":var o=a.pointerId;return _t.set(o,Nt(_t.get(o)||null,e,t,r,n,a)),!0;case"gotpointercapture":return o=a.pointerId,Mt.set(o,Nt(Mt.get(o)||null,e,t,r,n,a)),!0}return!1}(a,e,t,r,n))n.stopPropagation();else if(Dt(e,n),4&t&&-1<Lt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&xt(o),null===(o=Yt(e,t,r,n))&&Hn(e,t,n,Gt,r),o===a)break;a=o}null!==a&&n.stopPropagation()}else Hn(e,t,n,null,r)}}var Gt=null;function Yt(e,t,r,n){if(Gt=null,null!==(e=ya(e=xe(n))))if(null===(t=We(e)))e=null;else if(13===(r=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===r){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case rt:return 16;case nt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function er(){if(Zt)return Zt;var e,t,r=Jt,n=r.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<n&&r[e]===a[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rr(){return!0}function nr(){return!1}function ar(e){function t(t,r,n,a,o){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rr:nr,this.isPropagationStopped=nr,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rr)},persist:function(){},isPersistent:rr}),t}var or,ir,ur,lr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sr=ar(lr),cr=j({},lr,{view:0,detail:0}),fr=ar(cr),dr=j({},cr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ur&&(ur&&"mousemove"===e.type?(or=e.screenX-ur.screenX,ir=e.screenY-ur.screenY):ir=or=0,ur=e),or)},movementY:function(e){return"movementY"in e?e.movementY:ir}}),pr=ar(dr),hr=ar(j({},dr,{dataTransfer:0})),vr=ar(j({},cr,{relatedTarget:0})),gr=ar(j({},lr,{animationName:0,elapsedTime:0,pseudoElement:0})),mr=j({},lr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yr=ar(mr),br=ar(j({},lr,{data:0})),wr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Er(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function kr(){return Er}var Rr=j({},cr,{key:function(e){if(e.key){var t=wr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kr,charCode:function(e){return"keypress"===e.type?tr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cr=ar(Rr),Pr=ar(j({},dr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ar=ar(j({},cr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kr})),Or=ar(j({},lr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tr=j({},dr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),_r=ar(Tr),Mr=[9,13,27,32],Ir=c&&"CompositionEvent"in window,Lr=null;c&&"documentMode"in document&&(Lr=document.documentMode);var Dr=c&&"TextEvent"in window&&!Lr,Nr=c&&(!Ir||Lr&&8<Lr&&11>=Lr),jr=String.fromCharCode(32),Ur=!1;function Fr(e,t){switch(e){case"keyup":return-1!==Mr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Br=!1,Wr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wr[e.type]:"textarea"===t}function Hr(e,t,r,n){Ce(n),0<(t=qn(t,"onChange")).length&&(r=new sr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var $r=null,qr=null;function Qr(e){Un(e,0)}function Gr(e){if(Q(wa(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(c){var Xr;if(c){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"==typeof Zr.oninput}Xr=Jr}else Xr=!1;Kr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){$r&&($r.detachEvent("onpropertychange",tn),qr=$r=null)}function tn(e){if("value"===e.propertyName&&Gr(qr)){var t=[];Hr(t,qr,e,xe(e)),_e(Qr,t)}}function rn(e,t,r){"focusin"===e?(en(),qr=r,($r=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gr(qr)}function an(e,t){if("click"===e)return Gr(t)}function on(e,t){if("input"===e||"change"===e)return Gr(t)}var un="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ln(e,t){if(un(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var a=r[n];if(!f.call(t,a)||!un(e[a],t[a]))return!1}return!0}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cn(e,t){var r,n=sn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sn(n)}}function fn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dn(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=G((e=t.contentWindow).document)}return t}function pn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hn(e){var t=dn(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&fn(r.ownerDocument.documentElement,r)){if(null!==n&&pn(r))if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if((e=(t=r.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=r.textContent.length,o=Math.min(n.start,a);n=void 0===n.end?o:Math.min(n.end,a),!e.extend&&o>n&&(a=n,n=o,o=a),a=cn(r,o);var i=cn(r,n);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>n?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=r;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<t.length;r++)(e=t[r]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var vn=c&&"documentMode"in document&&11>=document.documentMode,gn=null,mn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==gn||gn!==G(n)||(n="selectionStart"in(n=gn)&&pn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&ln(yn,n)||(yn=n,0<(n=qn(mn,"onSelect")).length&&(t=new sr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=gn)))}function xn(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var Sn={animationend:xn("Animation","AnimationEnd"),animationiteration:xn("Animation","AnimationIteration"),animationstart:xn("Animation","AnimationStart"),transitionend:xn("Transition","TransitionEnd")},En={},kn={};function Rn(e){if(En[e])return En[e];if(!Sn[e])return e;var t,r=Sn[e];for(t in r)if(r.hasOwnProperty(t)&&t in kn)return En[e]=r[t];return e}c&&(kn=document.createElement("div").style,"AnimationEvent"in window||(delete Sn.animationend.animation,delete Sn.animationiteration.animation,delete Sn.animationstart.animation),"TransitionEvent"in window||delete Sn.transitionend.transition);var Cn=Rn("animationend"),Pn=Rn("animationiteration"),An=Rn("animationstart"),On=Rn("transitionend"),Tn=new Map,_n="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Mn(e,t){Tn.set(e,t),l(t,[e])}for(var In=0;In<_n.length;In++){var Ln=_n[In];Mn(Ln.toLowerCase(),"on"+(Ln[0].toUpperCase()+Ln.slice(1)))}Mn(Cn,"onAnimationEnd"),Mn(Pn,"onAnimationIteration"),Mn(An,"onAnimationStart"),Mn("dblclick","onDoubleClick"),Mn("focusin","onFocus"),Mn("focusout","onBlur"),Mn(On,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Nn=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dn));function jn(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,a,i,u,l,s){if(Be.apply(this,arguments),Ne){if(!Ne)throw Error(o(198));var c=je;Ne=!1,je=null,Ue||(Ue=!0,Fe=c)}}(n,t,void 0,e),e.currentTarget=null}function Un(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],a=n.event;n=n.listeners;e:{var o=void 0;if(t)for(var i=n.length-1;0<=i;i--){var u=n[i],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==o&&a.isPropagationStopped())break e;jn(a,u,s),o=l}else for(i=0;i<n.length;i++){if(l=(u=n[i]).instance,s=u.currentTarget,u=u.listener,l!==o&&a.isPropagationStopped())break e;jn(a,u,s),o=l}}}if(Ue)throw e=Fe,Ue=!1,Fe=null,e}function Fn(e,t){var r=t[va];void 0===r&&(r=t[va]=new Set);var n=e+"__bubble";r.has(n)||(Vn(t,e,2,!1),r.add(n))}function zn(e,t,r){var n=0;t&&(n|=4),Vn(r,e,n,t)}var Bn="_reactListening"+Math.random().toString(36).slice(2);function Wn(e){if(!e[Bn]){e[Bn]=!0,i.forEach((function(t){"selectionchange"!==t&&(Nn.has(t)||zn(t,!1,e),zn(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Bn]||(t[Bn]=!0,zn("selectionchange",!1,t))}}function Vn(e,t,r,n){switch(Kt(t)){case 1:var a=$t;break;case 4:a=qt;break;default:a=Qt}r=a.bind(null,t,r,e),a=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),n?void 0!==a?e.addEventListener(t,r,{capture:!0,passive:a}):e.addEventListener(t,r,!0):void 0!==a?e.addEventListener(t,r,{passive:a}):e.addEventListener(t,r,!1)}function Hn(e,t,r,n,a){var o=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var u=n.stateNode.containerInfo;if(u===a||8===u.nodeType&&u.parentNode===a)break;if(4===i)for(i=n.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;i=i.return}for(;null!==u;){if(null===(i=ya(u)))return;if(5===(l=i.tag)||6===l){n=o=i;continue e}u=u.parentNode}}n=n.return}_e((function(){var n=o,a=xe(r),i=[];e:{var u=Tn.get(e);if(void 0!==u){var l=sr,s=e;switch(e){case"keypress":if(0===tr(r))break e;case"keydown":case"keyup":l=Cr;break;case"focusin":s="focus",l=vr;break;case"focusout":s="blur",l=vr;break;case"beforeblur":case"afterblur":l=vr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=hr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Ar;break;case Cn:case Pn:case An:l=gr;break;case On:l=Or;break;case"scroll":l=fr;break;case"wheel":l=_r;break;case"copy":case"cut":case"paste":l=yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pr}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=n;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=Me(h,d))&&c.push($n(h,v,p))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,r,a),i.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||r===we||!(s=r.relatedTarget||r.fromElement)||!ya(s)&&!s[ha])&&(l||u)&&(u=a.window===a?a:(u=a.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=n,null!==(s=(s=r.relatedTarget||r.toElement)?ya(s):null)&&(s!==(f=We(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=n),l!==s)){if(c=pr,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pr,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:wa(l),p=null==s?u:wa(s),(u=new c(v,h+"leave",l,r,a)).target=f,u.relatedTarget=p,v=null,ya(a)===n&&((c=new c(d,h+"enter",s,r,a)).target=p,c.relatedTarget=f,v=c),f=v,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Qn(p))h++;for(p=0,v=d;v;v=Qn(v))p++;for(;0<h-p;)c=Qn(c),h--;for(;0<p-h;)d=Qn(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qn(c),d=Qn(d)}c=null}else c=null;null!==l&&Gn(i,u,l,c,!1),null!==s&&null!==f&&Gn(i,f,s,c,!0)}if("select"===(l=(u=n?wa(n):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var g=Yr;else if(Vr(u))if(Kr)g=on;else{g=nn;var m=rn}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(g=an);switch(g&&(g=g(e,n))?Hr(i,g,r,a):(m&&m(e,u,n),"focusout"===e&&(m=u._wrapperState)&&m.controlled&&"number"===u.type&&ee(u,"number",u.value)),m=n?wa(n):window,e){case"focusin":(Vr(m)||"true"===m.contentEditable)&&(gn=m,mn=n,yn=null);break;case"focusout":yn=mn=gn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,a);break;case"selectionchange":if(vn)break;case"keydown":case"keyup":wn(i,r,a)}var y;if(Ir)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Br?Fr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Nr&&"ko"!==r.locale&&(Br||"onCompositionStart"!==b?"onCompositionEnd"===b&&Br&&(y=er()):(Jt="value"in(Xt=a)?Xt.value:Xt.textContent,Br=!0)),0<(m=qn(n,b)).length&&(b=new br(b,e,null,r,a),i.push({event:b,listeners:m}),(y||null!==(y=zr(r)))&&(b.data=y))),(y=Dr?function(e,t){switch(e){case"compositionend":return zr(t);case"keypress":return 32!==t.which?null:(Ur=!0,jr);case"textInput":return(e=t.data)===jr&&Ur?null:e;default:return null}}(e,r):function(e,t){if(Br)return"compositionend"===e||!Ir&&Fr(e,t)?(e=er(),Zt=Jt=Xt=null,Br=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Nr&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=qn(n,"onBeforeInput")).length&&(a=new br("onBeforeInput","beforeinput",null,r,a),i.push({event:a,listeners:n}),a.data=y)}Un(i,t)}))}function $n(e,t,r){return{instance:e,listener:t,currentTarget:r}}function qn(e,t){for(var r=t+"Capture",n=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Me(e,r))&&n.unshift($n(e,o,a)),null!=(o=Me(e,t))&&n.push($n(e,o,a))),e=e.return}return n}function Qn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gn(e,t,r,n,a){for(var o=t._reactName,i=[];null!==r&&r!==n;){var u=r,l=u.alternate,s=u.stateNode;if(null!==l&&l===n)break;5===u.tag&&null!==s&&(u=s,a?null!=(l=Me(r,o))&&i.unshift($n(r,l,u)):a||null!=(l=Me(r,o))&&i.push($n(r,l,u))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}var Yn=/\r\n?/g,Kn=/\u0000|\uFFFD/g;function Xn(e){return("string"==typeof e?e:""+e).replace(Yn,"\n").replace(Kn,"")}function Jn(e,t,r){if(t=Xn(t),Xn(e)!==t&&r)throw Error(o(425))}function Zn(){}var ea=null,ta=null;function ra(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var na="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ua)}:na;function ua(e){setTimeout((function(){throw e}))}function la(e,t){var r=t,n=0;do{var a=r.nextSibling;if(e.removeChild(r),a&&8===a.nodeType)if("/$"===(r=a.data)){if(0===n)return e.removeChild(a),void Wt(t);n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++;r=a}while(r);Wt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ha="__reactContainer$"+fa,va="__reactEvents$"+fa,ga="__reactListeners$"+fa,ma="__reactHandles$"+fa;function ya(e){var t=e[da];if(t)return t;for(var r=e.parentNode;r;){if(t=r[ha]||r[da]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=ca(e);null!==e;){if(r=e[da])return r;e=ca(e)}return t}r=(e=r).parentNode}return null}function ba(e){return!(e=e[da]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xa(e){return e[pa]||null}var Sa=[],Ea=-1;function ka(e){return{current:e}}function Ra(e){0>Ea||(e.current=Sa[Ea],Sa[Ea]=null,Ea--)}function Ca(e,t){Ea++,Sa[Ea]=e.current,e.current=t}var Pa={},Aa=ka(Pa),Oa=ka(!1),Ta=Pa;function _a(e,t){var r=e.type.contextTypes;if(!r)return Pa;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in r)o[a]=t[a];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ma(e){return null!=e.childContextTypes}function Ia(){Ra(Oa),Ra(Aa)}function La(e,t,r){if(Aa.current!==Pa)throw Error(o(168));Ca(Aa,t),Ca(Oa,r)}function Da(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in t))throw Error(o(108,V(e)||"Unknown",a));return j({},r,n)}function Na(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Pa,Ta=Aa.current,Ca(Aa,e),Ca(Oa,Oa.current),!0}function ja(e,t,r){var n=e.stateNode;if(!n)throw Error(o(169));r?(e=Da(e,t,Ta),n.__reactInternalMemoizedMergedChildContext=e,Ra(Oa),Ra(Aa),Ca(Aa,e)):Ra(Oa),Ca(Oa,r)}var Ua=null,Fa=!1,za=!1;function Ba(e){null===Ua?Ua=[e]:Ua.push(e)}function Wa(){if(!za&&null!==Ua){za=!0;var e=0,t=bt;try{var r=Ua;for(bt=1;e<r.length;e++){var n=r[e];do{n=n(!0)}while(null!==n)}Ua=null,Fa=!1}catch(t){throw null!==Ua&&(Ua=Ua.slice(e+1)),Qe(Ze,Wa),t}finally{bt=t,za=!1}}return null}var Va=[],Ha=0,$a=null,qa=0,Qa=[],Ga=0,Ya=null,Ka=1,Xa="";function Ja(e,t){Va[Ha++]=qa,Va[Ha++]=$a,$a=e,qa=t}function Za(e,t,r){Qa[Ga++]=Ka,Qa[Ga++]=Xa,Qa[Ga++]=Ya,Ya=e;var n=Ka;e=Xa;var a=32-it(n)-1;n&=~(1<<a),r+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(n&(1<<i)-1).toString(32),n>>=i,a-=i,Ka=1<<32-it(t)+a|r<<a|n,Xa=o+e}else Ka=1<<o|r<<a|n,Xa=e}function eo(e){null!==e.return&&(Ja(e,1),Za(e,1,0))}function to(e){for(;e===$a;)$a=Va[--Ha],Va[Ha]=null,qa=Va[--Ha],Va[Ha]=null;for(;e===Ya;)Ya=Qa[--Ga],Qa[Ga]=null,Xa=Qa[--Ga],Qa[Ga]=null,Ka=Qa[--Ga],Qa[Ga]=null}var ro=null,no=null,ao=!1,oo=null;function io(e,t){var r=_s(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,null===(t=e.deletions)?(e.deletions=[r],e.flags|=16):t.push(r)}function uo(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ro=e,no=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ro=e,no=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(r=null!==Ya?{id:Ka,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},(r=_s(18,null,null,0)).stateNode=t,r.return=e,e.child=r,ro=e,no=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(ao){var t=no;if(t){var r=t;if(!uo(e,t)){if(lo(e))throw Error(o(418));t=sa(r.nextSibling);var n=ro;t&&uo(e,t)?io(n,r):(e.flags=-4097&e.flags|2,ao=!1,ro=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,ro=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ro=e}function fo(e){if(e!==ro)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ra(e.type,e.memoizedProps)),t&&(t=no)){if(lo(e))throw po(),Error(o(418));for(;t;)io(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){no=sa(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}no=null}}else no=ro?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=no;e;)e=sa(e.nextSibling)}function ho(){no=ro=null,ao=!1}function vo(e){null===oo?oo=[e]:oo.push(e)}var go=w.ReactCurrentBatchConfig;function mo(e,t){if(e&&e.defaultProps){for(var r in t=j({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var yo=ka(null),bo=null,wo=null,xo=null;function So(){xo=wo=bo=null}function Eo(e){var t=yo.current;Ra(yo),e._currentValue=t}function ko(e,t,r){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function Ro(e,t){bo=e,xo=wo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wu=!0),e.firstContext=null)}function Co(e){var t=e._currentValue;if(xo!==e)if(e={context:e,memoizedValue:t,next:null},null===wo){if(null===bo)throw Error(o(308));wo=e,bo.dependencies={lanes:0,firstContext:e}}else wo=wo.next=e;return t}var Po=null;function Ao(e){null===Po?Po=[e]:Po.push(e)}function Oo(e,t,r,n){var a=t.interleaved;return null===a?(r.next=r,Ao(t)):(r.next=a.next,a.next=r),t.interleaved=r,To(e,n)}function To(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}var _o=!1;function Mo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Lo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Do(e,t,r){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,0!=(2&Al)){var a=n.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),n.pending=t,To(e,r)}return null===(a=n.interleaved)?(t.next=t,Ao(n)):(t.next=a.next,a.next=t),n.interleaved=t,To(e,r)}function No(e,t,r){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&r))){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,yt(e,r)}}function jo(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var a=null,o=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===o?a=o=i:o=o.next=i,r=r.next}while(null!==r);null===o?a=o=t:o=o.next=t}else a=o=t;return r={baseState:n.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function Uo(e,t,r,n){var a=e.updateQueue;_o=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var l=u,s=l.next;l.next=null,null===i?o=s:i.next=s,i=l;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=l)}if(null!==o){var f=a.baseState;for(i=0,c=s=l=null,u=o;;){var d=u.lane,p=u.eventTime;if((n&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,v=u;switch(d=t,p=r,v.tag){case 1:if("function"==typeof(h=v.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=v.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:_o=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=p,l=f):c=c.next=p,i|=d;if(null===(u=u.next)){if(null===(u=a.shared.pending))break;u=(d=u).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(l=f),a.baseState=l,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Nl|=i,e.lanes=i,e.memoizedState=f}}function Fo(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],a=n.callback;if(null!==a){if(n.callback=null,n=r,"function"!=typeof a)throw Error(o(191,a));a.call(n)}}}var zo=(new n.Component).refs;function Bo(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:j({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var Wo={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=es(),a=ts(e),o=Lo(n,a);o.payload=t,null!=r&&(o.callback=r),null!==(t=Do(e,o,a))&&(rs(t,e,a,n),No(t,e,a))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=es(),a=ts(e),o=Lo(n,a);o.tag=1,o.payload=t,null!=r&&(o.callback=r),null!==(t=Do(e,o,a))&&(rs(t,e,a,n),No(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=es(),n=ts(e),a=Lo(r,n);a.tag=2,null!=t&&(a.callback=t),null!==(t=Do(e,a,n))&&(rs(t,e,n,r),No(t,e,n))}};function Vo(e,t,r,n,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ln(r,n)&&ln(a,o))}function Ho(e,t,r){var n=!1,a=Pa,o=t.contextType;return"object"==typeof o&&null!==o?o=Co(o):(a=Ma(t)?Ta:Aa.current,o=(n=null!=(n=t.contextTypes))?_a(e,a):Pa),t=new t(r,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Wo,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function $o(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&Wo.enqueueReplaceState(t,t.state,null)}function qo(e,t,r,n){var a=e.stateNode;a.props=r,a.state=e.memoizedState,a.refs=zo,Mo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Co(o):(o=Ma(t)?Ta:Aa.current,a.context=_a(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Bo(e,t,o,r),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Wo.enqueueReplaceState(a,a.state,null),Uo(e,r,a,n),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Qo(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(o(309));var n=r.stateNode}if(!n)throw Error(o(147,e));var a=n,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===zo&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!r._owner)throw Error(o(290,e))}return e}function Go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Yo(e){return(0,e._init)(e._payload)}function Ko(e){function t(t,r){if(e){var n=t.deletions;null===n?(t.deletions=[r],t.flags|=16):n.push(r)}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Is(e,t)).index=0,e.sibling=null,e}function i(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags|=2,r):n:(t.flags|=2,r):(t.flags|=1048576,r)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,r,n){return null===t||6!==t.tag?((t=js(r,e.mode,n)).return=e,t):((t=a(t,r)).return=e,t)}function s(e,t,r,n){var o=r.type;return o===E?f(e,t,r.props.children,n,r.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===M&&Yo(o)===t.type)?((n=a(t,r.props)).ref=Qo(e,t,r),n.return=e,n):((n=Ls(r.type,r.key,r.props,null,e.mode,n)).ref=Qo(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Us(r,e.mode,n)).return=e,t):((t=a(t,r.children||[])).return=e,t)}function f(e,t,r,n,o){return null===t||7!==t.tag?((t=Ds(r,e.mode,n,o)).return=e,t):((t=a(t,r)).return=e,t)}function d(e,t,r){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=js(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(r=Ls(t.type,t.key,t.props,null,e.mode,r)).ref=Qo(e,null,t),r.return=e,r;case S:return(t=Us(t,e.mode,r)).return=e,t;case M:return d(e,(0,t._init)(t._payload),r)}if(te(t)||D(t))return(t=Ds(t,e.mode,r,null)).return=e,t;Go(e,t)}return null}function p(e,t,r,n){var a=null!==t?t.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==a?null:l(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return r.key===a?s(e,t,r,n):null;case S:return r.key===a?c(e,t,r,n):null;case M:return p(e,t,(a=r._init)(r._payload),n)}if(te(r)||D(r))return null!==a?null:f(e,t,r,n,null);Go(e,r)}return null}function h(e,t,r,n,a){if("string"==typeof n&&""!==n||"number"==typeof n)return l(t,e=e.get(r)||null,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,a);case S:return c(t,e=e.get(null===n.key?r:n.key)||null,n,a);case M:return h(e,t,r,(0,n._init)(n._payload),a)}if(te(n)||D(n))return f(t,e=e.get(r)||null,n,a,null);Go(t,n)}return null}function v(a,o,u,l){for(var s=null,c=null,f=o,v=o=0,g=null;null!==f&&v<u.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var m=p(a,f,u[v],l);if(null===m){null===f&&(f=g);break}e&&f&&null===m.alternate&&t(a,f),o=i(m,o,v),null===c?s=m:c.sibling=m,c=m,f=g}if(v===u.length)return r(a,f),ao&&Ja(a,v),s;if(null===f){for(;v<u.length;v++)null!==(f=d(a,u[v],l))&&(o=i(f,o,v),null===c?s=f:c.sibling=f,c=f);return ao&&Ja(a,v),s}for(f=n(a,f);v<u.length;v++)null!==(g=h(f,a,v,u[v],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?v:g.key),o=i(g,o,v),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(a,e)})),ao&&Ja(a,v),s}function g(a,u,l,s){var c=D(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var f=c=null,v=u,g=u=0,m=null,y=l.next();null!==v&&!y.done;g++,y=l.next()){v.index>g?(m=v,v=null):m=v.sibling;var b=p(a,v,y.value,s);if(null===b){null===v&&(v=m);break}e&&v&&null===b.alternate&&t(a,v),u=i(b,u,g),null===f?c=b:f.sibling=b,f=b,v=m}if(y.done)return r(a,v),ao&&Ja(a,g),c;if(null===v){for(;!y.done;g++,y=l.next())null!==(y=d(a,y.value,s))&&(u=i(y,u,g),null===f?c=y:f.sibling=y,f=y);return ao&&Ja(a,g),c}for(v=n(a,v);!y.done;g++,y=l.next())null!==(y=h(v,a,g,y.value,s))&&(e&&null!==y.alternate&&v.delete(null===y.key?g:y.key),u=i(y,u,g),null===f?c=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(a,e)})),ao&&Ja(a,g),c}return function e(n,o,i,l){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===E){if(7===c.tag){r(n,c.sibling),(o=a(c,i.props.children)).return=n,n=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===M&&Yo(s)===c.type){r(n,c.sibling),(o=a(c,i.props)).ref=Qo(n,c,i),o.return=n,n=o;break e}r(n,c);break}t(n,c),c=c.sibling}i.type===E?((o=Ds(i.props.children,n.mode,l,i.key)).return=n,n=o):((l=Ls(i.type,i.key,i.props,null,n.mode,l)).ref=Qo(n,o,i),l.return=n,n=l)}return u(n);case S:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){r(n,o.sibling),(o=a(o,i.children||[])).return=n,n=o;break e}r(n,o);break}t(n,o),o=o.sibling}(o=Us(i,n.mode,l)).return=n,n=o}return u(n);case M:return e(n,o,(c=i._init)(i._payload),l)}if(te(i))return v(n,o,i,l);if(D(i))return g(n,o,i,l);Go(n,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(r(n,o.sibling),(o=a(o,i)).return=n,n=o):(r(n,o),(o=js(i,n.mode,l)).return=n,n=o),u(n)):r(n,o)}}var Xo=Ko(!0),Jo=Ko(!1),Zo={},ei=ka(Zo),ti=ka(Zo),ri=ka(Zo);function ni(e){if(e===Zo)throw Error(o(174));return e}function ai(e,t){switch(Ca(ri,t),Ca(ti,e),Ca(ei,Zo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ra(ei),Ca(ei,t)}function oi(){Ra(ei),Ra(ti),Ra(ri)}function ii(e){ni(ri.current);var t=ni(ei.current),r=le(t,e.type);t!==r&&(Ca(ti,e),Ca(ei,r))}function ui(e){ti.current===e&&(Ra(ei),Ra(ti))}var li=ka(0);function si(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function fi(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,vi=null,gi=null,mi=null,yi=!1,bi=!1,wi=0,xi=0;function Si(){throw Error(o(321))}function Ei(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!un(e[r],t[r]))return!1;return!0}function ki(e,t,r,n,a,i){if(hi=i,vi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?uu:lu,e=r(n,a),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(o(301));i+=1,mi=gi=null,t.updateQueue=null,di.current=su,e=r(n,a)}while(bi)}if(di.current=iu,t=null!==gi&&null!==gi.next,hi=0,mi=gi=vi=null,yi=!1,t)throw Error(o(300));return e}function Ri(){var e=0!==wi;return wi=0,e}function Ci(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===mi?vi.memoizedState=mi=e:mi=mi.next=e,mi}function Pi(){if(null===gi){var e=vi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===mi?vi.memoizedState:mi.next;if(null!==t)mi=t,gi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===mi?vi.memoizedState=mi=e:mi=mi.next=e}return mi}function Ai(e,t){return"function"==typeof t?t(e):t}function Oi(e){var t=Pi(),r=t.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=e;var n=gi,a=n.baseQueue,i=r.pending;if(null!==i){if(null!==a){var u=a.next;a.next=i.next,i.next=u}n.baseQueue=a=i,r.pending=null}if(null!==a){i=a.next,n=n.baseState;var l=u=null,s=null,c=i;do{var f=c.lane;if((hi&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),n=c.hasEagerState?c.eagerState:e(n,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(l=s=d,u=n):s=s.next=d,vi.lanes|=f,Nl|=f}c=c.next}while(null!==c&&c!==i);null===s?u=n:s.next=l,un(n,t.memoizedState)||(wu=!0),t.memoizedState=n,t.baseState=u,t.baseQueue=s,r.lastRenderedState=n}if(null!==(e=r.interleaved)){a=e;do{i=a.lane,vi.lanes|=i,Nl|=i,a=a.next}while(a!==e)}else null===a&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function Ti(e){var t=Pi(),r=t.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=e;var n=r.dispatch,a=r.pending,i=t.memoizedState;if(null!==a){r.pending=null;var u=a=a.next;do{i=e(i,u.action),u=u.next}while(u!==a);un(i,t.memoizedState)||(wu=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),r.lastRenderedState=i}return[i,n]}function _i(){}function Mi(e,t){var r=vi,n=Pi(),a=t(),i=!un(n.memoizedState,a);if(i&&(n.memoizedState=a,wu=!0),n=n.queue,Hi(Di.bind(null,r,n,e),[e]),n.getSnapshot!==t||i||null!==mi&&1&mi.memoizedState.tag){if(r.flags|=2048,Fi(9,Li.bind(null,r,n,a,t),void 0,null),null===Ol)throw Error(o(349));0!=(30&hi)||Ii(r,t,a)}return a}function Ii(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},null===(t=vi.updateQueue)?(t={lastEffect:null,stores:null},vi.updateQueue=t,t.stores=[e]):null===(r=t.stores)?t.stores=[e]:r.push(e)}function Li(e,t,r,n){t.value=r,t.getSnapshot=n,Ni(t)&&ji(e)}function Di(e,t,r){return r((function(){Ni(t)&&ji(e)}))}function Ni(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!un(e,r)}catch(e){return!0}}function ji(e){var t=To(e,1);null!==t&&rs(t,e,1,-1)}function Ui(e){var t=Ci();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=ru.bind(null,vi,e),[t.memoizedState,e]}function Fi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=vi.updateQueue)?(t={lastEffect:null,stores:null},vi.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function zi(){return Pi().memoizedState}function Bi(e,t,r,n){var a=Ci();vi.flags|=e,a.memoizedState=Fi(1|t,r,void 0,void 0===n?null:n)}function Wi(e,t,r,n){var a=Pi();n=void 0===n?null:n;var o=void 0;if(null!==gi){var i=gi.memoizedState;if(o=i.destroy,null!==n&&Ei(n,i.deps))return void(a.memoizedState=Fi(t,r,o,n))}vi.flags|=e,a.memoizedState=Fi(1|t,r,o,n)}function Vi(e,t){return Bi(8390656,8,e,t)}function Hi(e,t){return Wi(2048,8,e,t)}function $i(e,t){return Wi(4,2,e,t)}function qi(e,t){return Wi(4,4,e,t)}function Qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gi(e,t,r){return r=null!=r?r.concat([e]):null,Wi(4,4,Qi.bind(null,t,e),r)}function Yi(){}function Ki(e,t){var r=Pi();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ei(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Xi(e,t){var r=Pi();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ei(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ji(e,t,r){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wu=!0),e.memoizedState=r):(un(r,t)||(r=vt(),vi.lanes|=r,Nl|=r,e.baseState=!0),t)}function Zi(e,t){var r=bt;bt=0!==r&&4>r?r:4,e(!0);var n=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=r,pi.transition=n}}function eu(){return Pi().memoizedState}function tu(e,t,r){var n=ts(e);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},nu(e)?au(t,r):null!==(r=Oo(e,t,r,n))&&(rs(r,e,n,es()),ou(r,t,n))}function ru(e,t,r){var n=ts(e),a={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(nu(e))au(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,u=o(i,r);if(a.hasEagerState=!0,a.eagerState=u,un(u,i)){var l=t.interleaved;return null===l?(a.next=a,Ao(t)):(a.next=l.next,l.next=a),void(t.interleaved=a)}}catch(e){}null!==(r=Oo(e,t,a,n))&&(rs(r,e,n,a=es()),ou(r,t,n))}}function nu(e){var t=e.alternate;return e===vi||null!==t&&t===vi}function au(e,t){bi=yi=!0;var r=e.pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function ou(e,t,r){if(0!=(4194240&r)){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,yt(e,r)}}var iu={readContext:Co,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},uu={readContext:Co,useCallback:function(e,t){return Ci().memoizedState=[e,void 0===t?null:t],e},useContext:Co,useEffect:Vi,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,Bi(4194308,4,Qi.bind(null,t,e),r)},useLayoutEffect:function(e,t){return Bi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bi(4,2,e,t)},useMemo:function(e,t){var r=Ci();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Ci();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=tu.bind(null,vi,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Ci().memoizedState=e},useState:Ui,useDebugValue:Yi,useDeferredValue:function(e){return Ci().memoizedState=e},useTransition:function(){var e=Ui(!1),t=e[0];return e=Zi.bind(null,e[1]),Ci().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=vi,a=Ci();if(ao){if(void 0===r)throw Error(o(407));r=r()}else{if(r=t(),null===Ol)throw Error(o(349));0!=(30&hi)||Ii(n,t,r)}a.memoizedState=r;var i={value:r,getSnapshot:t};return a.queue=i,Vi(Di.bind(null,n,i,e),[e]),n.flags|=2048,Fi(9,Li.bind(null,n,i,r,t),void 0,null),r},useId:function(){var e=Ci(),t=Ol.identifierPrefix;if(ao){var r=Xa;t=":"+t+"R"+(r=(Ka&~(1<<32-it(Ka)-1)).toString(32)+r),0<(r=wi++)&&(t+="H"+r.toString(32)),t+=":"}else t=":"+t+"r"+(r=xi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},lu={readContext:Co,useCallback:Ki,useContext:Co,useEffect:Hi,useImperativeHandle:Gi,useInsertionEffect:$i,useLayoutEffect:qi,useMemo:Xi,useReducer:Oi,useRef:zi,useState:function(){return Oi(Ai)},useDebugValue:Yi,useDeferredValue:function(e){return Ji(Pi(),gi.memoizedState,e)},useTransition:function(){return[Oi(Ai)[0],Pi().memoizedState]},useMutableSource:_i,useSyncExternalStore:Mi,useId:eu,unstable_isNewReconciler:!1},su={readContext:Co,useCallback:Ki,useContext:Co,useEffect:Hi,useImperativeHandle:Gi,useInsertionEffect:$i,useLayoutEffect:qi,useMemo:Xi,useReducer:Ti,useRef:zi,useState:function(){return Ti(Ai)},useDebugValue:Yi,useDeferredValue:function(e){var t=Pi();return null===gi?t.memoizedState=e:Ji(t,gi.memoizedState,e)},useTransition:function(){return[Ti(Ai)[0],Pi().memoizedState]},useMutableSource:_i,useSyncExternalStore:Mi,useId:eu,unstable_isNewReconciler:!1};function cu(e,t){try{var r="",n=t;do{r+=B(n),n=n.return}while(n);var a=r}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function fu(e,t,r){return{value:e,source:null,stack:null!=r?r:null,digest:null!=t?t:null}}function du(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,r){(r=Lo(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Hl||(Hl=!0,$l=n),du(0,t)},r}function vu(e,t,r){(r=Lo(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var a=t.value;r.payload=function(){return n(a)},r.callback=function(){du(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(r.callback=function(){du(0,t),"function"!=typeof n&&(null===ql?ql=new Set([this]):ql.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}function gu(e,t,r){var n=e.pingCache;if(null===n){n=e.pingCache=new pu;var a=new Set;n.set(t,a)}else void 0===(a=n.get(t))&&(a=new Set,n.set(t,a));a.has(r)||(a.add(r),e=Rs.bind(null,e,t,r),t.then(e,e))}function mu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yu(e,t,r,n,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((t=Lo(-1,1)).tag=2,Do(r,t,1))),r.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bu=w.ReactCurrentOwner,wu=!1;function xu(e,t,r,n){t.child=null===e?Jo(t,null,r,n):Xo(t,e.child,r,n)}function Su(e,t,r,n,a){r=r.render;var o=t.ref;return Ro(t,a),n=ki(e,t,r,n,o,a),r=Ri(),null===e||wu?(ao&&r&&eo(t),t.flags|=1,xu(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hu(e,t,a))}function Eu(e,t,r,n,a){if(null===e){var o=r.type;return"function"!=typeof o||Ms(o)||void 0!==o.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Ls(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,ku(e,t,o,n,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((r=null!==(r=r.compare)?r:ln)(i,n)&&e.ref===t.ref)return Hu(e,t,a)}return t.flags|=1,(e=Is(o,n)).ref=t.ref,e.return=t,t.child=e}function ku(e,t,r,n,a){if(null!==e){var o=e.memoizedProps;if(ln(o,n)&&e.ref===t.ref){if(wu=!1,t.pendingProps=n=o,0==(e.lanes&a))return t.lanes=e.lanes,Hu(e,t,a);0!=(131072&e.flags)&&(wu=!0)}}return Pu(e,t,r,n,a)}function Ru(e,t,r){var n=t.pendingProps,a=n.children,o=null!==e?e.memoizedState:null;if("hidden"===n.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ca(Il,Ml),Ml|=r;else{if(0==(1073741824&r))return e=null!==o?o.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ca(Il,Ml),Ml|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==o?o.baseLanes:r,Ca(Il,Ml),Ml|=n}else null!==o?(n=o.baseLanes|r,t.memoizedState=null):n=r,Ca(Il,Ml),Ml|=n;return xu(e,t,a,r),t.child}function Cu(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function Pu(e,t,r,n,a){var o=Ma(r)?Ta:Aa.current;return o=_a(t,o),Ro(t,a),r=ki(e,t,r,n,o,a),n=Ri(),null===e||wu?(ao&&n&&eo(t),t.flags|=1,xu(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hu(e,t,a))}function Au(e,t,r,n,a){if(Ma(r)){var o=!0;Na(t)}else o=!1;if(Ro(t,a),null===t.stateNode)Vu(e,t),Ho(t,r,n),qo(t,r,n,a),n=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=r.contextType;s="object"==typeof s&&null!==s?Co(s):_a(t,s=Ma(r)?Ta:Aa.current);var c=r.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==n||l!==s)&&$o(t,i,n,s),_o=!1;var d=t.memoizedState;i.state=d,Uo(t,n,i,a),l=t.memoizedState,u!==n||d!==l||Oa.current||_o?("function"==typeof c&&(Bo(t,r,c,n),l=t.memoizedState),(u=_o||Vo(t,r,u,n,d,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=l),i.props=n,i.state=l,i.context=s,n=u):("function"==typeof i.componentDidMount&&(t.flags|=4194308),n=!1)}else{i=t.stateNode,Io(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:mo(t.type,u),i.props=s,f=t.pendingProps,d=i.context,l="object"==typeof(l=r.contextType)&&null!==l?Co(l):_a(t,l=Ma(r)?Ta:Aa.current);var p=r.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||d!==l)&&$o(t,i,n,l),_o=!1,d=t.memoizedState,i.state=d,Uo(t,n,i,a);var h=t.memoizedState;u!==f||d!==h||Oa.current||_o?("function"==typeof p&&(Bo(t,r,p,n),h=t.memoizedState),(s=_o||Vo(t,r,s,n,d,h,l)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=l,n=s):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),n=!1)}return Ou(e,t,r,n,o,a)}function Ou(e,t,r,n,a,o){Cu(e,t);var i=0!=(128&t.flags);if(!n&&!i)return a&&ja(t,r,!1),Hu(e,t,o);n=t.stateNode,bu.current=t;var u=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,u,o)):xu(e,t,u,o),t.memoizedState=n.state,a&&ja(t,r,!0),t.child}function Tu(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),ai(e,t.containerInfo)}function _u(e,t,r,n,a){return ho(),vo(a),t.flags|=256,xu(e,t,r,n),t.child}var Mu,Iu,Lu,Du={dehydrated:null,treeContext:null,retryLane:0};function Nu(e){return{baseLanes:e,cachePool:null,transitions:null}}function ju(e,t,r){var n,a=t.pendingProps,i=li.current,u=!1,l=0!=(128&t.flags);if((n=l)||(n=(null===e||null!==e.memoizedState)&&0!=(2&i)),n?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ca(li,1&i),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=a.children,e=a.fallback,u?(a=t.mode,u=t.child,l={mode:"hidden",children:l},0==(1&a)&&null!==u?(u.childLanes=0,u.pendingProps=l):u=Ns(l,a,0,null),e=Ds(e,a,r,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Nu(r),t.memoizedState=Du,e):Uu(t,l));if(null!==(i=e.memoizedState)&&null!==(n=i.dehydrated))return function(e,t,r,n,a,i,u){if(r)return 256&t.flags?(t.flags&=-257,Fu(e,t,u,n=fu(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=n.fallback,a=t.mode,n=Ns({mode:"visible",children:n.children},a,0,null),(i=Ds(i,a,u,null)).flags|=2,n.return=t,i.return=t,n.sibling=i,t.child=n,0!=(1&t.mode)&&Xo(t,e.child,null,u),t.child.memoizedState=Nu(u),t.memoizedState=Du,i);if(0==(1&t.mode))return Fu(e,t,u,null);if("$!"===a.data){if(n=a.nextSibling&&a.nextSibling.dataset)var l=n.dgst;return n=l,Fu(e,t,u,n=fu(i=Error(o(419)),n,void 0))}if(l=0!=(u&e.childLanes),wu||l){if(null!==(n=Ol)){switch(u&-u){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(n.suspendedLanes|u))?0:a)&&a!==i.retryLane&&(i.retryLane=a,To(e,a),rs(n,e,a,-1))}return vs(),Fu(e,t,u,n=fu(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ps.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,no=sa(a.nextSibling),ro=t,ao=!0,oo=null,null!==e&&(Qa[Ga++]=Ka,Qa[Ga++]=Xa,Qa[Ga++]=Ya,Ka=e.id,Xa=e.overflow,Ya=t),(t=Uu(t,n.children)).flags|=4096,t)}(e,t,l,a,n,i,r);if(u){u=a.fallback,l=t.mode,n=(i=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&l)&&t.child!==i?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=Is(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==n?u=Is(n,u):(u=Ds(u,l,r,null)).flags|=2,u.return=t,a.return=t,a.sibling=u,t.child=a,a=u,u=t.child,l=null===(l=e.child.memoizedState)?Nu(r):{baseLanes:l.baseLanes|r,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~r,t.memoizedState=Du,a}return e=(u=e.child).sibling,a=Is(u,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=r),a.return=t,a.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=a,t.memoizedState=null,a}function Uu(e,t){return(t=Ns({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fu(e,t,r,n){return null!==n&&vo(n),Xo(t,e.child,null,r),(e=Uu(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zu(e,t,r){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ko(e.return,t,r)}function Bu(e,t,r,n,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=n,o.tail=r,o.tailMode=a)}function Wu(e,t,r){var n=t.pendingProps,a=n.revealOrder,o=n.tail;if(xu(e,t,n.children,r),0!=(2&(n=li.current)))n=1&n|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zu(e,r,t);else if(19===e.tag)zu(e,r,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(Ca(li,n),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(r=t.child,a=null;null!==r;)null!==(e=r.alternate)&&null===si(e)&&(a=r),r=r.sibling;null===(r=a)?(a=t.child,t.child=null):(a=r.sibling,r.sibling=null),Bu(t,!1,a,r,o);break;case"backwards":for(r=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===si(e)){t.child=a;break}e=a.sibling,a.sibling=r,r=a,a=e}Bu(t,!0,r,null,o);break;case"together":Bu(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vu(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hu(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Nl|=t.lanes,0==(r&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(r=Is(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Is(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function $u(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function qu(e){var t=null!==e.alternate&&e.alternate.child===e.child,r=0,n=0;if(t)for(var a=e.child;null!==a;)r|=a.lanes|a.childLanes,n|=14680064&a.subtreeFlags,n|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)r|=a.lanes|a.childLanes,n|=a.subtreeFlags,n|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}function Qu(e,t,r){var n=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qu(t),null;case 1:case 17:return Ma(t.type)&&Ia(),qu(t),null;case 3:return n=t.stateNode,oi(),Ra(Oa),Ra(Aa),fi(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(is(oo),oo=null))),qu(t),null;case 5:ui(t);var a=ni(ri.current);if(r=t.type,null!==e&&null!=t.stateNode)Iu(e,t,r,n),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(o(166));return qu(t),null}if(e=ni(ei.current),fo(t)){n=t.stateNode,r=t.type;var i=t.memoizedProps;switch(n[da]=t,n[pa]=i,e=0!=(1&t.mode),r){case"dialog":Fn("cancel",n),Fn("close",n);break;case"iframe":case"object":case"embed":Fn("load",n);break;case"video":case"audio":for(a=0;a<Dn.length;a++)Fn(Dn[a],n);break;case"source":Fn("error",n);break;case"img":case"image":case"link":Fn("error",n),Fn("load",n);break;case"details":Fn("toggle",n);break;case"input":K(n,i),Fn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!i.multiple},Fn("invalid",n);break;case"textarea":ae(n,i),Fn("invalid",n)}for(var l in ye(r,i),a=null,i)if(i.hasOwnProperty(l)){var s=i[l];"children"===l?"string"==typeof s?n.textContent!==s&&(!0!==i.suppressHydrationWarning&&Jn(n.textContent,s,e),a=["children",s]):"number"==typeof s&&n.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Jn(n.textContent,s,e),a=["children",""+s]):u.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&Fn("scroll",n)}switch(r){case"input":q(n),Z(n,i,!0);break;case"textarea":q(n),ie(n);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(n.onclick=Zn)}n=a,t.updateQueue=n,null!==n&&(t.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(r)),"http://www.w3.org/1999/xhtml"===e?"script"===r?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=l.createElement(r,{is:n.is}):(e=l.createElement(r),"select"===r&&(l=e,n.multiple?l.multiple=!0:n.size&&(l.size=n.size))):e=l.createElementNS(e,r),e[da]=t,e[pa]=n,Mu(e,t),t.stateNode=e;e:{switch(l=be(r,n),r){case"dialog":Fn("cancel",e),Fn("close",e),a=n;break;case"iframe":case"object":case"embed":Fn("load",e),a=n;break;case"video":case"audio":for(a=0;a<Dn.length;a++)Fn(Dn[a],e);a=n;break;case"source":Fn("error",e),a=n;break;case"img":case"image":case"link":Fn("error",e),Fn("load",e),a=n;break;case"details":Fn("toggle",e),a=n;break;case"input":K(e,n),a=Y(e,n),Fn("invalid",e);break;case"option":default:a=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=j({},n,{value:void 0}),Fn("invalid",e);break;case"textarea":ae(e,n),a=ne(e,n),Fn("invalid",e)}for(i in ye(r,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==r||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(u.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fn("scroll",e):null!=c&&b(e,i,c,l))}switch(r){case"input":q(e),Z(e,n,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=n.value&&e.setAttribute("value",""+H(n.value));break;case"select":e.multiple=!!n.multiple,null!=(i=n.value)?re(e,!!n.multiple,i,!1):null!=n.defaultValue&&re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zn)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return qu(t),null;case 6:if(e&&null!=t.stateNode)Lu(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(o(166));if(r=ni(ri.current),ni(ei.current),fo(t)){if(n=t.stateNode,r=t.memoizedProps,n[da]=t,(i=n.nodeValue!==r)&&null!==(e=ro))switch(e.tag){case 3:Jn(n.nodeValue,r,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jn(n.nodeValue,r,0!=(1&e.mode))}i&&(t.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[da]=t,t.stateNode=n}return qu(t),null;case 13:if(Ra(li),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==no&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,i=!1;else if(i=fo(t),null!==n&&null!==n.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[da]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qu(t),i=!1}else null!==oo&&(is(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=r,t):((n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&li.current)?0===Ll&&(Ll=3):vs())),null!==t.updateQueue&&(t.flags|=4),qu(t),null);case 4:return oi(),null===e&&Wn(t.stateNode.containerInfo),qu(t),null;case 10:return Eo(t.type._context),qu(t),null;case 19:if(Ra(li),null===(i=t.memoizedState))return qu(t),null;if(n=0!=(128&t.flags),null===(l=i.rendering))if(n)$u(i,!1);else{if(0!==Ll||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=si(e))){for(t.flags|=128,$u(i,!1),null!==(n=l.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;null!==r;)e=n,(i=r).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return Ca(li,1&li.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Wl&&(t.flags|=128,n=!0,$u(i,!1),t.lanes=4194304)}else{if(!n)if(null!==(e=si(l))){if(t.flags|=128,n=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),$u(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!ao)return qu(t),null}else 2*Xe()-i.renderingStartTime>Wl&&1073741824!==r&&(t.flags|=128,n=!0,$u(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=i.last)?r.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,r=li.current,Ca(li,n?1&r|2:1&r),t):(qu(t),null);case 22:case 23:return fs(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&0!=(1&t.mode)?0!=(1073741824&Ml)&&(qu(t),6&t.subtreeFlags&&(t.flags|=8192)):qu(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Gu(e,t){switch(to(t),t.tag){case 1:return Ma(t.type)&&Ia(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oi(),Ra(Oa),Ra(Aa),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ui(t),null;case 13:if(Ra(li),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ra(li),null;case 4:return oi(),null;case 10:return Eo(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Mu=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Iu=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,ni(ei.current);var o,i=null;switch(r){case"input":a=Y(e,a),n=Y(e,n),i=[];break;case"select":a=j({},a,{value:void 0}),n=j({},n,{value:void 0}),i=[];break;case"textarea":a=ne(e,a),n=ne(e,n),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof n.onClick&&(e.onclick=Zn)}for(c in ye(r,n),r=null,a)if(!n.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var l=a[c];for(o in l)l.hasOwnProperty(o)&&(r||(r={}),r[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in n){var s=n[c];if(l=null!=a?a[c]:void 0,n.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(o in l)!l.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(r||(r={}),r[o]="");for(o in s)s.hasOwnProperty(o)&&l[o]!==s[o]&&(r||(r={}),r[o]=s[o])}else r||(i||(i=[]),i.push(c,r)),r=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fn("scroll",e),i||l===s||(i=[])):(i=i||[]).push(c,s))}r&&(i=i||[]).push("style",r);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Lu=function(e,t,r,n){r!==n&&(t.flags|=4)};var Yu=!1,Ku=!1,Xu="function"==typeof WeakSet?WeakSet:Set,Ju=null;function Zu(e,t){var r=e.ref;if(null!==r)if("function"==typeof r)try{r(null)}catch(r){ks(e,t,r)}else r.current=null}function el(e,t,r){try{r()}catch(r){ks(e,t,r)}}var tl=!1;function rl(e,t,r){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var a=n=n.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&el(t,r,o)}a=a.next}while(a!==n)}}function nl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function al(e){var t=e.ref;if(null!==t){var r=e.stateNode;e.tag,e=r,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[va],delete t[ga],delete t[ma]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function il(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||il(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Zn));else if(4!==n&&null!==(e=e.child))for(ll(e,t,r),e=e.sibling;null!==e;)ll(e,t,r),e=e.sibling}function sl(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(sl(e,t,r),e=e.sibling;null!==e;)sl(e,t,r),e=e.sibling}var cl=null,fl=!1;function dl(e,t,r){for(r=r.child;null!==r;)pl(e,t,r),r=r.sibling}function pl(e,t,r){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,r)}catch(e){}switch(r.tag){case 5:Ku||Zu(r,t);case 6:var n=cl,a=fl;cl=null,dl(e,t,r),fl=a,null!==(cl=n)&&(fl?(e=cl,r=r.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)):cl.removeChild(r.stateNode));break;case 18:null!==cl&&(fl?(e=cl,r=r.stateNode,8===e.nodeType?la(e.parentNode,r):1===e.nodeType&&la(e,r),Wt(e)):la(cl,r.stateNode));break;case 4:n=cl,a=fl,cl=r.stateNode.containerInfo,fl=!0,dl(e,t,r),cl=n,fl=a;break;case 0:case 11:case 14:case 15:if(!Ku&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){a=n=n.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&el(r,t,i),a=a.next}while(a!==n)}dl(e,t,r);break;case 1:if(!Ku&&(Zu(r,t),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(e){ks(r,t,e)}dl(e,t,r);break;case 21:dl(e,t,r);break;case 22:1&r.mode?(Ku=(n=Ku)||null!==r.memoizedState,dl(e,t,r),Ku=n):dl(e,t,r);break;default:dl(e,t,r)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Xu),t.forEach((function(t){var n=As.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function vl(e,t){var r=t.deletions;if(null!==r)for(var n=0;n<r.length;n++){var a=r[n];try{var i=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(o(160));pl(i,u,a),cl=null,fl=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){ks(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gl(t,e),t=t.sibling}function gl(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vl(t,e),ml(e),4&n){try{rl(3,e,e.return),nl(3,e)}catch(t){ks(e,e.return,t)}try{rl(5,e,e.return)}catch(t){ks(e,e.return,t)}}break;case 1:vl(t,e),ml(e),512&n&&null!==r&&Zu(r,r.return);break;case 5:if(vl(t,e),ml(e),512&n&&null!==r&&Zu(r,r.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){ks(e,e.return,t)}}if(4&n&&null!=(a=e.stateNode)){var i=e.memoizedProps,u=null!==r?r.memoizedProps:i,l=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===l&&"radio"===i.type&&null!=i.name&&X(a,i),be(l,u);var c=be(l,i);for(u=0;u<s.length;u+=2){var f=s[u],d=s[u+1];"style"===f?ge(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(l){case"input":J(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?re(a,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?re(a,!!i.multiple,i.defaultValue,!0):re(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){ks(e,e.return,t)}}break;case 6:if(vl(t,e),ml(e),4&n){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){ks(e,e.return,t)}}break;case 3:if(vl(t,e),ml(e),4&n&&null!==r&&r.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){ks(e,e.return,t)}break;case 4:default:vl(t,e),ml(e);break;case 13:vl(t,e),ml(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Bl=Xe())),4&n&&hl(e);break;case 22:if(f=null!==r&&null!==r.memoizedState,1&e.mode?(Ku=(c=Ku)||f,vl(t,e),Ku=c):vl(t,e),ml(e),8192&n){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Ju=e,f=e.child;null!==f;){for(d=Ju=f;null!==Ju;){switch(h=(p=Ju).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:Zu(p,p.return);var v=p.stateNode;if("function"==typeof v.componentWillUnmount){n=p,r=p.return;try{t=n,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(e){ks(n,r,e)}}break;case 5:Zu(p,p.return);break;case 22:if(null!==p.memoizedState){xl(d);continue}}null!==h?(h.return=p,Ju=h):xl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=d.stateNode,u=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,l.style.display=ve("display",u))}catch(t){ks(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){ks(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vl(t,e),ml(e),4&n&&hl(e);case 21:}}function ml(e){var t=e.flags;if(2&t){try{e:{for(var r=e.return;null!==r;){if(il(r)){var n=r;break e}r=r.return}throw Error(o(160))}switch(n.tag){case 5:var a=n.stateNode;32&n.flags&&(de(a,""),n.flags&=-33),sl(e,ul(e),a);break;case 3:case 4:var i=n.stateNode.containerInfo;ll(e,ul(e),i);break;default:throw Error(o(161))}}catch(t){ks(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,r){Ju=e,bl(e,t,r)}function bl(e,t,r){for(var n=0!=(1&e.mode);null!==Ju;){var a=Ju,o=a.child;if(22===a.tag&&n){var i=null!==a.memoizedState||Yu;if(!i){var u=a.alternate,l=null!==u&&null!==u.memoizedState||Ku;u=Yu;var s=Ku;if(Yu=i,(Ku=l)&&!s)for(Ju=a;null!==Ju;)l=(i=Ju).child,22===i.tag&&null!==i.memoizedState?Sl(a):null!==l?(l.return=i,Ju=l):Sl(a);for(;null!==o;)Ju=o,bl(o,t,r),o=o.sibling;Ju=a,Yu=u,Ku=s}wl(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Ju=o):wl(e)}}function wl(e){for(;null!==Ju;){var t=Ju;if(0!=(8772&t.flags)){var r=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ku||nl(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!Ku)if(null===r)n.componentDidMount();else{var a=t.elementType===t.type?r.memoizedProps:mo(t.type,r.memoizedProps);n.componentDidUpdate(a,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fo(t,i,n);break;case 3:var u=t.updateQueue;if(null!==u){if(r=null,null!==t.child)switch(t.child.tag){case 5:case 1:r=t.child.stateNode}Fo(t,u,r)}break;case 5:var l=t.stateNode;if(null===r&&4&t.flags){r=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&r.focus();break;case"img":s.src&&(r.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(o(163))}Ku||512&t.flags&&al(t)}catch(e){ks(t,t.return,e)}}if(t===e){Ju=null;break}if(null!==(r=t.sibling)){r.return=t.return,Ju=r;break}Ju=t.return}}function xl(e){for(;null!==Ju;){var t=Ju;if(t===e){Ju=null;break}var r=t.sibling;if(null!==r){r.return=t.return,Ju=r;break}Ju=t.return}}function Sl(e){for(;null!==Ju;){var t=Ju;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{nl(4,t)}catch(e){ks(t,r,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var a=t.return;try{n.componentDidMount()}catch(e){ks(t,a,e)}}var o=t.return;try{al(t)}catch(e){ks(t,o,e)}break;case 5:var i=t.return;try{al(t)}catch(e){ks(t,i,e)}}}catch(e){ks(t,t.return,e)}if(t===e){Ju=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Ju=u;break}Ju=t.return}}var El,kl=Math.ceil,Rl=w.ReactCurrentDispatcher,Cl=w.ReactCurrentOwner,Pl=w.ReactCurrentBatchConfig,Al=0,Ol=null,Tl=null,_l=0,Ml=0,Il=ka(0),Ll=0,Dl=null,Nl=0,jl=0,Ul=0,Fl=null,zl=null,Bl=0,Wl=1/0,Vl=null,Hl=!1,$l=null,ql=null,Ql=!1,Gl=null,Yl=0,Kl=0,Xl=null,Jl=-1,Zl=0;function es(){return 0!=(6&Al)?Xe():-1!==Jl?Jl:Jl=Xe()}function ts(e){return 0==(1&e.mode)?1:0!=(2&Al)&&0!==_l?_l&-_l:null!==go.transition?(0===Zl&&(Zl=vt()),Zl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function rs(e,t,r,n){if(50<Kl)throw Kl=0,Xl=null,Error(o(185));mt(e,r,n),0!=(2&Al)&&e===Ol||(e===Ol&&(0==(2&Al)&&(jl|=r),4===Ll&&us(e,_l)),ns(e,n),1===r&&0===Al&&0==(1&t.mode)&&(Wl=Xe()+500,Fa&&Wa()))}function ns(e,t){var r=e.callbackNode;!function(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),u=1<<i,l=a[i];-1===l?0!=(u&r)&&0==(u&n)||(a[i]=pt(u,t)):l<=t&&(e.expiredLanes|=u),o&=~u}}(e,t);var n=dt(e,e===Ol?_l:0);if(0===n)null!==r&&Ge(r),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(null!=r&&Ge(r),1===t)0===e.tag?function(e){Fa=!0,Ba(e)}(ls.bind(null,e)):Ba(ls.bind(null,e)),ia((function(){0==(6&Al)&&Wa()})),r=null;else{switch(wt(n)){case 1:r=Ze;break;case 4:r=et;break;case 16:default:r=tt;break;case 536870912:r=nt}r=Os(r,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function as(e,t){if(Jl=-1,Zl=0,0!=(6&Al))throw Error(o(327));var r=e.callbackNode;if(Ss()&&e.callbackNode!==r)return null;var n=dt(e,e===Ol?_l:0);if(0===n)return null;if(0!=(30&n)||0!=(n&e.expiredLanes)||t)t=gs(e,n);else{t=n;var a=Al;Al|=2;var i=hs();for(Ol===e&&_l===t||(Vl=null,Wl=Xe()+500,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}So(),Rl.current=i,Al=a,null!==Tl?t=0:(Ol=null,_l=0,t=Ll)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(n=a,t=os(e,a)),1===t)throw r=Dl,ds(e,0),us(e,n),ns(e,Xe()),r;if(6===t)us(e,n);else{if(a=e.current.alternate,0==(30&n)&&!function(e){for(var t=e;;){if(16384&t.flags){var r=t.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var a=r[n],o=a.getSnapshot;a=a.value;try{if(!un(o(),a))return!1}catch(e){return!1}}}if(r=t.child,16384&t.subtreeFlags&&null!==r)r.return=t,t=r;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=gs(e,n))&&0!==(i=ht(e))&&(n=i,t=os(e,i)),1===t))throw r=Dl,ds(e,0),us(e,n),ns(e,Xe()),r;switch(e.finishedWork=a,e.finishedLanes=n,t){case 0:case 1:throw Error(o(345));case 2:case 5:xs(e,zl,Vl);break;case 3:if(us(e,n),(130023424&n)===n&&10<(t=Bl+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=na(xs.bind(null,e,zl,Vl),t);break}xs(e,zl,Vl);break;case 4:if(us(e,n),(4194240&n)===n)break;for(t=e.eventTimes,a=-1;0<n;){var u=31-it(n);i=1<<u,(u=t[u])>a&&(a=u),n&=~i}if(n=a,10<(n=(120>(n=Xe()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*kl(n/1960))-n)){e.timeoutHandle=na(xs.bind(null,e,zl,Vl),n);break}xs(e,zl,Vl);break;default:throw Error(o(329))}}}return ns(e,Xe()),e.callbackNode===r?as.bind(null,e):null}function os(e,t){var r=Fl;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=gs(e,t))&&(t=zl,zl=r,null!==t&&is(t)),e}function is(e){null===zl?zl=e:zl.push.apply(zl,e)}function us(e,t){for(t&=~Ul,t&=~jl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-it(t),n=1<<r;e[r]=-1,t&=~n}}function ls(e){if(0!=(6&Al))throw Error(o(327));Ss();var t=dt(e,0);if(0==(1&t))return ns(e,Xe()),null;var r=gs(e,t);if(0!==e.tag&&2===r){var n=ht(e);0!==n&&(t=n,r=os(e,n))}if(1===r)throw r=Dl,ds(e,0),us(e,t),ns(e,Xe()),r;if(6===r)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xs(e,zl,Vl),ns(e,Xe()),null}function ss(e,t){var r=Al;Al|=1;try{return e(t)}finally{0===(Al=r)&&(Wl=Xe()+500,Fa&&Wa())}}function cs(e){null!==Gl&&0===Gl.tag&&0==(6&Al)&&Ss();var t=Al;Al|=1;var r=Pl.transition,n=bt;try{if(Pl.transition=null,bt=1,e)return e()}finally{bt=n,Pl.transition=r,0==(6&(Al=t))&&Wa()}}function fs(){Ml=Il.current,Ra(Il)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,aa(r)),null!==Tl)for(r=Tl.return;null!==r;){var n=r;switch(to(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Ia();break;case 3:oi(),Ra(Oa),Ra(Aa),fi();break;case 5:ui(n);break;case 4:oi();break;case 13:case 19:Ra(li);break;case 10:Eo(n.type._context);break;case 22:case 23:fs()}r=r.return}if(Ol=e,Tl=e=Is(e.current,null),_l=Ml=t,Ll=0,Dl=null,Ul=jl=Nl=0,zl=Fl=null,null!==Po){for(t=0;t<Po.length;t++)if(null!==(n=(r=Po[t]).interleaved)){r.interleaved=null;var a=n.next,o=r.pending;if(null!==o){var i=o.next;o.next=a,n.next=i}r.pending=n}Po=null}return e}function ps(e,t){for(;;){var r=Tl;try{if(So(),di.current=iu,yi){for(var n=vi.memoizedState;null!==n;){var a=n.queue;null!==a&&(a.pending=null),n=n.next}yi=!1}if(hi=0,mi=gi=vi=null,bi=!1,wi=0,Cl.current=null,null===r||null===r.return){Ll=1,Dl=t,Tl=null;break}e:{var i=e,u=r.return,l=r,s=t;if(t=_l,l.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=l,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=mu(u);if(null!==h){h.flags&=-257,yu(h,u,l,0,t),1&h.mode&&gu(i,c,t),s=c;var v=(t=h).updateQueue;if(null===v){var g=new Set;g.add(s),t.updateQueue=g}else v.add(s);break e}if(0==(1&t)){gu(i,c,t),vs();break e}s=Error(o(426))}else if(ao&&1&l.mode){var m=mu(u);if(null!==m){0==(65536&m.flags)&&(m.flags|=256),yu(m,u,l,0,t),vo(cu(s,l));break e}}i=s=cu(s,l),4!==Ll&&(Ll=2),null===Fl?Fl=[i]:Fl.push(i),i=u;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,jo(i,hu(0,s,t));break e;case 1:l=s;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===ql||!ql.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,jo(i,vu(i,l,t));break e}}i=i.return}while(null!==i)}ws(r)}catch(e){t=e,Tl===r&&null!==r&&(Tl=r=r.return);continue}break}}function hs(){var e=Rl.current;return Rl.current=iu,null===e?iu:e}function vs(){0!==Ll&&3!==Ll&&2!==Ll||(Ll=4),null===Ol||0==(268435455&Nl)&&0==(268435455&jl)||us(Ol,_l)}function gs(e,t){var r=Al;Al|=2;var n=hs();for(Ol===e&&_l===t||(Vl=null,ds(e,t));;)try{ms();break}catch(t){ps(e,t)}if(So(),Al=r,Rl.current=n,null!==Tl)throw Error(o(261));return Ol=null,_l=0,Ll}function ms(){for(;null!==Tl;)bs(Tl)}function ys(){for(;null!==Tl&&!Ye();)bs(Tl)}function bs(e){var t=El(e.alternate,e,Ml);e.memoizedProps=e.pendingProps,null===t?ws(e):Tl=t,Cl.current=null}function ws(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(r=Qu(r,t,Ml)))return void(Tl=r)}else{if(null!==(r=Gu(r,t)))return r.flags&=32767,void(Tl=r);if(null===e)return Ll=6,void(Tl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tl=t);Tl=t=e}while(null!==t);0===Ll&&(Ll=5)}function xs(e,t,r){var n=bt,a=Pl.transition;try{Pl.transition=null,bt=1,function(e,t,r,n){do{Ss()}while(null!==Gl);if(0!=(6&Al))throw Error(o(327));r=e.finishedWork;var a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var a=31-it(r),o=1<<a;t[a]=0,n[a]=-1,e[a]=-1,r&=~o}}(e,i),e===Ol&&(Tl=Ol=null,_l=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ql||(Ql=!0,Os(tt,(function(){return Ss(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=Pl.transition,Pl.transition=null;var u=bt;bt=1;var l=Al;Al|=4,Cl.current=null,function(e,t){if(ea=Ht,pn(e=dn())){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(r=(r=e.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var a=n.anchorOffset,i=n.focusNode;n=n.focusOffset;try{r.nodeType,i.nodeType}catch(e){r=null;break e}var u=0,l=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==r||0!==a&&3!==d.nodeType||(l=u+a),d!==i||0!==n&&3!==d.nodeType||(s=u+n),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===r&&++c===a&&(l=u),p===i&&++f===n&&(s=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}r=-1===l||-1===s?null:{start:l,end:s}}else r=null}r=r||{start:0,end:0}}else r=null;for(ta={focusedElem:e,selectionRange:r},Ht=!1,Ju=t;null!==Ju;)if(e=(t=Ju).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ju=e;else for(;null!==Ju;){t=Ju;try{var v=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==v){var g=v.memoizedProps,m=v.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:mo(t.type,g),m);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){ks(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ju=e;break}Ju=t.return}v=tl,tl=!1}(e,r),gl(r,e),hn(ta),Ht=!!ea,ta=ea=null,e.current=r,yl(r,e,a),Ke(),Al=l,bt=u,Pl.transition=i}else e.current=r;if(Ql&&(Ql=!1,Gl=e,Yl=a),0===(i=e.pendingLanes)&&(ql=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),ns(e,Xe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n((a=t[r]).value,{componentStack:a.stack,digest:a.digest});if(Hl)throw Hl=!1,e=$l,$l=null,e;0!=(1&Yl)&&0!==e.tag&&Ss(),0!=(1&(i=e.pendingLanes))?e===Xl?Kl++:(Kl=0,Xl=e):Kl=0,Wa()}(e,t,r,n)}finally{Pl.transition=a,bt=n}return null}function Ss(){if(null!==Gl){var e=wt(Yl),t=Pl.transition,r=bt;try{if(Pl.transition=null,bt=16>e?16:e,null===Gl)var n=!1;else{if(e=Gl,Gl=null,Yl=0,0!=(6&Al))throw Error(o(331));var a=Al;for(Al|=4,Ju=e.current;null!==Ju;){var i=Ju,u=i.child;if(0!=(16&Ju.flags)){var l=i.deletions;if(null!==l){for(var s=0;s<l.length;s++){var c=l[s];for(Ju=c;null!==Ju;){var f=Ju;switch(f.tag){case 0:case 11:case 15:rl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Ju=d;else for(;null!==Ju;){var p=(f=Ju).sibling,h=f.return;if(ol(f),f===c){Ju=null;break}if(null!==p){p.return=h,Ju=p;break}Ju=h}}}var v=i.alternate;if(null!==v){var g=v.child;if(null!==g){v.child=null;do{var m=g.sibling;g.sibling=null,g=m}while(null!==g)}}Ju=i}}if(0!=(2064&i.subtreeFlags)&&null!==u)u.return=i,Ju=u;else e:for(;null!==Ju;){if(0!=(2048&(i=Ju).flags))switch(i.tag){case 0:case 11:case 15:rl(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Ju=y;break e}Ju=i.return}}var b=e.current;for(Ju=b;null!==Ju;){var w=(u=Ju).child;if(0!=(2064&u.subtreeFlags)&&null!==w)w.return=u,Ju=w;else e:for(u=b;null!==Ju;){if(0!=(2048&(l=Ju).flags))try{switch(l.tag){case 0:case 11:case 15:nl(9,l)}}catch(e){ks(l,l.return,e)}if(l===u){Ju=null;break e}var x=l.sibling;if(null!==x){x.return=l.return,Ju=x;break e}Ju=l.return}}if(Al=a,Wa(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}n=!0}return n}finally{bt=r,Pl.transition=t}}return!1}function Es(e,t,r){e=Do(e,t=hu(0,t=cu(r,t),1),1),t=es(),null!==e&&(mt(e,1,t),ns(e,t))}function ks(e,t,r){if(3===e.tag)Es(e,e,r);else for(;null!==t;){if(3===t.tag){Es(t,e,r);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===ql||!ql.has(n))){t=Do(t,e=vu(t,e=cu(r,e),1),1),e=es(),null!==t&&(mt(t,1,e),ns(t,e));break}}t=t.return}}function Rs(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&r,Ol===e&&(_l&r)===r&&(4===Ll||3===Ll&&(130023424&_l)===_l&&500>Xe()-Bl?ds(e,0):Ul|=r),ns(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var r=es();null!==(e=To(e,t))&&(mt(e,t,r),ns(e,r))}function Ps(e){var t=e.memoizedState,r=0;null!==t&&(r=t.retryLane),Cs(e,r)}function As(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,a=e.memoizedState;null!==a&&(r=a.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(o(314))}null!==n&&n.delete(t),Cs(e,r)}function Os(e,t){return Qe(e,t)}function Ts(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _s(e,t,r,n){return new Ts(e,t,r,n)}function Ms(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Is(e,t){var r=e.alternate;return null===r?((r=_s(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&e.flags,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Ls(e,t,r,n,a,i){var u=2;if(n=e,"function"==typeof e)Ms(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Ds(r.children,a,i,t);case k:u=8,a|=8;break;case R:return(e=_s(12,r,t,2|a)).elementType=R,e.lanes=i,e;case O:return(e=_s(13,r,t,a)).elementType=O,e.lanes=i,e;case T:return(e=_s(19,r,t,a)).elementType=T,e.lanes=i,e;case I:return Ns(r,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case P:u=9;break e;case A:u=11;break e;case _:u=14;break e;case M:u=16,n=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=_s(u,r,t,a)).elementType=e,t.type=n,t.lanes=i,t}function Ds(e,t,r,n){return(e=_s(7,e,n,t)).lanes=r,e}function Ns(e,t,r,n){return(e=_s(22,e,n,t)).elementType=I,e.lanes=r,e.stateNode={isHidden:!1},e}function js(e,t,r){return(e=_s(6,e,null,t)).lanes=r,e}function Us(e,t,r){return(t=_s(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,r,n,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=n,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function zs(e,t,r,n,a,o,i,u,l){return e=new Fs(e,t,r,u,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=_s(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},Mo(o),e}function Bs(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Ws(e){if(!e)return Pa;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ma(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var r=e.type;if(Ma(r))return Da(e,r,t)}return t}function Vs(e,t,r,n,a,o,i,u,l){return(e=zs(r,n,!0,e,0,o,0,u,l)).context=Ws(null),r=e.current,(o=Lo(n=es(),a=ts(r))).callback=null!=t?t:null,Do(r,o,a),e.current.lanes=a,mt(e,a,n),ns(e,n),e}function Hs(e,t,r,n){var a=t.current,o=es(),i=ts(a);return r=Ws(r),null===t.context?t.context=r:t.pendingContext=r,(t=Lo(o,i)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=Do(a,t,i))&&(rs(e,a,i,o),No(e,a,i)),i}function $s(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function Qs(e,t){qs(e,t),(e=e.alternate)&&qs(e,t)}El=function(e,t,r){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oa.current)wu=!0;else{if(0==(e.lanes&r)&&0==(128&t.flags))return wu=!1,function(e,t,r){switch(t.tag){case 3:Tu(t),ho();break;case 5:ii(t);break;case 1:Ma(t.type)&&Na(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,a=t.memoizedProps.value;Ca(yo,n._currentValue),n._currentValue=a;break;case 13:if(null!==(n=t.memoizedState))return null!==n.dehydrated?(Ca(li,1&li.current),t.flags|=128,null):0!=(r&t.child.childLanes)?ju(e,t,r):(Ca(li,1&li.current),null!==(e=Hu(e,t,r))?e.sibling:null);Ca(li,1&li.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(128&e.flags)){if(n)return Wu(e,t,r);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ca(li,li.current),n)break;return null;case 22:case 23:return t.lanes=0,Ru(e,t,r)}return Hu(e,t,r)}(e,t,r);wu=0!=(131072&e.flags)}else wu=!1,ao&&0!=(1048576&t.flags)&&Za(t,qa,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;Vu(e,t),e=t.pendingProps;var a=_a(t,Aa.current);Ro(t,r),a=ki(null,t,n,e,a,r);var i=Ri();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ma(n)?(i=!0,Na(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Mo(t),a.updater=Wo,t.stateNode=a,a._reactInternals=t,qo(t,n,e,r),t=Ou(null,t,n,!0,i,r)):(t.tag=0,ao&&i&&eo(t),xu(null,t,a,r),t=t.child),t;case 16:n=t.elementType;e:{switch(Vu(e,t),e=t.pendingProps,n=(a=n._init)(n._payload),t.type=n,a=t.tag=function(e){if("function"==typeof e)return Ms(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===_)return 14}return 2}(n),e=mo(n,e),a){case 0:t=Pu(null,t,n,e,r);break e;case 1:t=Au(null,t,n,e,r);break e;case 11:t=Su(null,t,n,e,r);break e;case 14:t=Eu(null,t,n,mo(n.type,e),r);break e}throw Error(o(306,n,""))}return t;case 0:return n=t.type,a=t.pendingProps,Pu(e,t,n,a=t.elementType===n?a:mo(n,a),r);case 1:return n=t.type,a=t.pendingProps,Au(e,t,n,a=t.elementType===n?a:mo(n,a),r);case 3:e:{if(Tu(t),null===e)throw Error(o(387));n=t.pendingProps,a=(i=t.memoizedState).element,Io(e,t),Uo(t,n,null,r);var u=t.memoizedState;if(n=u.element,i.isDehydrated){if(i={element:n,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_u(e,t,n,r,a=cu(Error(o(423)),t));break e}if(n!==a){t=_u(e,t,n,r,a=cu(Error(o(424)),t));break e}for(no=sa(t.stateNode.containerInfo.firstChild),ro=t,ao=!0,oo=null,r=Jo(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(ho(),n===a){t=Hu(e,t,r);break e}xu(e,t,n,r)}t=t.child}return t;case 5:return ii(t),null===e&&so(t),n=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,u=a.children,ra(n,a)?u=null:null!==i&&ra(n,i)&&(t.flags|=32),Cu(e,t),xu(e,t,u,r),t.child;case 6:return null===e&&so(t),null;case 13:return ju(e,t,r);case 4:return ai(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Xo(t,null,n,r):xu(e,t,n,r),t.child;case 11:return n=t.type,a=t.pendingProps,Su(e,t,n,a=t.elementType===n?a:mo(n,a),r);case 7:return xu(e,t,t.pendingProps,r),t.child;case 8:case 12:return xu(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,a=t.pendingProps,i=t.memoizedProps,u=a.value,Ca(yo,n._currentValue),n._currentValue=u,null!==i)if(un(i.value,u)){if(i.children===a.children&&!Oa.current){t=Hu(e,t,r);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var l=i.dependencies;if(null!==l){u=i.child;for(var s=l.firstContext;null!==s;){if(s.context===n){if(1===i.tag){(s=Lo(-1,r&-r)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=r,null!==(s=i.alternate)&&(s.lanes|=r),ko(i.return,r,t),l.lanes|=r;break}s=s.next}}else if(10===i.tag)u=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(u=i.return))throw Error(o(341));u.lanes|=r,null!==(l=u.alternate)&&(l.lanes|=r),ko(u,r,t),u=i.sibling}else u=i.child;if(null!==u)u.return=i;else for(u=i;null!==u;){if(u===t){u=null;break}if(null!==(i=u.sibling)){i.return=u.return,u=i;break}u=u.return}i=u}xu(e,t,a.children,r),t=t.child}return t;case 9:return a=t.type,n=t.pendingProps.children,Ro(t,r),n=n(a=Co(a)),t.flags|=1,xu(e,t,n,r),t.child;case 14:return a=mo(n=t.type,t.pendingProps),Eu(e,t,n,a=mo(n.type,a),r);case 15:return ku(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:mo(n,a),Vu(e,t),t.tag=1,Ma(n)?(e=!0,Na(t)):e=!1,Ro(t,r),Ho(t,n,a),qo(t,n,a,r),Ou(null,t,n,!0,e,r);case 19:return Wu(e,t,r);case 22:return Ru(e,t,r)}throw Error(o(156,t.tag))};var Gs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function Ks(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function ec(e,t,r,n,a){var o=r._reactRootContainer;if(o){var i=o;if("function"==typeof a){var u=a;a=function(){var e=$s(i);u.call(e)}}Hs(t,i,e,a)}else i=function(e,t,r,n,a){if(a){if("function"==typeof n){var o=n;n=function(){var e=$s(i);o.call(e)}}var i=Vs(t,n,e,0,null,!1,0,"",Zs);return e._reactRootContainer=i,e[ha]=i.current,Wn(8===e.nodeType?e.parentNode:e),cs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof n){var u=n;n=function(){var e=$s(l);u.call(e)}}var l=zs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=l,e[ha]=l.current,Wn(8===e.nodeType?e.parentNode:e),cs((function(){Hs(t,l,r,n)})),l}(r,t,e,a,n);return $s(i)}Ks.prototype.render=Ys.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hs(e,t,null,null)},Ks.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Hs(null,e,null,null)})),t[ha]=null}},Ks.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var r=0;r<It.length&&0!==t&&t<It[r].priority;r++);It.splice(r,0,e),0===r&&jt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=ft(t.pendingLanes);0!==r&&(yt(t,1|r),ns(t,Xe()),0==(6&Al)&&(Wl=Xe()+500,Wa()))}break;case 13:cs((function(){var t=To(e,1);if(null!==t){var r=es();rs(t,e,1,r)}})),Qs(e,1)}},St=function(e){if(13===e.tag){var t=To(e,134217728);null!==t&&rs(t,e,134217728,es()),Qs(e,134217728)}},Et=function(e){if(13===e.tag){var t=ts(e),r=To(e,t);null!==r&&rs(r,e,t,es()),Qs(e,t)}},kt=function(){return bt},Rt=function(e,t){var r=bt;try{return bt=e,t()}finally{bt=r}},Se=function(e,t,r){switch(t){case"input":if(J(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var a=xa(n);if(!a)throw Error(o(90));Q(n),J(n,a)}}}break;case"textarea":oe(e,r);break;case"select":null!=(t=r.value)&&re(e,!!r.multiple,t,!1)}},Ae=ss,Oe=cs;var tc={usingClientEntryPoint:!1,Events:[ba,wa,xa,Ce,Pe,ss]},rc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},nc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(nc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return Bs(e,t,null,r)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var r=!1,n="",a=Gs;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=zs(e,1,!1,null,0,r,0,n,a),e[ha]=t.current,Wn(8===e.nodeType?e.parentNode:e),new Ys(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,r){if(!Js(t))throw Error(o(200));return ec(null,e,t,!0,r)},t.hydrateRoot=function(e,t,r){if(!Xs(e))throw Error(o(405));var n=null!=r&&r.hydratedSources||null,a=!1,i="",u=Gs;if(null!=r&&(!0===r.unstable_strictMode&&(a=!0),void 0!==r.identifierPrefix&&(i=r.identifierPrefix),void 0!==r.onRecoverableError&&(u=r.onRecoverableError)),t=Vs(t,null,e,1,null!=r?r:null,a,0,i,u),e[ha]=t.current,Wn(e),n)for(e=0;e<n.length;e++)a=(a=(r=n[e])._getVersion)(r._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[r,a]:t.mutableSourceEagerHydrationData.push(r,a);return new Ks(t)},t.render=function(e,t,r){if(!Js(t))throw Error(o(200));return ec(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!Js(r))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,r,!1,n)},t.version="18.2.0-next-9e3b772b8-20220608"},20745:(e,t,r)=>{"use strict";var n=r(73935);t.s=n.createRoot,n.hydrateRoot},73935:(e,t,r)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(64448)},79655:(e,t,r)=>{"use strict";r.d(t,{aj:()=>l}),r(67294);var n,a,o=r(89250),i=r(12599);function u(){return u=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u.apply(this,arguments)}function l(e,t){return(0,i.p7)({basename:null==t?void 0:t.basename,history:(0,i.lX)({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||s(),routes:(0,o.DG)(e)}).initialize()}function s(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=u({},t,{errors:c(t.errors)})),t}function c(e){if(!e)return null;let t=Object.entries(e),r={};for(let[e,n]of t)if(n&&"RouteErrorResponse"===n.__type)r[e]=new i.iQ(n.status,n.statusText,n.data,!0===n.internal);else if(n&&"Error"===n.__type){let t=new Error(n.message);t.stack="",r[e]=t}else r[e]=n;return r}"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"}(n||(n={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(a||(a={}))},89250:(e,t,r)=>{"use strict";var n;r.d(t,{DG:()=>_,pG:()=>R});var a=r(12599),o=r(67294);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:u,useEffect:l,useLayoutEffect:s,useDebugValue:c}=n||(n=r.t(o,2));"undefined"==typeof window||void 0===window.document||window.document.createElement;const f=(n||(n=r.t(o,2))).useSyncExternalStore,d=o.createContext(null),p=o.createContext(null),h=o.createContext(null),v=o.createContext(null),g=o.createContext({outlet:null,matches:[]}),m=o.createContext(null);function y(){return null!=o.useContext(v)}function b(){let e=function(){var e;let t=o.useContext(m),r=function(e){let t=o.useContext(p);return t||(0,a.kG)(!1),t}(E.UseRouteError),n=function(e){let t=function(e){let t=o.useContext(g);return t||(0,a.kG)(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||(0,a.kG)(!1),r.route.id}(E.UseRouteError);return t||(null==(e=r.errors)?void 0:e[n])}(),t=(0,a.WK)(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,n={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return o.createElement(o.Fragment,null,o.createElement("h2",null,"Unexpected Application Error!"),o.createElement("h3",{style:{fontStyle:"italic"}},t),r?o.createElement("pre",{style:n},r):null,null)}class w extends o.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?o.createElement(g.Provider,{value:this.props.routeContext},o.createElement(m.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function x(e){let{routeContext:t,match:r,children:n}=e,a=o.useContext(d);return a&&a.static&&a.staticContext&&r.route.errorElement&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),o.createElement(g.Provider,{value:t},n)}var S,E,k;function R(e){let{fallbackElement:t,router:r}=e,n=f(r.subscribe,(()=>r.state),(()=>r.state)),a=o.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),i=r.basename||"/";return o.createElement(o.Fragment,null,o.createElement(d.Provider,{value:{router:r,navigator:a,static:!1,basename:i}},o.createElement(p.Provider,{value:n},o.createElement(P,{basename:r.basename,location:r.state.location,navigationType:r.state.historyAction,navigator:a},r.state.initialized?o.createElement(A,null):t))),null)}function C(e){(0,a.kG)(!1)}function P(e){let{basename:t="/",children:r=null,location:n,navigationType:i=a.aU.Pop,navigator:u,static:l=!1}=e;y()&&(0,a.kG)(!1);let s=t.replace(/^\/*/,"/"),c=o.useMemo((()=>({basename:s,navigator:u,static:l})),[s,u,l]);"string"==typeof n&&(n=(0,a.cP)(n));let{pathname:f="/",search:d="",hash:p="",state:g=null,key:m="default"}=n,b=o.useMemo((()=>{let e=(0,a.Zn)(f,s);return null==e?null:{pathname:e,search:d,hash:p,state:g,key:m}}),[s,f,d,p,g,m]);return null==b?null:o.createElement(h.Provider,{value:c},o.createElement(v.Provider,{children:r,value:{location:b,navigationType:i}}))}function A(e){let{children:t,location:r}=e,n=o.useContext(d);return function(e,t){y()||(0,a.kG)(!1);let{navigator:r}=o.useContext(h),n=o.useContext(p),{matches:u}=o.useContext(g),l=u[u.length-1],s=l?l.params:{},c=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let f,d=(y()||(0,a.kG)(!1),o.useContext(v).location);if(t){var m;let e="string"==typeof t?(0,a.cP)(t):t;"/"===c||(null==(m=e.pathname)?void 0:m.startsWith(c))||(0,a.kG)(!1),f=e}else f=d;let S=f.pathname||"/",E="/"===c?S:S.slice(c.length)||"/",k=(0,a.fp)(e,{pathname:E}),R=function(e,t,r){if(void 0===t&&(t=[]),null==e){if(null==r||!r.errors)return null;e=r.matches}let n=e,i=null==r?void 0:r.errors;if(null!=i){let e=n.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||(0,a.kG)(!1),n=n.slice(0,Math.min(n.length,e+1))}return n.reduceRight(((e,a,u)=>{let l=a.route.id?null==i?void 0:i[a.route.id]:null,s=r?a.route.errorElement||o.createElement(b,null):null,c=t.concat(n.slice(0,u+1)),f=()=>o.createElement(x,{match:a,routeContext:{outlet:e,matches:c}},l?s:void 0!==a.route.element?a.route.element:e);return r&&(a.route.errorElement||0===u)?o.createElement(w,{location:r.location,component:s,error:l,children:f(),routeContext:{outlet:null,matches:c}}):f()}),null)}(k&&k.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:(0,a.RQ)([c,r.encodeLocation?r.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:(0,a.RQ)([c,r.encodeLocation?r.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),u,n||void 0);return t&&R?o.createElement(v.Provider,{value:{location:i({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:a.aU.Pop}},R):R}(n&&!t?n.router.routes:T(t),r)}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(S||(S={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(E||(E={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(k||(k={})),new Promise((()=>{}));class O extends o.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:r}=this.props,n=null,a=k.pending;if(r instanceof Promise)if(this.state.error){k.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),Object.defineProperty(n,"_error",{get:()=>e})}else r._tracked?void 0!==n._error?k.error:void 0!==n._data?k.success:k.pending:(k.pending,Object.defineProperty(r,"_tracked",{get:()=>!0}),r.then((e=>Object.defineProperty(r,"_data",{get:()=>e})),(e=>Object.defineProperty(r,"_error",{get:()=>e}))));else k.success,Promise.resolve(),Object.defineProperty(n,"_tracked",{get:()=>!0}),Object.defineProperty(n,"_data",{get:()=>r});if(a===k.error&&n._error instanceof AbortedDeferredError)throw neverSettledPromise;if(a===k.error&&!t)throw n._error;if(a===k.error)return React.createElement(AwaitContext.Provider,{value:n,children:t});if(a===k.success)return React.createElement(AwaitContext.Provider,{value:n,children:e});throw n}}function T(e,t){void 0===t&&(t=[]);let r=[];return o.Children.forEach(e,((e,n)=>{if(!o.isValidElement(e))return;if(e.type===o.Fragment)return void r.push.apply(r,T(e.props.children,t));e.type!==C&&(0,a.kG)(!1),e.props.index&&e.props.children&&(0,a.kG)(!1);let i=[...t,n],u={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(u.children=T(e.props.children,i)),r.push(u)})),r}function _(e){return e.map((e=>{let t=i({},e);return null==t.hasErrorBoundary&&(t.hasErrorBoundary=null!=t.errorElement),t.children&&(t.children=_(t.children)),t}))}},75251:(e,t,r)=>{"use strict";var n=r(67294),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};t.jsx=function(e,t,r){var n,l={},s=null,c=null;for(n in void 0!==r&&(s=""+r),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,n)&&!u.hasOwnProperty(n)&&(l[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===l[n]&&(l[n]=t[n]);return{$$typeof:a,type:e,key:s,ref:c,props:l,_owner:i.current}}},72408:(e,t)=>{"use strict";var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,g={};function m(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}function y(){}function b(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=m.prototype;var w=b.prototype=new y;w.constructor=b,v(w,m.prototype),w.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,E={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function R(e,t,n){var a,o={},i=null,u=null;if(null!=t)for(a in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,a)&&!k.hasOwnProperty(a)&&(o[a]=t[a]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===o[a]&&(o[a]=l[a]);return{$$typeof:r,type:e,key:i,ref:u,props:o,_owner:E.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var P=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,a,o,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case r:case n:l=!0}}if(l)return i=i(l=e),e=""===o?"."+A(l,0):o,x(i)?(a="",null!=e&&(a=e.replace(P,"$&/")+"/"),O(i,t,a,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(l=0,o=""===o?".":o+":",x(e))for(var s=0;s<e.length;s++){var c=o+A(u=e[s],s);l+=O(u,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=O(u=u.value,t,a,c=o+A(u,s++),i);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function T(e,t,r){if(null==e)return e;var n=[],a=0;return O(e,n,"","",(function(e){return t.call(r,e,a++)})),n}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var M={current:null},I={transition:null},L={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:I,ReactCurrentOwner:E};t.Children={map:T,forEach:function(e,t,r){T(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=m,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=v({},e.props),o=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)S.call(t,s)&&!k.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){l=Array(s);for(var c=0;c<s;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:r,type:e.type,key:o,ref:i,props:a,_owner:u}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=R,t.createFactory=function(e){var t=R.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return M.current.useCallback(e,t)},t.useContext=function(e){return M.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return M.current.useDeferredValue(e)},t.useEffect=function(e,t){return M.current.useEffect(e,t)},t.useId=function(){return M.current.useId()},t.useImperativeHandle=function(e,t,r){return M.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return M.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return M.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return M.current.useMemo(e,t)},t.useReducer=function(e,t,r){return M.current.useReducer(e,t,r)},t.useRef=function(e){return M.current.useRef(e)},t.useState=function(e){return M.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return M.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return M.current.useTransition()},t.version="18.2.0"},67294:(e,t,r)=>{"use strict";e.exports=r(72408)},85893:(e,t,r)=>{"use strict";e.exports=r(75251)},60053:(e,t)=>{"use strict";function r(e,t){var r=e.length;e.push(t);e:for(;0<r;){var n=r-1>>>1,a=e[n];if(!(0<o(a,t)))break e;e[n]=t,e[r]=a,r=n}}function n(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,a=e.length,i=a>>>1;n<i;){var u=2*(n+1)-1,l=e[u],s=u+1,c=e[s];if(0>o(l,r))s<a&&0>o(c,l)?(e[n]=c,e[s]=r,n=s):(e[n]=l,e[u]=r,n=u);else{if(!(s<a&&0>o(c,r)))break e;e[n]=c,e[s]=r,n=s}}}return t}function o(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}var s=[],c=[],f=1,d=null,p=3,h=!1,v=!1,g=!1,m="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=n(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,r(s,t)}t=n(c)}}function x(e){if(g=!1,w(e),!v)if(null!==n(s))v=!0,I(S);else{var t=n(c);null!==t&&L(x,t.startTime-e)}}function S(e,r){v=!1,g&&(g=!1,y(C),C=-1),h=!0;var o=p;try{for(w(r),d=n(s);null!==d&&(!(d.expirationTime>r)||e&&!O());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var u=i(d.expirationTime<=r);r=t.unstable_now(),"function"==typeof u?d.callback=u:d===n(s)&&a(s),w(r)}else a(s);d=n(s)}if(null!==d)var l=!0;else{var f=n(c);null!==f&&L(x,f.startTime-r),l=!1}return l}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,k=!1,R=null,C=-1,P=5,A=-1;function O(){return!(t.unstable_now()-A<P)}function T(){if(null!==R){var e=t.unstable_now();A=e;var r=!0;try{r=R(!0,e)}finally{r?E():(k=!1,R=null)}}else k=!1}if("function"==typeof b)E=function(){b(T)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,M=_.port2;_.port1.onmessage=T,E=function(){M.postMessage(null)}}else E=function(){m(T,0)};function I(e){R=e,k||(k=!0,E())}function L(e,r){C=m((function(){e(t.unstable_now())}),r)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){v||h||(v=!0,I(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return n(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var r=p;p=t;try{return e()}finally{p=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=p;p=e;try{return t()}finally{p=r}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:u=o+u,sortIndex:-1},o>i?(e.sortIndex=o,r(c,e),null===n(s)&&e===n(c)&&(g?(y(C),C=-1):g=!0,L(x,o-i))):(e.sortIndex=u,r(s,e),v||h||(v=!0,I(S))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var r=p;p=t;try{return e.apply(this,arguments)}finally{p=r}}}},63840:(e,t,r)=>{"use strict";e.exports=r(60053)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxNQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE1BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE1BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxNQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE1BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxNQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsTUFDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE1BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE1BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9BQ1IsRUFBUSxPQUNSLEVBQVEsT0FDUixFQUFRLE9B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QUFFaGMsQ0FBQyxDQUFDLENBQUMsZ0NDZjdKcmIsRUFBT0MsUUFBVSxFQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItYmFzaWMtZGV0ZWN0aW9uLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi1mcm9tLWxhc3QuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2V0LWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc29ydC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Jhc2U2NC1tYXAuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWh0bWwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVsZXRlLXByb3BlcnR5LW9yLXRocm93LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1hbGwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1icm93c2VyLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJ1bi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWNsZWFyLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXJyb3Itc3RhY2staW5zdGFsbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXJyb3ItdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llZWU3NTQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3RhbGwtZXJyb3ItY2F1c2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1iaWctaW50LWFycmF5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1jbG9zZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYWtlLWJ1aWx0LWluLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWFwLWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzEwLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2Utc3RhdGljcy1pbmNvcnJlY3QtaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJveHktYWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9xdWV1ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NjaGVkdWxlcnMtZml4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC13ZWJraXQtYnVnLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYmlnLWludC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2Zmc2V0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS1ub2RlLXJlcXVpcmUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXJsLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2Vhay1tYXAtYmFzaWMtZGV0ZWN0aW9uLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmNhdXNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5pcy12aWV3LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5hdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWxhc3QtaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1sYXN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zaGlmdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRhLXZpZXcuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0YS12aWV3LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUuZ2V0LXllYXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5zZXQteWVhci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWdtdC1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lcnJvci5jYXVzZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lcnJvci50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZXNjYXBlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jb3NoLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWV4cG9uZW50aWFsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcm9tLWVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5oYXMtb3duLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QucHJvdG8uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYWxsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuYW55LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuY2F0Y2guanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLnJhY2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5yZWplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5yZXNvbHZlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5kb3QtYWxsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuc3RpY2t5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5hdC1hbHRlcm5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmF3LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdWJzdHIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZm9yLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmlzLWNvbmNhdC1zcHJlYWRhYmxlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmtleS1mb3IuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2guanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuYXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QtaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1sYXN0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy51bmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLXNldC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuYXRvYi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuYnRvYS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuY2xlYXItaW1tZWRpYXRlLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5zdGFjay5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnF1ZXVlLW1pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc2VsZi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc2V0LWltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc2V0LWludGVydmFsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5zZXQtdGltZW91dC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc3RydWN0dXJlZC1jbG9uZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc3RhYmxlL2luZGV4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3JlYWR5LWRvY3VtZW50cy8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly9yZWFkeS1kb2N1bWVudHMvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhZHktZG9jdW1lbnRzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwidmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArICRTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkge1xuICBpZiAoaXNQcm90b3R5cGVPZihQcm90b3R5cGUsIGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCIvLyBGRjI2LSBidWc6IEFycmF5QnVmZmVycyBhcmUgbm9uLWV4dGVuc2libGUsIGJ1dCBPYmplY3QuaXNFeHRlbnNpYmxlIGRvZXMgbm90IHJlcG9ydCBpdFxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlKGJ1ZmZlcikpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShidWZmZXIsICdhJywgeyB2YWx1ZTogOCB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItYmFzaWMtZGV0ZWN0aW9uJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgSW50OEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5ICYmIEludDhBcnJheS5wcm90b3R5cGU7XG52YXIgVWludDhDbGFtcGVkQXJyYXkgPSBnbG9iYWwuVWludDhDbGFtcGVkQXJyYXk7XG52YXIgVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OENsYW1wZWRBcnJheSAmJiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGU7XG52YXIgVHlwZWRBcnJheSA9IEludDhBcnJheSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXkpO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXlQcm90b3R5cGUgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5UHJvdG90eXBlKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IHVpZCgnVFlQRURfQVJSQVlfVEFHJyk7XG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSAnVHlwZWRBcnJheUNvbnN0cnVjdG9yJztcbi8vIEZpeGluZyBuYXRpdmUgdHlwZWQgYXJyYXlzIGluIE9wZXJhIFByZXN0byBjcmFzaGVzIHRoZSBicm93c2VyLCBzZWUgIzU5NVxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBOQVRJVkVfQVJSQVlfQlVGRkVSICYmICEhc2V0UHJvdG90eXBlT2YgJiYgY2xhc3NvZihnbG9iYWwub3BlcmEpICE9PSAnT3BlcmEnO1xudmFyIFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCA9IGZhbHNlO1xudmFyIE5BTUUsIENvbnN0cnVjdG9yLCBQcm90b3R5cGU7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgSW50OEFycmF5OiAxLFxuICBVaW50OEFycmF5OiAxLFxuICBVaW50OENsYW1wZWRBcnJheTogMSxcbiAgSW50MTZBcnJheTogMixcbiAgVWludDE2QXJyYXk6IDIsXG4gIEludDMyQXJyYXk6IDQsXG4gIFVpbnQzMkFycmF5OiA0LFxuICBGbG9hdDMyQXJyYXk6IDQsXG4gIEZsb2F0NjRBcnJheTogOFxufTtcblxudmFyIEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgQmlnSW50NjRBcnJheTogOCxcbiAgQmlnVWludDY0QXJyYXk6IDhcbn07XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3J1xuICAgIHx8IGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihpdCk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pKSByZXR1cm47XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvdG8pO1xuICByZXR1cm4gKHN0YXRlICYmIGhhc093bihzdGF0ZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IpKSA/IHN0YXRlW1RZUEVEX0FSUkFZX0NPTlNUUlVDVE9SXSA6IGdldFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcihwcm90byk7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4gaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXNPd24oQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzVHlwZWRBcnJheShpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXknKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEMpIHtcbiAgaWYgKGlzQ2FsbGFibGUoQykgJiYgKCFzZXRQcm90b3R5cGVPZiB8fCBpc1Byb3RvdHlwZU9mKFR5cGVkQXJyYXksIEMpKSkgcmV0dXJuIEM7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhDKSArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3InKTtcbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCwgb3B0aW9ucykge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSwgS0VZKSkgdHJ5IHtcbiAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIG9sZCBXZWJLaXQgYnVnIC0gc29tZSBtZXRob2RzIGFyZSBub24tY29uZmlndXJhYmxlXG4gICAgICB0cnkge1xuICAgICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICB9XG4gIGlmICghVHlwZWRBcnJheVByb3RvdHlwZVtLRVldIHx8IGZvcmNlZCkge1xuICAgIGRlZmluZUJ1aWx0SW4oVHlwZWRBcnJheVByb3RvdHlwZSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eVxuICAgICAgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVByb3RvdHlwZVtLRVldIHx8IHByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIHZhciBBUlJBWSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIGlmIChmb3JjZWQpIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSkpIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9XG4gICAgaWYgKCFUeXBlZEFycmF5W0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgICAvLyBWOCB+IENocm9tZSA0OS01MCBgJVR5cGVkQXJyYXklYCBtZXRob2RzIGFyZSBub24td3JpdGFibGUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUJ1aWx0SW4oVHlwZWRBcnJheSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eSA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgVHlwZWRBcnJheVtLRVldIHx8IHByb3BlcnR5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9IGVsc2UgcmV0dXJuO1xuICB9XG4gIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7XG4gICAgICBkZWZpbmVCdWlsdEluKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgZW5mb3JjZUludGVybmFsU3RhdGUoUHJvdG90eXBlKVtUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUl0gPSBDb25zdHJ1Y3RvcjtcbiAgZWxzZSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbmZvciAoTkFNRSBpbiBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgZW5mb3JjZUludGVybmFsU3RhdGUoUHJvdG90eXBlKVtUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUl0gPSBDb25zdHJ1Y3Rvcjtcbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIHR5cGVkIGFycmF5cyBjb25zdHJ1Y3RvcnMgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGVcbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhaXNDYWxsYWJsZShUeXBlZEFycmF5KSB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdyAtLSBzYWZlXG4gIFR5cGVkQXJyYXkgPSBmdW5jdGlvbiBUeXBlZEFycmF5KCkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbiAgfTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXSwgVHlwZWRBcnJheSk7XG4gIH1cbn1cblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFUeXBlZEFycmF5UHJvdG90eXBlIHx8IFR5cGVkQXJyYXlQcm90b3R5cGUgPT09IE9iamVjdFByb3RvdHlwZSkge1xuICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheS5wcm90b3R5cGU7XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0ucHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbiAgfVxufVxuXG4vLyBXZWJLaXQgYnVnIC0gb25lIG1vcmUgb2JqZWN0IGluIFVpbnQ4Q2xhbXBlZEFycmF5IHByb3RvdHlwZSBjaGFpblxuaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUpICE9PSBUeXBlZEFycmF5UHJvdG90eXBlKSB7XG4gIHNldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbn1cblxuaWYgKERFU0NSSVBUT1JTICYmICFoYXNPd24oVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsXG4gIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEICYmIFRZUEVEX0FSUkFZX1RBRyxcbiAgYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LFxuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLFxuICBleHBvcnRUeXBlZEFycmF5TWV0aG9kOiBleHBvcnRUeXBlZEFycmF5TWV0aG9kLFxuICBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kOiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kLFxuICBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3I6IGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvcixcbiAgaXNWaWV3OiBpc1ZpZXcsXG4gIGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuICBUeXBlZEFycmF5OiBUeXBlZEFycmF5LFxuICBUeXBlZEFycmF5UHJvdG90eXBlOiBUeXBlZEFycmF5UHJvdG90eXBlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLWJhc2ljLWRldGVjdGlvbicpO1xudmFyIEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXIgJiYgJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZmlsbCA9IHVuY3VycnlUaGlzKGFycmF5RmlsbCk7XG52YXIgcmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBhcnJheVNsaWNlKGJ5dGVzLCBzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiByZXZlcnNlKHBhY2spO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGZpbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIERhdGFWaWV3UHJvdG90eXBlKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBEYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlld1tQUk9UT1RZUEVdO1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIGRlZmluZUJ1aWx0SW5zKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICB2YXIgSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgTmF0aXZlQXJyYXlCdWZmZXIubmFtZSAhPT0gQVJSQVlfQlVGRkVSO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBOYXRpdmVBcnJheUJ1ZmZlci5sZW5ndGggIT0gMSB8fCBJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgIUNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FO1xuICB9KSkge1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuXG4gICAgJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBBcnJheUJ1ZmZlclByb3RvdHlwZTtcblxuICAgIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZUFycmF5QnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJEFycmF5QnVmZmVyLCBrZXksIE5hdGl2ZUFycmF5QnVmZmVyW2tleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIEFycmF5QnVmZmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9IGVsc2UgaWYgKElOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShOYXRpdmVBcnJheUJ1ZmZlciwgJ25hbWUnLCBBUlJBWV9CVUZGRVIpO1xuICB9XG5cbiAgLy8gV2ViS2l0IGJ1ZyAtIHRoZSBzYW1lIHBhcmVudCBwcm90b3R5cGUgZm9yIHR5cGVkIGFycmF5cyBhbmQgZGF0YSB2aWV3XG4gIGlmIChzZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSkgIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIHNldFByb3RvdHlwZU9mKERhdGFWaWV3UHJvdG90eXBlLCBPYmplY3RQcm90b3R5cGUpO1xuICB9XG5cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB0ZXN0VmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldEludDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgZGVmaW5lQnVpbHRJbnMoRGF0YVZpZXdQcm90b3R5cGUsIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4KHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyLFxuICBEYXRhVmlldzogJERhdGFWaWV3XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWNvcHl3aXRoaW4gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICFTVFJJQ1RfTUVUSE9EID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbn0gOiBbXS5mb3JFYWNoO1xuIiwidmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBsaXN0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShsaXN0KTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDb25zdHJ1Y3RvcihsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PT0gJEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZmluZExhc3QsIGZpbmRMYXN0SW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19GSU5EX0xBU1RfSU5ERVggPSBUWVBFID09IDE7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aE9mQXJyYXlMaWtlKHNlbGYpO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIHdoaWxlIChpbmRleC0tID4gMCkge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiB2YWx1ZTsgLy8gZmluZExhc3RcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gaW5kZXg7IC8vIGZpbmRMYXN0SW5kZXhcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfTEFTVF9JTkRFWCA/IC0xIDogdW5kZWZpbmVkO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZExhc3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuICBmaW5kTGFzdDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRMYXN0SW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuICBmaW5kTGFzdEluZGV4OiBjcmVhdGVNZXRob2QoMSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gc2FmZSAqL1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRsYXN0SW5kZXhPZiA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRsYXN0SW5kZXhPZiAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2xhc3RJbmRleE9mJyk7XG52YXIgRk9SQ0VEID0gTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiBhcHBseSgkbGFzdEluZGV4T2YsIHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudHNbMV0pKTtcbiAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8gJiYgT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICByZXR1cm4gLTE7XG59IDogJGxhc3RJbmRleE9mO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyByZWR1Y2UsIHJlZHVjZVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfUklHSFQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhcmd1bWVudHNMZW5ndGgsIG1lbW8pIHtcbiAgICBhQ2FsbGFibGUoY2FsbGJhY2tmbik7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBpbmRleCA9IElTX1JJR0hUID8gbGVuZ3RoIC0gMSA6IDA7XG4gICAgdmFyIGkgPSBJU19SSUdIVCA/IC0xIDogMTtcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoIDwgMikgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgICAgaW5kZXggKz0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgaWYgKElTX1JJR0hUID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgIHRocm93ICRUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gU2FmYXJpIDwgMTMgZG9lcyBub3QgdGhyb3cgYW4gZXJyb3IgaW4gdGhpcyBjYXNlXG52YXIgU0lMRU5UX09OX05PTl9XUklUQUJMRV9MRU5HVEhfU0VUID0gREVTQ1JJUFRPUlMgJiYgIWZ1bmN0aW9uICgpIHtcbiAgLy8gbWFrZXMgbm8gc2Vuc2Ugd2l0aG91dCBwcm9wZXIgc3RyaWN0IG1vZGUgc3VwcG9ydFxuICBpZiAodGhpcyAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KS5sZW5ndGggPSAxO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgfVxufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIX1NFVCA/IGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgaWYgKGlzQXJyYXkoTykgJiYgIWdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCAnbGVuZ3RoJykud3JpdGFibGUpIHtcbiAgICB0aHJvdyAkVHlwZUVycm9yKCdDYW5ub3Qgc2V0IHJlYWQgb25seSAubGVuZ3RoJyk7XG4gIH0gcmV0dXJuIE8ubGVuZ3RoID0gbGVuZ3RoO1xufSA6IGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgcmV0dXJuIE8ubGVuZ3RoID0gbGVuZ3RoO1xufTtcbiIsInZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgdmFyIHJlc3VsdCA9ICRBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxudmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDggPyBpbnNlcnRpb25Tb3J0KGFycmF5LCBjb21wYXJlZm4pIDogbWVyZ2UoXG4gICAgYXJyYXksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgY29tcGFyZWZuXG4gICk7XG59O1xuXG52YXIgaW5zZXJ0aW9uU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpID0gMTtcbiAgdmFyIGVsZW1lbnQsIGo7XG5cbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBqID0gaTtcbiAgICBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICBhcnJheVtqXSA9IGFycmF5Wy0tal07XG4gICAgfVxuICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxsZW5ndGggPSBsZWZ0Lmxlbmd0aDtcbiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7XG4gIHZhciBsaW5kZXggPSAwO1xuICB2YXIgcmluZGV4ID0gMDtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IChsaW5kZXggPCBsbGVuZ3RoICYmIHJpbmRleCA8IHJsZW5ndGgpXG4gICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXVxuICAgICAgOiBsaW5kZXggPCBsbGVuZ3RoID8gbGVmdFtsaW5kZXgrK10gOiByaWdodFtyaW5kZXgrK107XG4gIH0gcmV0dXJuIGFycmF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZVNvcnQ7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciAkQXJyYXkgPSBBcnJheTtcblxuLy8gYSBwYXJ0IG9mIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAoaXNDb25zdHJ1Y3RvcihDKSAmJiAoQyA9PT0gJEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IEM7XG59O1xuIiwidmFyIGFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKGFycmF5U3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXkpKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgaXRvYyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG52YXIgY3RvaSA9IHt9O1xuXG5mb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgNjY7IGluZGV4KyspIGN0b2lbaXRvYy5jaGFyQXQoaW5kZXgpXSA9IGluZGV4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXRvYzogaXRvYyxcbiAgY3RvaTogY3RvaVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSAkT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvdG90eXBlID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgIHZhciBwcmV2aW91cywgaW5kZXg7XG4gICAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbHVlO1xuICAgICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUubGFzdCA9IGVudHJ5ID0ge1xuICAgICAgICAgIGluZGV4OiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSxcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgcHJldmlvdXM6IHByZXZpb3VzID0gc3RhdGUubGFzdCxcbiAgICAgICAgICBuZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgcmVtb3ZlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFzdGF0ZS5maXJzdCkgc3RhdGUuZmlyc3QgPSBlbnRyeTtcbiAgICAgICAgaWYgKHByZXZpb3VzKSBwcmV2aW91cy5uZXh0ID0gZW50cnk7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSsrO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSsrO1xuICAgICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHN0YXRlLmluZGV4W2luZGV4XSA9IGVudHJ5O1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIC8vIGZhc3QgY2FzZVxuICAgICAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICAgICAgdmFyIGVudHJ5O1xuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiBzdGF0ZS5pbmRleFtpbmRleF07XG4gICAgICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgICAgIGZvciAoZW50cnkgPSBzdGF0ZS5maXJzdDsgZW50cnk7IGVudHJ5ID0gZW50cnkubmV4dCkge1xuICAgICAgICBpZiAoZW50cnkua2V5ID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmNsZWFyKClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5jbGVhclxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmNsZWFyXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgICAgZGVsZXRlIHN0YXRlLmluZGV4W2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wcmV2aW91cyA9IHByZXY7XG4gICAgICAgICAgaWYgKHN0YXRlLmZpcnN0ID09IGVudHJ5KSBzdGF0ZS5maXJzdCA9IG5leHQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmxhc3QgPT0gZW50cnkpIHN0YXRlLmxhc3QgPSBwcmV2O1xuICAgICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZS0tO1xuICAgICAgICAgIGVsc2UgdGhhdC5zaXplLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuZmlyc3QpIHtcbiAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXR9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmhhc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmhhc1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5nZXRcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudmFsdWU7XG4gICAgICB9LFxuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIC8vIGBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eShQcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTtcbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS57IGtleXMsIHZhbHVlcywgZW50cmllcywgQEBpdGVyYXRvciB9KClgIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIGRlZmluZUl0ZXJhdG9yKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoZW50cnkua2V5LCBmYWxzZSk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoZW50cnkudmFsdWUsIGZhbHNlKTtcbiAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZmFsc2UpO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlW0BAc3BlY2llc11gIGFjY2Vzc29yc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LW1hcC1AQHNwZWNpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1zZXQtQEBzcGVjaWVzXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgZ2V0V2Vha0RhdGEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5nZXRXZWFrRGF0YTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBBcnJheUl0ZXJhdGlvbk1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG52YXIgZmluZCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmQ7XG52YXIgZmluZEluZGV4ID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZEluZGV4O1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5mcm96ZW4gfHwgKHN0YXRlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcblxudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xufTtcblxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5cblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgc3BsaWNlKHRoaXMuZW50cmllcywgaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIFByb3RvdHlwZSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaWQ6IGlkKyssXG4gICAgICAgIGZyb3plbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvdG90eXBlID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBlbHNlIGRhdGFbc3RhdGUuaWRdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgZGVmaW5lQnVpbHRJbnMoUHJvdG90eXBlLCB7XG4gICAgICAvLyBgeyBXZWFrTWFwLCBXZWFrU2V0IH0ucHJvdG90eXBlLmRlbGV0ZShrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmIGhhc093bihkYXRhLCBzdGF0ZS5pZCkgJiYgZGVsZXRlIGRhdGFbc3RhdGUuaWRdO1xuICAgICAgfSxcbiAgICAgIC8vIGB7IFdlYWtNYXAsIFdlYWtTZXQgfS5wcm90b3R5cGUuaGFzKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmhhc1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmIGhhc093bihkYXRhLCBzdGF0ZS5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuZ2V0KGtleSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3N0YXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5hZGRcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKE5hdGl2ZVByb3RvdHlwZVtLRVldKTtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb3RvdHlwZSwgS0VZLFxuICAgICAgS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSA6IEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gdW5kZWZpbmVkIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAhaXNDYWxsYWJsZShOYXRpdmVDb25zdHJ1Y3RvcikgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpO1xuICAgIH0pKVxuICApO1xuXG4gIGlmIChSRVBMQUNFKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLmVuYWJsZSgpO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9IGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHsgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGl0ZXJhYmxlKTsgfSk7XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcblxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgTmF0aXZlUHJvdG90eXBlKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlQ29uc3RydWN0b3IoKSwgZHVtbXksIENvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTtcbiAgICAgIE5hdGl2ZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cblxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuXG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7XG4gIH1cblxuICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBDb25zdHJ1Y3RvciAhPSBOYXRpdmVDb25zdHJ1Y3RvciB9LCBleHBvcnRlZCk7XG5cbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHF1b3QgPSAvXCIvZztcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG5cbi8vIGBDcmVhdGVIVE1MYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaHRtbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIHJlcGxhY2UodG9TdHJpbmcodmFsdWUpLCBxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG4iLCIvLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG52YXIgJGlzRmluaXRlID0gaXNGaW5pdGU7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIG5hdGl2ZURhdGVUb0lTT1N0cmluZyA9IERhdGVQcm90b3R5cGUudG9JU09TdHJpbmc7XG52YXIgdGhpc1RpbWVWYWx1ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgZ2V0VVRDRGF0ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDRGF0ZSk7XG52YXIgZ2V0VVRDRnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbnZhciBnZXRVVENIb3VycyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDSG91cnMpO1xudmFyIGdldFVUQ01pbGxpc2Vjb25kcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTWlsbGlzZWNvbmRzKTtcbnZhciBnZXRVVENNaW51dGVzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbnZhciBnZXRVVENNb250aCA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTW9udGgpO1xudmFyIGdldFVUQ1NlY29uZHMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBmYWlscyBoZXJlOlxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVEYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoISRpc0Zpbml0ZSh0aGlzVGltZVZhbHVlKHRoaXMpKSkgdGhyb3cgJFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZGF0ZSA9IHRoaXM7XG4gIHZhciB5ZWFyID0gZ2V0VVRDRnVsbFllYXIoZGF0ZSk7XG4gIHZhciBtaWxsaXNlY29uZHMgPSBnZXRVVENNaWxsaXNlY29uZHMoZGF0ZSk7XG4gIHZhciBzaWduID0geWVhciA8IDAgPyAnLScgOiB5ZWFyID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGFicyh5ZWFyKSwgc2lnbiA/IDYgOiA0LCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDTW9udGgoZGF0ZSkgKyAxLCAyLCAwKSArXG4gICAgJy0nICsgcGFkU3RhcnQoZ2V0VVRDRGF0ZShkYXRlKSwgMiwgMCkgK1xuICAgICdUJyArIHBhZFN0YXJ0KGdldFVUQ0hvdXJzKGRhdGUpLCAyLCAwKSArXG4gICAgJzonICsgcGFkU3RhcnQoZ2V0VVRDTWludXRlcyhkYXRlKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGdldFVUQ1NlY29uZHMoZGF0ZSksIDIsIDApICtcbiAgICAnLicgKyBwYWRTdGFydChtaWxsaXNlY29uZHMsIDMsIDApICtcbiAgICAnWic7XG59IDogbmF0aXZlRGF0ZVRvSVNPU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGFuT2JqZWN0KHRoaXMpO1xuICBpZiAoaGludCA9PT0gJ3N0cmluZycgfHwgaGludCA9PT0gJ2RlZmF1bHQnKSBoaW50ID0gJ3N0cmluZyc7XG4gIGVsc2UgaWYgKGhpbnQgIT09ICdudW1iZXInKSB0aHJvdyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZSh0aGlzLCBoaW50KTtcbn07XG4iLCJ2YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gIGlmIChkZXNjcmlwdG9yLmdldCkgbWFrZUJ1aWx0SW4oZGVzY3JpcHRvci5nZXQsIG5hbWUsIHsgZ2V0dGVyOiB0cnVlIH0pO1xuICBpZiAoZGVzY3JpcHRvci5zZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3Iuc2V0LCBuYW1lLCB7IHNldHRlcjogdHJ1ZSB9KTtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5LmYodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKTtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucy5lbnVtZXJhYmxlO1xuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uYW1lIDoga2V5O1xuICBpZiAoaXNDYWxsYWJsZSh2YWx1ZSkpIG1ha2VCdWlsdEluKHZhbHVlLCBuYW1lLCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMuZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVHbG9iYWxQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFvcHRpb25zLnVuc2FmZSkgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGVsc2UgaWYgKE9ba2V5XSkgc2ltcGxlID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6ICFvcHRpb25zLm5vbkNvbmZpZ3VyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiAhb3B0aW9ucy5ub25Xcml0YWJsZVxuICAgIH0pO1xuICB9IHJldHVybiBPO1xufTtcbiIsInZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWwsIGtleSwgeyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgaWYgKCFkZWxldGUgT1tQXSkgdGhyb3cgJFR5cGVFcnJvcignQ2Fubm90IGRlbGV0ZSBwcm9wZXJ0eSAnICsgdHJ5VG9TdHJpbmcoUCkgKyAnIG9mICcgKyB0cnlUb1N0cmluZyhPKSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGRvY3VtZW50QWxsID0gdHlwZW9mIGRvY3VtZW50ID09ICdvYmplY3QnICYmIGRvY3VtZW50LmFsbDtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1Jc0hUTUxEREEtaW50ZXJuYWwtc2xvdFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdHlwZW9mLXVuZGVmaW5lZCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIElTX0hUTUxEREEgPSB0eXBlb2YgZG9jdW1lbnRBbGwgPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnRBbGwgIT09IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFsbDogZG9jdW1lbnRBbGwsXG4gIElTX0hUTUxEREE6IElTX0hUTUxEREFcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93ICRUeXBlRXJyb3IoJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCcpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEluZGV4U2l6ZUVycm9yOiB7IHM6ICdJTkRFWF9TSVpFX0VSUicsIGM6IDEsIG06IDEgfSxcbiAgRE9NU3RyaW5nU2l6ZUVycm9yOiB7IHM6ICdET01TVFJJTkdfU0laRV9FUlInLCBjOiAyLCBtOiAwIH0sXG4gIEhpZXJhcmNoeVJlcXVlc3RFcnJvcjogeyBzOiAnSElFUkFSQ0hZX1JFUVVFU1RfRVJSJywgYzogMywgbTogMSB9LFxuICBXcm9uZ0RvY3VtZW50RXJyb3I6IHsgczogJ1dST05HX0RPQ1VNRU5UX0VSUicsIGM6IDQsIG06IDEgfSxcbiAgSW52YWxpZENoYXJhY3RlckVycm9yOiB7IHM6ICdJTlZBTElEX0NIQVJBQ1RFUl9FUlInLCBjOiA1LCBtOiAxIH0sXG4gIE5vRGF0YUFsbG93ZWRFcnJvcjogeyBzOiAnTk9fREFUQV9BTExPV0VEX0VSUicsIGM6IDYsIG06IDAgfSxcbiAgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3I6IHsgczogJ05PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUicsIGM6IDcsIG06IDEgfSxcbiAgTm90Rm91bmRFcnJvcjogeyBzOiAnTk9UX0ZPVU5EX0VSUicsIGM6IDgsIG06IDEgfSxcbiAgTm90U3VwcG9ydGVkRXJyb3I6IHsgczogJ05PVF9TVVBQT1JURURfRVJSJywgYzogOSwgbTogMSB9LFxuICBJblVzZUF0dHJpYnV0ZUVycm9yOiB7IHM6ICdJTlVTRV9BVFRSSUJVVEVfRVJSJywgYzogMTAsIG06IDEgfSxcbiAgSW52YWxpZFN0YXRlRXJyb3I6IHsgczogJ0lOVkFMSURfU1RBVEVfRVJSJywgYzogMTEsIG06IDEgfSxcbiAgU3ludGF4RXJyb3I6IHsgczogJ1NZTlRBWF9FUlInLCBjOiAxMiwgbTogMSB9LFxuICBJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3I6IHsgczogJ0lOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUicsIGM6IDEzLCBtOiAxIH0sXG4gIE5hbWVzcGFjZUVycm9yOiB7IHM6ICdOQU1FU1BBQ0VfRVJSJywgYzogMTQsIG06IDEgfSxcbiAgSW52YWxpZEFjY2Vzc0Vycm9yOiB7IHM6ICdJTlZBTElEX0FDQ0VTU19FUlInLCBjOiAxNSwgbTogMSB9LFxuICBWYWxpZGF0aW9uRXJyb3I6IHsgczogJ1ZBTElEQVRJT05fRVJSJywgYzogMTYsIG06IDAgfSxcbiAgVHlwZU1pc21hdGNoRXJyb3I6IHsgczogJ1RZUEVfTUlTTUFUQ0hfRVJSJywgYzogMTcsIG06IDEgfSxcbiAgU2VjdXJpdHlFcnJvcjogeyBzOiAnU0VDVVJJVFlfRVJSJywgYzogMTgsIG06IDEgfSxcbiAgTmV0d29ya0Vycm9yOiB7IHM6ICdORVRXT1JLX0VSUicsIGM6IDE5LCBtOiAxIH0sXG4gIEFib3J0RXJyb3I6IHsgczogJ0FCT1JUX0VSUicsIGM6IDIwLCBtOiAxIH0sXG4gIFVSTE1pc21hdGNoRXJyb3I6IHsgczogJ1VSTF9NSVNNQVRDSF9FUlInLCBjOiAyMSwgbTogMSB9LFxuICBRdW90YUV4Y2VlZGVkRXJyb3I6IHsgczogJ1FVT1RBX0VYQ0VFREVEX0VSUicsIGM6IDIyLCBtOiAxIH0sXG4gIFRpbWVvdXRFcnJvcjogeyBzOiAnVElNRU9VVF9FUlInLCBjOiAyMywgbTogMSB9LFxuICBJbnZhbGlkTm9kZVR5cGVFcnJvcjogeyBzOiAnSU5WQUxJRF9OT0RFX1RZUEVfRVJSJywgYzogMjQsIG06IDEgfSxcbiAgRGF0YUNsb25lRXJyb3I6IHsgczogJ0RBVEFfQ0xPTkVfRVJSJywgYzogMjUsIG06IDEgfVxufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiLy8gaW4gb2xkIFdlYktpdCB2ZXJzaW9ucywgYGVsZW1lbnQuY2xhc3NMaXN0YCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgZ2xvYmFsIGBET01Ub2tlbkxpc3RgXG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBjbGFzc0xpc3QgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ3NwYW4nKS5jbGFzc0xpc3Q7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3RvciAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVRva2VuTGlzdFByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSA/IHVuZGVmaW5lZCA6IERPTVRva2VuTGlzdFByb3RvdHlwZTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIGZpcmVmb3ggPSB1c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFmaXJlZm94ICYmICtmaXJlZm94WzFdO1xuIiwidmFyIElTX0RFTk8gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWRlbm8nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIUlTX0RFTk8gJiYgIUlTX05PREVcbiAgJiYgdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0J1xuICAmJiB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCc7XG4iLCIvKiBnbG9iYWwgQnVuIC0tIERlbm8gY2FzZSAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgQnVuID09ICdmdW5jdGlvbicgJiYgQnVuICYmIHR5cGVvZiBCdW4udmVyc2lvbiA9PSAnc3RyaW5nJztcbiIsIi8qIGdsb2JhbCBEZW5vIC0tIERlbm8gY2FzZSAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgRGVubyA9PSAnb2JqZWN0JyAmJiBEZW5vICYmIHR5cGVvZiBEZW5vLnZlcnNpb24gPT0gJ29iamVjdCc7XG4iLCJ2YXIgVUEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvTVNJRXxUcmlkZW50Ly50ZXN0KFVBKTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvaXBhZHxpcGhvbmV8aXBvZC9pLnRlc3QodXNlckFnZW50KSAmJiB0eXBlb2YgUGViYmxlICE9ICd1bmRlZmluZWQnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oPzppcGFkfGlwaG9uZXxpcG9kKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBwcm9jZXNzICE9ICd1bmRlZmluZWQnICYmIGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIG5hdmlnYXRvciAhPSAndW5kZWZpbmVkJyAmJiBTdHJpbmcobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHdlYmtpdCA9IHVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIXdlYmtpdCAmJiArd2Via2l0WzFdO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciAkRXJyb3IgPSBFcnJvcjtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG5cbnZhciBURVNUID0gKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIFN0cmluZygkRXJyb3IoYXJnKS5zdGFjayk7IH0pKCd6eGNhc2QnKTtcbnZhciBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlkgPSAvXFxuXFxzKmF0IFteOl0qOlteXFxuXSovO1xudmFyIElTX1Y4X09SX0NIQUtSQV9TVEFDSyA9IFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWS50ZXN0KFRFU1QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdGFjaywgZHJvcEVudHJpZXMpIHtcbiAgaWYgKElTX1Y4X09SX0NIQUtSQV9TVEFDSyAmJiB0eXBlb2Ygc3RhY2sgPT0gJ3N0cmluZycgJiYgISRFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSkge1xuICAgIHdoaWxlIChkcm9wRW50cmllcy0tKSBzdGFjayA9IHJlcGxhY2Uoc3RhY2ssIFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSwgJycpO1xuICB9IHJldHVybiBzdGFjaztcbn07XG4iLCJ2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1jbGVhcicpO1xudmFyIEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlJyk7XG5cbi8vIG5vbi1zdGFuZGFyZCBWOFxudmFyIGNhcHR1cmVTdGFja1RyYWNlID0gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVycm9yLCBDLCBzdGFjaywgZHJvcEVudHJpZXMpIHtcbiAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSB7XG4gICAgaWYgKGNhcHR1cmVTdGFja1RyYWNlKSBjYXB0dXJlU3RhY2tUcmFjZShlcnJvciwgQyk7XG4gICAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZXJyb3IsICdzdGFjaycsIGNsZWFyRXJyb3JTdGFjayhzdGFjaywgZHJvcEVudHJpZXMpKTtcbiAgfVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKCdhJyk7XG4gIGlmICghKCdzdGFjaycgaW4gZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIDcpKTtcbiAgcmV0dXJuIGVycm9yLnN0YWNrICE9PSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xuXG52YXIgbmF0aXZlRXJyb3JUb1N0cmluZyA9IEVycm9yLnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIENocm9tZSAzMi0gaW5jb3JyZWN0bHkgY2FsbCBhY2Nlc3NvclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIHZhciBvYmplY3QgPSBjcmVhdGUoT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnbmFtZScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcyA9PT0gb2JqZWN0O1xuICAgIH0gfSkpO1xuICAgIGlmIChuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwob2JqZWN0KSAhPT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBGRjEwLSBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgbm9uLXN0cmluZ3NcbiAgcmV0dXJuIG5hdGl2ZUVycm9yVG9TdHJpbmcuY2FsbCh7IG1lc3NhZ2U6IDEsIG5hbWU6IDIgfSkgIT09ICcyOiAxJ1xuICAgIC8vIElFOCBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgZGVmYXVsdHNcbiAgICB8fCBuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwoe30pICE9PSAnRXJyb3InO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSU5DT1JSRUNUX1RPX1NUUklORyA/IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICB2YXIgTyA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KE8ubmFtZSwgJ0Vycm9yJyk7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoTy5tZXNzYWdlKTtcbiAgcmV0dXJuICFuYW1lID8gbWVzc2FnZSA6ICFtZXNzYWdlID8gbmFtZSA6IG5hbWUgKyAnOiAnICsgbWVzc2FnZTtcbn0gOiBuYXRpdmVFcnJvclRvU3RyaW5nO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW4oU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIGVsZW1lbnRMZW47XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50TGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoZWxlbWVudCk7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIodGFyZ2V0SW5kZXggKyAxKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1wcmV2ZW50ZXh0ZW5zaW9ucyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0KSB7XG4gIGFDYWxsYWJsZShmbik7XG4gIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlXG4gIHZhciB0ZXN0ID0gKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkuYmluZCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gJEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBqb2luKGxpc3QsICcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/ICRGdW5jdGlvbi5iaW5kIDogZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgRiA9IGFDYWxsYWJsZSh0aGlzKTtcbiAgdmFyIFByb3RvdHlwZSA9IEYucHJvdG90eXBlO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gY29uY2F0KHBhcnRBcmdzLCBhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoUHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBQcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpc1dpdGhCaW5kID0gTkFUSVZFX0JJTkQgJiYgRnVuY3Rpb25Qcm90b3R5cGUuYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdCkpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxuLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoViwgUCkge1xuICB2YXIgZnVuYyA9IFZbUF07XG4gIHJldHVybiBpc051bGxPclVuZGVmaW5lZChmdW5jKSA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZShmdW5jKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGR7MSwyfXw8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkezEsMn0pL2c7XG5cbi8vIGBHZXRTdWJzdGl0dXRpb25gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZShyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2hhckF0KGNoLCAwKSkge1xuICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICBjYXNlICdgJzogcmV0dXJuIHN0cmluZ1NsaWNlKHN0ciwgMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0cmluZ1NsaWNlKHN0ciwgdGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbc3RyaW5nU2xpY2UoY2gsIDEsIC0xKV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2hhckF0KGNoLCAxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoYXJBdChjaCwgMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaGFzb3duIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUgLS0gc2FmZVxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsIi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG52YXIgcGFjayA9IGZ1bmN0aW9uIChudW1iZXIsIG1hbnRpc3NhTGVuZ3RoLCBieXRlcykge1xuICB2YXIgYnVmZmVyID0gJEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gISRPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiAkT2JqZWN0KGl0KTtcbn0gOiAkT2JqZWN0O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgaXNDYWxsYWJsZShOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuLy8gYEluc3RhbGxFcnJvckNhdXNlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1lcnJvci1jYXVzZS8jc2VjLWVycm9yb2JqZWN0cy1pbnN0YWxsLWVycm9yLWNhdXNlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSAmJiAnY2F1c2UnIGluIG9wdGlvbnMpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywgJ2NhdXNlJywgb3B0aW9ucy5jYXVzZSk7XG4gIH1cbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBSRVFVSVJFRCA9IGZhbHNlO1xudmFyIE1FVEFEQVRBID0gdWlkKCdtZXRhJyk7XG52YXIgaWQgPSAwO1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArIGlkKyssIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBSRVFVSVJFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXNPd24oaXQsIE1FVEFEQVRBKSkgc2V0TWV0YWRhdGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG52YXIgZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICBtZXRhLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgUkVRVUlSRUQgPSB0cnVlO1xuICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZjtcbiAgdmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG4gIHZhciB0ZXN0ID0ge307XG4gIHRlc3RbTUVUQURBVEFdID0gMTtcblxuICAvLyBwcmV2ZW50IGV4cG9zaW5nIG9mIG1ldGFkYXRhIGtleVxuICBpZiAoZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0KS5sZW5ndGgpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlc3VsdFtpXSA9PT0gTUVUQURBVEEpIHtcbiAgICAgICAgICBzcGxpY2UocmVzdWx0LCBpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZS5mXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuYWJsZTogZW5hYmxlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqL1xuICBzdG9yZS5nZXQgPSBzdG9yZS5nZXQ7XG4gIHN0b3JlLmhhcyA9IHN0b3JlLmhhcztcbiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHN0b3JlLnNldChpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldChpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5oYXMoaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoaGFzT3duKGl0LCBTVEFURSkpIHRocm93IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PSAnQmlnSW50NjRBcnJheScgfHwga2xhc3MgPT0gJ0JpZ1VpbnQ2NEFycmF5Jztcbn07XG4iLCJ2YXIgJGRvY3VtZW50QWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWFsbCcpO1xuXG52YXIgZG9jdW1lbnRBbGwgPSAkZG9jdW1lbnRBbGwuYWxsO1xuXG4vLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nIHx8IGFyZ3VtZW50ID09PSBkb2N1bWVudEFsbDtcbn0gOiBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICByZXR1cm4gZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICYmIChoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJykgfHwgaGFzT3duKGRlc2NyaXB0b3IsICd3cml0YWJsZScpKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBJc0ludGVncmFsTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNpbnRlZ3JhbG51bWJlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1pc2ludGVnZXIgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyB3ZSBjYW4ndCB1c2UganVzdCBgaXQgPT0gbnVsbGAgc2luY2Ugb2YgYGRvY3VtZW50LmFsbGAgc3BlY2lhbCBjYXNlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90LWFlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSBudWxsIHx8IGl0ID09PSB1bmRlZmluZWQ7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCkgfHwgaXQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxubW9kdWxlLmV4cG9ydHMgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgJFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICByZXR1cm4gaXNDYWxsYWJsZSgkU3ltYm9sKSAmJiBpc1Byb3RvdHlwZU9mKCRTeW1ib2wucHJvdG90eXBlLCAkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBSZXN1bHRQcm90b3R5cGUgPSBSZXN1bHQucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgdW5ib3VuZEZ1bmN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7XG4gIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICB2YXIgSVNfUkVDT1JEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX1JFQ09SRCk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0KTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnLCBjb25kaXRpb24pO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfUkVDT1JEKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZS5pdGVyYXRvcjtcbiAgfSBlbHNlIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gSVNfUkVDT1JEID8gaXRlcmFibGUubmV4dCA6IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgaWYgKCFpbm5lclJlc3VsdCkge1xuICAgICAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpbm5lclJlc3VsdCA9IGNhbGwoaW5uZXJSZXN1bHQsIGl0ZXJhdG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbm5lckVycm9yID0gdHJ1ZTtcbiAgICBpbm5lclJlc3VsdCA9IGVycm9yO1xuICB9XG4gIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICBhbk9iamVjdChpbm5lclJlc3VsdCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgZGVmaW5lQnVpbHRJbihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBjYWxsKG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSAhaXNPYmplY3QoSXRlcmF0b3JQcm90b3R5cGUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbmVsc2UgaWYgKElTX1BVUkUpIEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtQEBpdGVyYXRvclxuaWYgKCFpc0NhbGxhYmxlKEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHtcbiAgZGVmaW5lQnVpbHRJbihJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5DT05GSUdVUkFCTEU7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxudmFyIENPTkZJR1VSQUJMRV9MRU5HVEggPSBERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAnbGVuZ3RoJywgeyB2YWx1ZTogOCB9KS5sZW5ndGggIT09IDg7XG59KTtcblxudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG52YXIgbWFrZUJ1aWx0SW4gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSwgb3B0aW9ucykge1xuICBpZiAoc3RyaW5nU2xpY2UoJFN0cmluZyhuYW1lKSwgMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgIG5hbWUgPSAnWycgKyByZXBsYWNlKCRTdHJpbmcobmFtZSksIC9eU3ltYm9sXFwoKFteKV0qKVxcKS8sICckMScpICsgJ10nO1xuICB9XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2V0dGVyKSBuYW1lID0gJ2dldCAnICsgbmFtZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXR0ZXIpIG5hbWUgPSAnc2V0ICcgKyBuYW1lO1xuICBpZiAoIWhhc093bih2YWx1ZSwgJ25hbWUnKSB8fCAoQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgJiYgdmFsdWUubmFtZSAhPT0gbmFtZSkpIHtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIHsgdmFsdWU6IG5hbWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICBlbHNlIHZhbHVlLm5hbWUgPSBuYW1lO1xuICB9XG4gIGlmIChDT05GSUdVUkFCTEVfTEVOR1RIICYmIG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdhcml0eScpICYmIHZhbHVlLmxlbmd0aCAhPT0gb3B0aW9ucy5hcml0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbGVuZ3RoJywgeyB2YWx1ZTogb3B0aW9ucy5hcml0eSB9KTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnY29uc3RydWN0b3InKSAmJiBvcHRpb25zLmNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAncHJvdG90eXBlJywgeyB3cml0YWJsZTogZmFsc2UgfSk7XG4gICAgLy8gaW4gVjggfiBDaHJvbWUgNTMsIHByb3RvdHlwZXMgb2Ygc29tZSBtZXRob2RzLCBsaWtlIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCwgYXJlIG5vbi13cml0YWJsZVxuICAgIH0gZWxzZSBpZiAodmFsdWUucHJvdG90eXBlKSB2YWx1ZS5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICBpZiAoIWhhc093bihzdGF0ZSwgJ3NvdXJjZScpKSB7XG4gICAgc3RhdGUuc291cmNlID0gam9pbihURU1QTEFURSwgdHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG5cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmUgLS0gcmVxdWlyZWRcbkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IG1ha2VCdWlsdEluKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSwgJ3RvU3RyaW5nJyk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXAgLS0gc2FmZVxudmFyIE1hcFByb3RvdHlwZSA9IE1hcC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWFwIC0tIHNhZmVcbiAgTWFwOiBNYXAsXG4gIHNldDogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLnNldCksXG4gIGdldDogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmdldCksXG4gIGhhczogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlLmhhcyksXG4gIHJlbW92ZTogdW5jdXJyeVRoaXMoTWFwUHJvdG90eXBlWydkZWxldGUnXSksXG4gIHByb3RvOiBNYXBQcm90b3R5cGVcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1leHBtMSAtLSBzYWZlXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gYE1hdGguZXhwbTFgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmV4cG0xXG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gbiA9PSAwID8gbiA6IG4gPiAtMWUtNiAmJiBuIDwgMWUtNiA/IG4gKyBuICogbiAvIDIgOiBleHAobikgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZnJvdW5kIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgdmFyICRhYnMgPSBhYnMobik7XG4gIHZhciAkc2lnbiA9IHNpZ24obik7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsInZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cxMEUgPSBNYXRoLkxPRzEwRTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMTAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzEwIHx8IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgcmV0dXJuIGxvZyh4KSAqIExPRzEwRTtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMXAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuIG4gPiAtMWUtOCAmJiBuIDwgMWUtOCA/IG4gLSBuICogbiAvIDIgOiBsb2coMSArIG4pO1xufTtcbiIsIi8vIGBNYXRoLnNpZ25gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpZ25cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLXNpZ24gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIHZhciBuID0gK3g7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiBuID09IDAgfHwgbiAhPSBuID8gbiA6IG4gPCAwID8gLTEgOiAxO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC10cnVuYyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19JT1NfUEVCQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MtcGViYmxlJyk7XG52YXIgSVNfV0VCT1NfV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBtaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xudmFyIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFtaWNyb3Rhc2spIHtcbiAgdmFyIHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGZuID0gcXVldWUuZ2V0KCkpIHRyeSB7XG4gICAgICBmbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAocXVldWUuaGVhZCkgbm90aWZ5KCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmICghSVNfSU9TX1BFQkJMRSAmJiBQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIC8vIHdvcmthcm91bmQgb2YgV2ViS2l0IH4gaU9TIFNhZmFyaSAxMC4xIGJ1Z1xuICAgIHByb21pc2UuY29uc3RydWN0b3IgPSBQcm9taXNlO1xuICAgIHRoZW4gPSBiaW5kKHByb21pc2UudGhlbiwgcHJvbWlzZSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ2VcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgLy8gYHdlYnBhY2tgIGRldiBzZXJ2ZXIgYnVnIG9uIElFIGdsb2JhbCBtZXRob2RzIC0gdXNlIGJpbmQoZm4sIGdsb2JhbClcbiAgICBtYWNyb3Rhc2sgPSBiaW5kKG1hY3JvdGFzaywgZ2xvYmFsKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBtYWNyb3Rhc2soZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICBtaWNyb3Rhc2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICBpZiAoIXF1ZXVlLmhlYWQpIG5vdGlmeSgpO1xuICAgIHF1ZXVlLmFkZChmbik7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWljcm90YXNrO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93ICRUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFDYWxsYWJsZShyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhQ2FsbGFibGUocmVqZWN0KTtcbn07XG5cbi8vIGBOZXdQcm9taXNlQ2FwYWJpbGl0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCAkZGVmYXVsdCkge1xuICByZXR1cm4gYXJndW1lbnQgPT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gJycgOiAkZGVmYXVsdCA6IHRvU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGdsb2JhbElzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLWlzZmluaXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgZ2xvYmFsSXNGaW5pdGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciAkcGFyc2VGbG9hdCA9IGdsb2JhbC5wYXJzZUZsb2F0O1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgSVRFUkFUT1IgPSBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZPUkNFRCA9IDEgLyAkcGFyc2VGbG9hdCh3aGl0ZXNwYWNlcyArICctMCcpICE9PSAtSW5maW5pdHlcbiAgLy8gTVMgRWRnZSAxOC0gYnJva2VuIHdpdGggYm94ZWQgc3ltYm9sc1xuICB8fCAoSVRFUkFUT1IgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsgJHBhcnNlRmxvYXQoT2JqZWN0KElURVJBVE9SKSk7IH0pKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICB2YXIgdHJpbW1lZFN0cmluZyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdCh0cmltbWVkU3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBjaGFyQXQodHJpbW1lZFN0cmluZywgMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyICRwYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIElURVJBVE9SID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBoZXggPSAvXlsrLV0/MHgvaTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoaGV4LmV4ZWMpO1xudmFyIEZPUkNFRCA9ICRwYXJzZUludCh3aGl0ZXNwYWNlcyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3aGl0ZXNwYWNlcyArICcweDE2JykgIT09IDIyXG4gIC8vIE1TIEVkZ2UgMTgtIGJyb2tlbiB3aXRoIGJveGVkIHN5bWJvbHNcbiAgfHwgKElURVJBVE9SICYmICFmYWlscyhmdW5jdGlvbiAoKSB7ICRwYXJzZUludChPYmplY3QoSVRFUkFUT1IpKTsgfSkpO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkge1xuICB2YXIgUyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHJldHVybiAkcGFyc2VJbnQoUywgKHJhZGl4ID4+PiAwKSB8fCAoZXhlYyhoZXgsIFMpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgJGFzc2lnbih7IGI6IDEgfSwgJGFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3ltYm9sIC0tIHNhZmVcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChvYmplY3RLZXlzKFMpLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZSwgUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgLS0gb2xkIElFLCBXU0ggKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gICAgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50XG4gICAgICA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSAvLyBvbGQgSUVcbiAgICAgIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKClcbiAgICA6IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KTsgLy8gV1NIXG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1jcmVhdGUgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllc01vZHVsZS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgJFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBhcnJheVNsaWNlKHdpbmRvd05hbWVzKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIGNsYXNzb2YoaXQpID09ICdXaW5kb3cnXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyAkT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzT3duKG9iamVjdCwgSUVfUFJPVE8pKSByZXR1cm4gb2JqZWN0W0lFX1BST1RPXTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiAkT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGlzRXh0ZW5zaWJsZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxubW9kdWxlLmV4cG9ydHMgPSAoRkFJTFNfT05fUFJJTUlUSVZFUyB8fCBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUpID8gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZTtcbn0gOiAkaXNFeHRlbnNpYmxlO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxuLy8gRm9yY2VkIHJlcGxhY2VtZW50IG9iamVjdCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gSVNfUFVSRSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBUaGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGNyYXNoZXMgb2xkIFdlYktpdFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjMyXG4gIGlmIChXRUJLSVQgJiYgV0VCS0lUIDwgNTM1KSByZXR1cm47XG4gIHZhciBrZXkgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbCwgZXMvbm8tbGVnYWN5LW9iamVjdC1wcm90b3R5cGUtYWNjZXNzb3ItbWV0aG9kcyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwga2V5LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgZ2xvYmFsW2tleV07XG59KTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHNldHRlciA9IHVuY3VycnlUaGlzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCk7XG4gICAgc2V0dGVyKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpLmY7XG5cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHVuY3VycnlUaGlzKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlKE8sIGtleSkpIHtcbiAgICAgICAgcHVzaChyZXN1bHQsIFRPX0VOVFJJRVMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgT2JqZWN0LmVudHJpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4gIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiAgdmFsdWVzOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19ERU5PID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xudmFyIE5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCA9IGlzQ2FsbGFibGUoZ2xvYmFsLlByb21pc2VSZWplY3Rpb25FdmVudCk7XG5cbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IGlzRm9yY2VkKCdQcm9taXNlJywgZnVuY3Rpb24gKCkge1xuICB2YXIgUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgPSBpbnNwZWN0U291cmNlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgIT09IFN0cmluZyhOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IpO1xuICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAvLyBXZSBuZWVkIFByb21pc2UjeyBjYXRjaCwgZmluYWxseSB9IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhKE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2NhdGNoJ10gJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZVsnZmluYWxseSddKSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmICghVjhfVkVSU0lPTiB8fCBWOF9WRVJTSU9OIDwgNTEgfHwgIS9uYXRpdmUgY29kZS8udGVzdChQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSkpIHtcbiAgICAvLyBEZXRlY3QgY29ycmVjdG5lc3Mgb2Ygc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gbmV3IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gICAgfTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gICAgaWYgKCFTVUJDTEFTU0lORykgcmV0dXJuIHRydWU7XG4gIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgfSByZXR1cm4gIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgKElTX0JST1dTRVIgfHwgSVNfREVOTykgJiYgIU5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ09OU1RSVUNUT1I6IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SLFxuICBSRUpFQ1RJT05fRVZFTlQ6IE5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCxcbiAgU1VCQ0xBU1NJTkc6IFNVQkNMQVNTSU5HXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG5cbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSkudGhlbih1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVGFyZ2V0LCBTb3VyY2UsIGtleSkge1xuICBrZXkgaW4gVGFyZ2V0IHx8IGRlZmluZVByb3BlcnR5KFRhcmdldCwga2V5LCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU291cmNlW2tleV07IH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgU291cmNlW2tleV0gPSBpdDsgfVxuICB9KTtcbn07XG4iLCJ2YXIgUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaGVhZCA9IG51bGw7XG4gIHRoaXMudGFpbCA9IG51bGw7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgZW50cnkgPSB7IGl0ZW06IGl0ZW0sIG5leHQ6IG51bGwgfTtcbiAgICB2YXIgdGFpbCA9IHRoaXMudGFpbDtcbiAgICBpZiAodGFpbCkgdGFpbC5uZXh0ID0gZW50cnk7XG4gICAgZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5oZWFkO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgdmFyIG5leHQgPSB0aGlzLmhlYWQgPSBlbnRyeS5uZXh0O1xuICAgICAgaWYgKG5leHQgPT09IG51bGwpIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICByZXR1cm4gZW50cnkuaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93ICRUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJ3Qgd29yayBmb3IgLyguPyk/L1xuICAgICAgY2FsbChuYXRpdmVSZXBsYWNlLCBtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoICYmIGdyb3Vwcykge1xuICAgICAgbWF0Y2guZ3JvdXBzID0gb2JqZWN0ID0gY3JlYXRlKG51bGwpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBncm91cCA9IGdyb3Vwc1tpXTtcbiAgICAgICAgb2JqZWN0W2dyb3VwWzBdXSA9IG1hdGNoW2dyb3VwWzFdXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmhhc0luZGljZXMpIHJlc3VsdCArPSAnZCc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnVuaWNvZGVTZXRzKSByZXN1bHQgKz0gJ3YnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSKSB7XG4gIHZhciBmbGFncyA9IFIuZmxhZ3M7XG4gIHJldHVybiBmbGFncyA9PT0gdW5kZWZpbmVkICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpICYmICFoYXNPd24oUiwgJ2ZsYWdzJykgJiYgaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIFIpXG4gICAgPyBjYWxsKHJlZ0V4cEZsYWdzLCBSKSA6IGZsYWdzO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISRSZWdFeHAoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc3MzY4N1xuICB2YXIgcmUgPSAkUmVnRXhwKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLmV4ZWMoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCJ2YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgRU5HSU5FX0lTX0JVTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtYnVuJyk7XG52YXIgVVNFUl9BR0VOVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG5cbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbi8vIGRpcnR5IElFOS0gYW5kIEJ1biAwLjMuMC0gY2hlY2tzXG52YXIgV1JBUCA9IC9NU0lFIC5cXC4vLnRlc3QoVVNFUl9BR0VOVCkgfHwgRU5HSU5FX0lTX0JVTiAmJiAoZnVuY3Rpb24gKCkge1xuICB2YXIgdmVyc2lvbiA9IGdsb2JhbC5CdW4udmVyc2lvbi5zcGxpdCgnLicpO1xuICByZXR1cm4gdmVyc2lvbi5sZW5ndGggPCAzIHx8IHZlcnNpb25bMF0gPT0gMCAmJiAodmVyc2lvblsxXSA8IDMgfHwgdmVyc2lvblsxXSA9PSAzICYmIHZlcnNpb25bMl0gPT0gMCk7XG59KSgpO1xuXG4vLyBJRTktIC8gQnVuIDAuMy4wLSBzZXRUaW1lb3V0IC8gc2V0SW50ZXJ2YWwgLyBzZXRJbW1lZGlhdGUgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCN0aW1lcnNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vdmVuLXNoL2J1bi9pc3N1ZXMvMTYzM1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBoYXNUaW1lQXJnKSB7XG4gIHZhciBmaXJzdFBhcmFtSW5kZXggPSBoYXNUaW1lQXJnID8gMiA6IDE7XG4gIHJldHVybiBXUkFQID8gZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQgLyogLCAuLi5hcmd1bWVudHMgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSkgPiBmaXJzdFBhcmFtSW5kZXg7XG4gICAgdmFyIGZuID0gaXNDYWxsYWJsZShoYW5kbGVyKSA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKTtcbiAgICB2YXIgcGFyYW1zID0gYm91bmRBcmdzID8gYXJyYXlTbGljZShhcmd1bWVudHMsIGZpcnN0UGFyYW1JbmRleCkgOiBbXTtcbiAgICB2YXIgY2FsbGJhY2sgPSBib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICBhcHBseShmbiwgdGhpcywgcGFyYW1zKTtcbiAgICB9IDogZm47XG4gICAgcmV0dXJuIGhhc1RpbWVBcmcgPyBzY2hlZHVsZXIoY2FsbGJhY2ssIHRpbWVvdXQpIDogc2NoZWR1bGVyKGNhbGxiYWNrKTtcbiAgfSA6IHNjaGVkdWxlcjtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zZXQgLS0gc2FmZVxudmFyIFNldFByb3RvdHlwZSA9IFNldC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc2V0IC0tIHNhZmVcbiAgU2V0OiBTZXQsXG4gIGFkZDogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlLmFkZCksXG4gIGhhczogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlLmhhcyksXG4gIHJlbW92ZTogdW5jdXJyeVRoaXMoU2V0UHJvdG90eXBlWydkZWxldGUnXSksXG4gIHByb3RvOiBTZXRQcm90b3R5cGUsXG4gICRoYXM6IFNldFByb3RvdHlwZS5oYXMsXG4gICRrZXlzOiBTZXRQcm90b3R5cGUua2V5c1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjI3LjInLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMyBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjI3LjIvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgaXNOdWxsT3JVbmRlZmluZWQoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFDb25zdHJ1Y3RvcihTKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gY2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBhIG1ldGhvZCwgbG93ZXJjYXNlXG4vLyBvZiBhIHRhZyBhbmQgZXNjYXBpbmcgcXVvdGVzIGluIGFyZ3VtZW50c1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW01FVEhPRF9OQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXJPckluZmluaXR5KHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IGNoYXJBdChTLCBwb3NpdGlvbilcbiAgICAgICAgICA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IHN0cmluZ1NsaWNlKFMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpXG4gICAgICAgICAgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9WZXJzaW9uXFwvMTAoPzpcXC5cXGQrKXsxLDJ9KD86IFtcXHcuL10rKT8oPzogTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgcmVwZWF0ID0gdW5jdXJyeVRoaXMoJHJlcGVhdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBwYWRTdGFydCwgcGFkRW5kIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IHRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuICAgIHZhciBmaWxsTGVuLCBzdHJpbmdGaWxsZXI7XG4gICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gICAgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgICBzdHJpbmdGaWxsZXIgPSByZXBlYXQoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ1NsaWNlKHN0cmluZ0ZpbGxlciwgMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzL2Jsb2IvbWFzdGVyL3B1bnljb2RlLmpzXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bLlxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xudmFyIE9WRVJGTE9XX0VSUk9SID0gJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJztcbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKHJlZ2V4U2VwYXJhdG9ycy5leGVjKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgdG9Mb3dlckNhc2UgPSB1bmN1cnJ5VGhpcygnJy50b0xvd2VyQ2FzZSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICovXG52YXIgdWNzMmRlY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspO1xuICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgZXh0cmEgPSBjaGFyQ29kZUF0KHN0cmluZywgY291bnRlcisrKTtcbiAgICAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBMb3cgc3Vycm9nYXRlLlxuICAgICAgICBwdXNoKG91dHB1dCwgKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBwdXNoKG91dHB1dCwgdmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqL1xudmFyIGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uIChkaWdpdCkge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKi9cbnZhciBhZGFwdCA9IGZ1bmN0aW9uIChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcbiAgdmFyIGsgPSAwO1xuICBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG4gIHdoaWxlIChkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDEpIHtcbiAgICBkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG4gICAgayArPSBiYXNlO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuICAvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gIHZhciBuID0gaW5pdGlhbE47XG4gIHZhciBkZWx0YSA9IDA7XG4gIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG4gIHZhciBpLCBjdXJyZW50VmFsdWU7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgcHVzaChvdXRwdXQsIGRlbGltaXRlcik7XG4gIH1cblxuICAvLyBNYWluIGVuY29kaW5nIGxvb3A6XG4gIHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG4gICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dCBsYXJnZXIgb25lOlxuICAgIHZhciBtID0gbWF4SW50O1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuICAgICAgICBtID0gY3VycmVudFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPiwgYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuXG4gICAgdmFyIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcbiAgICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuICAgICAgdGhyb3cgJFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuICAgICAgICB0aHJvdyAkUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHtcbiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG4gICAgICAgIHZhciBxID0gZGVsdGE7XG4gICAgICAgIHZhciBrID0gYmFzZTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG4gICAgICAgICAgaWYgKHEgPCB0KSBicmVhaztcbiAgICAgICAgICB2YXIgcU1pbnVzVCA9IHEgLSB0O1xuICAgICAgICAgIHZhciBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNUKSkpO1xuICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG4gICAgICAgICAgayArPSBiYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSkpKTtcbiAgICAgICAgYmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcbiAgICAgICAgZGVsdGEgPSAwO1xuICAgICAgICBoYW5kbGVkQ1BDb3VudCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRlbHRhKys7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBqb2luKG91dHB1dCwgJycpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGVuY29kZWQgPSBbXTtcbiAgdmFyIGxhYmVscyA9IHNwbGl0KHJlcGxhY2UodG9Mb3dlckNhc2UoaW5wdXQpLCByZWdleFNlcGFyYXRvcnMsICdcXHUwMDJFJyksICcuJyk7XG4gIHZhciBpLCBsYWJlbDtcbiAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxhYmVsID0gbGFiZWxzW2ldO1xuICAgIHB1c2goZW5jb2RlZCwgZXhlYyhyZWdleE5vbkFTQ0lJLCBsYWJlbCkgPyAneG4tLScgKyBlbmNvZGUobGFiZWwpIDogbGFiZWwpO1xuICB9XG4gIHJldHVybiBqb2luKGVuY29kZWQsICcuJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXJPckluZmluaXR5KGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93ICRSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlc3VsdCArPSBzdHI7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICR0cmltRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykuZW5kO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUVuZCwgdHJpbVJpZ2h0IH1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1yaWdodFxubW9kdWxlLmV4cG9ydHMgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltRW5kJykgPyBmdW5jdGlvbiB0cmltRW5kKCkge1xuICByZXR1cm4gJHRyaW1FbmQodGhpcyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbUVuZDtcbiIsInZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKVxuICAgICAgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9PSBub25cbiAgICAgIHx8IChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUUpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnN0YXJ0O1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVN0YXJ0LCB0cmltTGVmdCB9YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1sZWZ0XG5tb2R1bGUuZXhwb3J0cyA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1TdGFydCcpID8gZnVuY3Rpb24gdHJpbVN0YXJ0KCkge1xuICByZXR1cm4gJHRyaW1TdGFydCh0aGlzKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1zdGFydC10cmltZW5kIC0tIHNhZmVcbn0gOiAnJy50cmltU3RhcnQ7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgcnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIHJldHVybiAhU3RyaW5nKHN5bWJvbCkgfHwgIShPYmplY3Qoc3ltYm9sKSBpbnN0YW5jZW9mIFN5bWJvbCkgfHxcbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTtcbn0pO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgdmFyIFN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbCAmJiBTeW1ib2wucHJvdG90eXBlO1xuICB2YXIgdmFsdWVPZiA9IFN5bWJvbFByb3RvdHlwZSAmJiBTeW1ib2xQcm90b3R5cGUudmFsdWVPZjtcbiAgdmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuICBpZiAoU3ltYm9sUHJvdG90eXBlICYmICFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICAgIC8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgLmxlbmd0aFxuICAgIGRlZmluZUJ1aWx0SW4oU3ltYm9sUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgICByZXR1cm4gY2FsbCh2YWx1ZU9mLCB0aGlzKTtcbiAgICB9LCB7IGFyaXR5OiAxIH0pO1xuICB9XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gc2FmZSAqL1xubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MICYmICEhU3ltYm9sWydmb3InXSAmJiAhIVN5bWJvbC5rZXlGb3I7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgRnVuY3Rpb24gPSBnbG9iYWwuRnVuY3Rpb247XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyICRsb2NhdGlvbiwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbmZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gRGVubyB0aHJvd3MgYSBSZWZlcmVuY2VFcnJvciBvbiBgbG9jYXRpb25gIGFjY2VzcyB3aXRob3V0IGAtLWxvY2F0aW9uYCBmbGFnXG4gICRsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbn0pO1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIGlmIChoYXNPd24ocXVldWUsIGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIGdsb2JhbFBvc3RNZXNzYWdlRGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCAkbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgJGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShoYW5kbGVyKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGZuID0gaXNDYWxsYWJsZShoYW5kbGVyKSA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKTtcbiAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoZm4sIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoSVNfTk9ERSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBldmVudExpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0KTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICBpc0NhbGxhYmxlKGdsb2JhbC5wb3N0TWVzc2FnZSkgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICAkbG9jYXRpb24gJiYgJGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKGdsb2JhbFBvc3RNZXNzYWdlRGVmZXIpXG4gICkge1xuICAgIGRlZmVyID0gZ2xvYmFsUG9zdE1lc3NhZ2VEZWZlcjtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGB0aGlzTnVtYmVyVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10aGlzbnVtYmVydmFsdWVcbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoMS4wLnZhbHVlT2YpO1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFRvQmlnSW50YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9iaWdpbnRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBwcmltID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBwcmltID09ICdudW1iZXInKSB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBudW1iZXIgdG8gYmlnaW50XCIpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYmlnaW50IC0tIHNhZmVcbiAgcmV0dXJuIEJpZ0ludChwcmltKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93ICRSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGggb3IgaW5kZXgnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgJFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICByZXR1cm4gb2Zmc2V0O1xufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaXQpO1xuICBpZiAocmVzdWx0IDwgMCkgdGhyb3cgJFJhbmdlRXJyb3IoXCJUaGUgYXJndW1lbnQgY2FuJ3QgYmUgbGVzcyB0aGFuIDBcIik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNhZmVcbiAgICBpZiAoSVNfTk9ERSkgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gcmVxdWlyZShcIicgKyBuYW1lICsgJ1wiKScpKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG4iLCJ2YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gQXJyYXlCdWZmZXIucHJvdG90eXBlO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX1RBRztcbnZhciBUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5O1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXlQcm90b3R5cGU7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBpc1R5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVHlwZWRBcnJheTtcbnZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG5cbnZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXNQcm90b3R5cGVPZihBcnJheUJ1ZmZlclByb3RvdHlwZSwgaXQpIHx8IChrbGFzcyA9IGNsYXNzb2YoaXQpKSA9PSAnQXJyYXlCdWZmZXInIHx8IGtsYXNzID09ICdTaGFyZWRBcnJheUJ1ZmZlcic7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5SW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheSh0YXJnZXQpXG4gICAgJiYgIWlzU3ltYm9sKGtleSlcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgaXNJbnRlZ3JhbE51bWJlcigra2V5KVxuICAgICYmIGtleSA+PSAwO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICByZXR1cm4gaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgPyBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMiwgdGFyZ2V0W2tleV0pXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xufTtcblxudmFyIHdyYXBwZWREZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5KVxuICAgICYmIGlzT2JqZWN0KGRlc2NyaXB0b3IpXG4gICAgJiYgaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgJiYgIWhhc093bihkZXNjcmlwdG9yLCAnZ2V0JylcbiAgICAmJiAhaGFzT3duKGRlc2NyaXB0b3IsICdzZXQnKVxuICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlXG4gICAgJiYgKCFoYXNPd24oZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykgfHwgZGVzY3JpcHRvci53cml0YWJsZSlcbiAgICAmJiAoIWhhc093bihkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSlcbiAgKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9IHdyYXBwZWREZWZpbmVQcm9wZXJ0eTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZU9mZnNldCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnbGVuZ3RoJyk7XG4gIH1cblxuICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiB3cmFwcGVkRGVmaW5lUHJvcGVydHlcbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIHZhciBCWVRFUyA9IFRZUEUubWF0Y2goL1xcZCskLylbMF0gLyA4O1xuICAgIHZhciBDT05TVFJVQ1RPUl9OQU1FID0gVFlQRSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBUWVBFO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIFRZUEU7XG4gICAgdmFyIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHJldHVybiBkYXRhLnZpZXdbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IHJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhGRiA/IDB4RkYgOiB2YWx1ZSAmIDB4RkY7XG4gICAgICBkYXRhLnZpZXdbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsIG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIGJ5dGVPZmZzZXQgPSB0b09mZnNldChvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSgpLCBkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBmb3JFYWNoKGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIGtleSwgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGU7XG4gICAgfVxuXG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkuVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICB2YXIgRk9SQ0VEID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yICE9IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCBleHBvcnRlZCk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBnbG9iYWwuQXJyYXlCdWZmZXI7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkoMSk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuZXcgSW50OEFycmF5KC0xKTtcbn0pIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIG5ldyBJbnQ4QXJyYXkoKTtcbiAgbmV3IEludDhBcnJheShudWxsKTtcbiAgbmV3IEludDhBcnJheSgxLjUpO1xuICBuZXcgSW50OEFycmF5KGl0ZXJhYmxlKTtcbn0sIHRydWUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gU2FmYXJpICgxMSspIGJ1ZyAtIGEgcmVhc29uIHdoeSBldmVuIFNhZmFyaSAxMyBzaG91bGQgbG9hZCBhIHR5cGVkIGFycmF5IHBvbHlmaWxsXG4gIHJldHVybiBuZXcgSW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcigyKSwgMSwgdW5kZWZpbmVkKS5sZW5ndGggIT09IDE7XG59KTtcbiIsInZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbGlzdCkge1xuICByZXR1cm4gYXJyYXlGcm9tQ29uc3RydWN0b3JBbmRMaXN0KHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoaW5zdGFuY2UpLCBsaXN0KTtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0JpZ0ludEFycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWJpZy1pbnQtYXJyYXknKTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIHRvQmlnSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWJpZy1pbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBDID0gYUNvbnN0cnVjdG9yKHRoaXMpO1xuICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaSwgbGVuZ3RoLCByZXN1bHQsIHRoaXNJc0JpZ0ludEFycmF5LCB2YWx1ZSwgc3RlcCwgaXRlcmF0b3IsIG5leHQ7XG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIE8gPSBbXTtcbiAgICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgIE8ucHVzaChzdGVwLnZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hcHBpbmcgJiYgYXJndW1lbnRzTGVuZ3RoID4gMikge1xuICAgIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzWzJdKTtcbiAgfVxuICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKEMpKShsZW5ndGgpO1xuICB0aGlzSXNCaWdJbnRBcnJheSA9IGlzQmlnSW50QXJyYXkocmVzdWx0KTtcbiAgZm9yIChpID0gMDsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIC8vIEZGMzAtIHR5cGVkIGFycmF5cyBkb2Vzbid0IHByb3Blcmx5IGNvbnZlcnQgb2JqZWN0cyB0byB0eXBlZCBhcnJheSB2YWx1ZXNcbiAgICByZXN1bHRbaV0gPSB0aGlzSXNCaWdJbnRBcnJheSA/IHRvQmlnSW50KHZhbHVlKSA6ICt2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuLy8gYSBwYXJ0IG9mIGBUeXBlZEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jdHlwZWRhcnJheS1zcGVjaWVzLWNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICByZXR1cm4gYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSwgZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXkpKSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3JlbGF0aXZlLXVybC1zdHlsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgdXJsID0gbmV3IFVSTCgnYj9hPTEmYj0yJmM9MycsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTtcbiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pXG4gICAgfHwgIXNlYXJjaFBhcmFtcy5zb3J0XG4gICAgfHwgdXJsLmhyZWYgIT09ICdodHRwOi8vYS9jJTIwZD9hPTEmYz0zJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSdcbiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtXG4gICAgfHwgcmVzdWx0ICE9PSAnYTFjMydcbiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4Jztcbn0pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDM2LVxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzMzNFxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT0gNDI7XG59KTtcbiIsInZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzZWQsIHJlcXVpcmVkKSB7XG4gIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgJFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbiAgcmV0dXJuIHBhc3NlZDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcCkpO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXNPd24oU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2xbJ2ZvciddIHx8IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSlcbiAgICAgID8gU3ltYm9sW25hbWVdXG4gICAgICA6IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIHByb3h5QWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJveHktYWNjZXNzb3InKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIGluc3RhbGxFcnJvckNhdXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3RhbGwtZXJyb3ItY2F1c2UnKTtcbnZhciBpbnN0YWxsRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoRlVMTF9OQU1FLCB3cmFwcGVyLCBGT1JDRUQsIElTX0FHR1JFR0FURV9FUlJPUikge1xuICB2YXIgU1RBQ0tfVFJBQ0VfTElNSVQgPSAnc3RhY2tUcmFjZUxpbWl0JztcbiAgdmFyIE9QVElPTlNfUE9TSVRJT04gPSBJU19BR0dSRUdBVEVfRVJST1IgPyAyIDogMTtcbiAgdmFyIHBhdGggPSBGVUxMX05BTUUuc3BsaXQoJy4nKTtcbiAgdmFyIEVSUk9SX05BTUUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIHZhciBPcmlnaW5hbEVycm9yID0gZ2V0QnVpbHRJbi5hcHBseShudWxsLCBwYXRoKTtcblxuICBpZiAoIU9yaWdpbmFsRXJyb3IpIHJldHVybjtcblxuICB2YXIgT3JpZ2luYWxFcnJvclByb3RvdHlwZSA9IE9yaWdpbmFsRXJyb3IucHJvdG90eXBlO1xuXG4gIC8vIFY4IDkuMy0gYnVnIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTEyMDA2XG4gIGlmICghSVNfUFVSRSAmJiBoYXNPd24oT3JpZ2luYWxFcnJvclByb3RvdHlwZSwgJ2NhdXNlJykpIGRlbGV0ZSBPcmlnaW5hbEVycm9yUHJvdG90eXBlLmNhdXNlO1xuXG4gIGlmICghRk9SQ0VEKSByZXR1cm4gT3JpZ2luYWxFcnJvcjtcblxuICB2YXIgQmFzZUVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTtcblxuICB2YXIgV3JhcHBlZEVycm9yID0gd3JhcHBlcihmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoSVNfQUdHUkVHQVRFX0VSUk9SID8gYiA6IGEsIHVuZGVmaW5lZCk7XG4gICAgdmFyIHJlc3VsdCA9IElTX0FHR1JFR0FURV9FUlJPUiA/IG5ldyBPcmlnaW5hbEVycm9yKGEpIDogbmV3IE9yaWdpbmFsRXJyb3IoKTtcbiAgICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnbWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgIGluc3RhbGxFcnJvclN0YWNrKHJlc3VsdCwgV3JhcHBlZEVycm9yLCByZXN1bHQuc3RhY2ssIDIpO1xuICAgIGlmICh0aGlzICYmIGlzUHJvdG90eXBlT2YoT3JpZ2luYWxFcnJvclByb3RvdHlwZSwgdGhpcykpIGluaGVyaXRJZlJlcXVpcmVkKHJlc3VsdCwgdGhpcywgV3JhcHBlZEVycm9yKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IE9QVElPTlNfUE9TSVRJT04pIGluc3RhbGxFcnJvckNhdXNlKHJlc3VsdCwgYXJndW1lbnRzW09QVElPTlNfUE9TSVRJT05dKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICBXcmFwcGVkRXJyb3IucHJvdG90eXBlID0gT3JpZ2luYWxFcnJvclByb3RvdHlwZTtcblxuICBpZiAoRVJST1JfTkFNRSAhPT0gJ0Vycm9yJykge1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoV3JhcHBlZEVycm9yLCBCYXNlRXJyb3IpO1xuICAgIGVsc2UgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhXcmFwcGVkRXJyb3IsIEJhc2VFcnJvciwgeyBuYW1lOiB0cnVlIH0pO1xuICB9IGVsc2UgaWYgKERFU0NSSVBUT1JTICYmIFNUQUNLX1RSQUNFX0xJTUlUIGluIE9yaWdpbmFsRXJyb3IpIHtcbiAgICBwcm94eUFjY2Vzc29yKFdyYXBwZWRFcnJvciwgT3JpZ2luYWxFcnJvciwgU1RBQ0tfVFJBQ0VfTElNSVQpO1xuICAgIHByb3h5QWNjZXNzb3IoV3JhcHBlZEVycm9yLCBPcmlnaW5hbEVycm9yLCAncHJlcGFyZVN0YWNrVHJhY2UnKTtcbiAgfVxuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoV3JhcHBlZEVycm9yLCBPcmlnaW5hbEVycm9yKTtcblxuICBpZiAoIUlTX1BVUkUpIHRyeSB7XG4gICAgLy8gU2FmYXJpIDEzLSBidWc6IFdlYkFzc2VtYmx5IGVycm9ycyBkb2VzIG5vdCBoYXZlIGEgcHJvcGVyIGAubmFtZWBcbiAgICBpZiAoT3JpZ2luYWxFcnJvclByb3RvdHlwZS5uYW1lICE9PSBFUlJPUl9OQU1FKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoT3JpZ2luYWxFcnJvclByb3RvdHlwZSwgJ25hbWUnLCBFUlJPUl9OQU1FKTtcbiAgICB9XG4gICAgT3JpZ2luYWxFcnJvclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdyYXBwZWRFcnJvcjtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gIHJldHVybiBXcmFwcGVkRXJyb3I7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcC1lcnJvci1jb25zdHJ1Y3Rvci13aXRoLWNhdXNlJyk7XG5cbnZhciBBR0dSRUdBVEVfRVJST1IgPSAnQWdncmVnYXRlRXJyb3InO1xudmFyICRBZ2dyZWdhdGVFcnJvciA9IGdldEJ1aWx0SW4oQUdHUkVHQVRFX0VSUk9SKTtcblxudmFyIEZPUkNFRCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkQWdncmVnYXRlRXJyb3IoWzFdKS5lcnJvcnNbMF0gIT09IDE7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkQWdncmVnYXRlRXJyb3IoWzFdLCBBR0dSRUdBVEVfRVJST1IsIHsgY2F1c2U6IDcgfSkuY2F1c2UgIT09IDc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBhcml0eTogMiwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBBZ2dyZWdhdGVFcnJvcjogd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UoQUdHUkVHQVRFX0VSUk9SLCBmdW5jdGlvbiAoaW5pdCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgZnVuY3Rpb25zIGAubGVuZ3RoYFxuICAgIHJldHVybiBmdW5jdGlvbiBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIH0sIEZPUkNFRCwgdHJ1ZSlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgaW5zdGFsbEVycm9yQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zdGFsbC1lcnJvci1jYXVzZScpO1xudmFyIGluc3RhbGxFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGwnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRFcnJvciA9IEVycm9yO1xudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG52YXIgJEFnZ3JlZ2F0ZUVycm9yID0gZnVuY3Rpb24gQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBtZXNzYWdlIC8qICwgb3B0aW9ucyAqLykge1xuICB2YXIgaXNJbnN0YW5jZSA9IGlzUHJvdG90eXBlT2YoQWdncmVnYXRlRXJyb3JQcm90b3R5cGUsIHRoaXMpO1xuICB2YXIgdGhhdDtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgdGhhdCA9IHNldFByb3RvdHlwZU9mKCRFcnJvcigpLCBpc0luc3RhbmNlID8gZ2V0UHJvdG90eXBlT2YodGhpcykgOiBBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhhdCA9IGlzSW5zdGFuY2UgPyB0aGlzIDogY3JlYXRlKEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlKTtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgVE9fU1RSSU5HX1RBRywgJ0Vycm9yJyk7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQobWVzc2FnZSkpO1xuICBpbnN0YWxsRXJyb3JTdGFjayh0aGF0LCAkQWdncmVnYXRlRXJyb3IsIHRoYXQuc3RhY2ssIDEpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIGluc3RhbGxFcnJvckNhdXNlKHRoYXQsIGFyZ3VtZW50c1syXSk7XG4gIHZhciBlcnJvcnNBcnJheSA9IFtdO1xuICBpdGVyYXRlKGVycm9ycywgcHVzaCwgeyB0aGF0OiBlcnJvcnNBcnJheSB9KTtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdlcnJvcnMnLCBlcnJvcnNBcnJheSk7XG4gIHJldHVybiB0aGF0O1xufTtcblxuaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZigkQWdncmVnYXRlRXJyb3IsICRFcnJvcik7XG5lbHNlIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoJEFnZ3JlZ2F0ZUVycm9yLCAkRXJyb3IsIHsgbmFtZTogdHJ1ZSB9KTtcblxudmFyIEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlID0gJEFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZSA9IGNyZWF0ZSgkRXJyb3IucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJEFnZ3JlZ2F0ZUVycm9yKSxcbiAgbWVzc2FnZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICcnKSxcbiAgbmFtZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICdBZ2dyZWdhdGVFcnJvcicpXG59KTtcblxuLy8gYEFnZ3JlZ2F0ZUVycm9yYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZ2dyZWdhdGUtZXJyb3ItY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBhcml0eTogMiB9LCB7XG4gIEFnZ3JlZ2F0ZUVycm9yOiAkQWdncmVnYXRlRXJyb3Jcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmNvbnN0cnVjdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xuXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBBcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyTW9kdWxlW0FSUkFZX0JVRkZFUl07XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcblxuLy8gYEFycmF5QnVmZmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogTmF0aXZlQXJyYXlCdWZmZXIgIT09IEFycmF5QnVmZmVyIH0sIHtcbiAgQXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyXG59KTtcblxuc2V0U3BlY2llcyhBUlJBWV9CVUZGRVIpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG4vLyBgQXJyYXlCdWZmZXIuaXNWaWV3YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIuaXN2aWV3XG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIHtcbiAgaXNWaWV3OiBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIERhdGFWaWV3UHJvdG90eXBlID0gRGF0YVZpZXcucHJvdG90eXBlO1xudmFyIG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UgPSB1bmN1cnJ5VGhpcyhBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UpO1xudmFyIGdldFVpbnQ4ID0gdW5jdXJyeVRoaXMoRGF0YVZpZXdQcm90b3R5cGUuZ2V0VWludDgpO1xudmFyIHNldFVpbnQ4ID0gdW5jdXJyeVRoaXMoRGF0YVZpZXdQcm90b3R5cGUuc2V0VWludDgpO1xuXG52YXIgSU5DT1JSRUNUX1NMSUNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyBBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KTtcblxuLy8gYEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS5zbGljZVxuJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgcHJvdG86IHRydWUsIHVuc2FmZTogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfU0xJQ0UgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmIChuYXRpdmVBcnJheUJ1ZmZlclNsaWNlICYmIGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmF0aXZlQXJyYXlCdWZmZXJTbGljZShhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1NvdXJjZSA9IG5ldyBEYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1RhcmdldCA9IG5ldyBEYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICBzZXRVaW50OCh2aWV3VGFyZ2V0LCBpbmRleCsrLCBnZXRVaW50OCh2aWV3U291cmNlLCBmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5hdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yZWxhdGl2ZS1pbmRleGluZy1tZXRob2RcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KGluZGV4KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIHJlbGF0aXZlSW5kZXggPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgICB2YXIgayA9IHJlbGF0aXZlSW5kZXggPj0gMCA/IHJlbGF0aXZlSW5kZXggOiBsZW4gKyByZWxhdGl2ZUluZGV4O1xuICAgIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogT1trXTtcbiAgfVxufSk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2F0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKEUpO1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobiArIGxlbik7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgMSk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb3B5V2l0aGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgY29weVdpdGhpbjogY29weVdpdGhpblxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5ldmVyeTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdldmVyeScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZpbGw6IGZpbGxcbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZGluZGV4XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB9LCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kSW5kZXgodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EX0lOREVYKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kTGFzdEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi1mcm9tLWxhc3QnKS5maW5kTGFzdEluZGV4O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZExhc3RJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaW5kTGFzdEluZGV4OiBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kTGFzdEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbmRMYXN0SW5kZXgnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kTGFzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24tZnJvbS1sYXN0JykuZmluZExhc3Q7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kTGFzdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaW5kTGFzdDogZnVuY3Rpb24gZmluZExhc3QoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmRMYXN0KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbmRMYXN0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EID0gJ2ZpbmQnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EIGluIFtdKSBBcnJheSgxKVtGSU5EXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mbGF0TWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRtYXBcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBBO1xuICAgIGFDYWxsYWJsZShjYWxsYmFja2ZuKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXQ6IGZ1bmN0aW9uIGZsYXQoLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlck9ySW5maW5pdHkoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gRkY5OSsgYnVnXG52YXIgQlJPS0VOX09OX1NQQVJTRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFBcnJheSgxKS5pbmNsdWRlcygpO1xufSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJST0tFTl9PTl9TUEFSU0UgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1pbmRleG9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSW5kZXhPZiA9IHVuY3VycnlUaGlzKFtdLmluZGV4T2YpO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gbmF0aXZlSW5kZXhPZihbMV0sIDEsIC0wKSA8IDA7XG52YXIgRk9SQ0VEID0gTkVHQVRJVkVfWkVSTyB8fCAhYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHZhciBmcm9tSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyBuYXRpdmVJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxuLy8gYEFycmF5LmlzQXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5pc2FycmF5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNBcnJheTogaXNBcnJheVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChpbmRleCwgZmFsc2UpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodGFyZ2V0W2luZGV4XSwgZmFsc2UpO1xuICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBmYWxzZSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3RcbnZhciB2YWx1ZXMgPSBJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuLy8gVjggfiBDaHJvbWUgNDUtIGJ1Z1xuaWYgKCFJU19QVVJFICYmIERFU0NSSVBUT1JTICYmIHZhbHVlcy5uYW1lICE9PSAndmFsdWVzJykgdHJ5IHtcbiAgZGVmaW5lUHJvcGVydHkodmFsdWVzLCAnbmFtZScsIHsgdmFsdWU6ICd2YWx1ZXMnIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSm9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBGT1JDRUQgPSBFUzNfU1RSSU5HUyB8fCAhYXJyYXlNZXRob2RJc1N0cmljdCgnam9pbicsICcsJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBuYXRpdmVKb2luKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxhc3RJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogbGFzdEluZGV4T2YgIT09IFtdLmxhc3RJbmRleE9mIH0sIHtcbiAgbGFzdEluZGV4T2Y6IGxhc3RJbmRleE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyICRBcnJheSA9IEFycmF5O1xuXG52YXIgSVNOVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1vZiAtLSBzYWZlXG4gIHJldHVybiAhKCRBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KTtcblxuLy8gYEFycmF5Lm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkub2Zcbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTTlRfR0VORVJJQyB9LCB7XG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChpc0NvbnN0cnVjdG9yKHRoaXMpID8gdGhpcyA6ICRBcnJheSkoYXJndW1lbnRzTGVuZ3RoKTtcbiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFyZ3VtZW50c0xlbmd0aDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgc2V0QXJyYXlMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2V0LWxlbmd0aCcpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIElOQ09SUkVDVF9UT19MRU5HVEggPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXS5wdXNoLmNhbGwoeyBsZW5ndGg6IDB4MTAwMDAwMDAwIH0sIDEpICE9PSA0Mjk0OTY3Mjk3O1xufSk7XG5cbi8vIFY4IGFuZCBTYWZhcmkgPD0gMTUuNCwgRkYgPCAyMyB0aHJvd3MgSW50ZXJuYWxFcnJvclxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MTI2ODFcbnZhciBwcm9wZXJFcnJvck9uTm9uV3JpdGFibGVMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFtdLCAnbGVuZ3RoJywgeyB3cml0YWJsZTogZmFsc2UgfSkucHVzaCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgfVxufTtcblxudmFyIEZPUkNFRCA9IElOQ09SUkVDVF9UT19MRU5HVEggfHwgIXByb3BlckVycm9yT25Ob25Xcml0YWJsZUxlbmd0aCgpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnB1c2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucHVzaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHB1c2g6IGZ1bmN0aW9uIHB1c2goaXRlbSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKGxlbiArIGFyZ0NvdW50KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ0NvdW50OyBpKyspIHtcbiAgICAgIE9bbGVuXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGxlbisrO1xuICAgIH1cbiAgICBzZXRBcnJheUxlbmd0aChPLCBsZW4pO1xuICAgIHJldHVybiBsZW47XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIENIUk9NRV9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG4vLyBDaHJvbWUgODAtODIgaGFzIGEgY3JpdGljYWwgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDQ5OTgyXG52YXIgQ0hST01FX0JVRyA9ICFJU19OT0RFICYmIENIUk9NRV9WRVJTSU9OID4gNzkgJiYgQ0hST01FX1ZFUlNJT04gPCA4MztcbnZhciBGT1JDRUQgPSBDSFJPTUVfQlVHIHx8ICFhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2VSaWdodCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlUmlnaHQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG52YXIgRk9SQ0VEID0gQ0hST01FX0JVRyB8fCAhYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG52YXIgbmF0aXZlUmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xudmFyIHRlc3QgPSBbMSwgMl07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4vLyBmaXggZm9yIFNhZmFyaSAxMi4wIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4ODc5NFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU3RyaW5nKHRlc3QpID09PSBTdHJpbmcodGVzdC5yZXZlcnNlKCkpIH0sIHtcbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ24gLS0gZGlydHkgaGFja1xuICAgIGlmIChpc0FycmF5KHRoaXMpKSB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHJldHVybiBuYXRpdmVSZXZlcnNlKHRoaXMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgbmF0aXZlU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSAkQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyAkQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29tZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaW50ZXJuYWxTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBGRiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbicpO1xudmFyIElFX09SX0VER0UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdW5jdXJyeVRoaXModGVzdC5zb3J0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXModGVzdC5wdXNoKTtcblxuLy8gSUU4LVxudmFyIEZBSUxTX09OX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KTtcbi8vIFY4IGJ1Z1xudmFyIEZBSUxTX09OX05VTEwgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydChudWxsKTtcbn0pO1xuLy8gT2xkIFdlYktpdFxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIGNhbiBiZSB0b28gc2xvdywgc28gY2hlY2sgZW5naW5lcyB2ZXJzaW9uc1xuICBpZiAoVjgpIHJldHVybiBWOCA8IDcwO1xuICBpZiAoRkYgJiYgRkYgPiAzKSByZXR1cm47XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMztcblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBjb2RlLCBjaHIsIHZhbHVlLCBpbmRleDtcblxuICAvLyBnZW5lcmF0ZSBhbiBhcnJheSB3aXRoIG1vcmUgNTEyIGVsZW1lbnRzIChDaGFrcmEgYW5kIG9sZCBWOCBmYWlscyBvbmx5IGluIHRoaXMgY2FzZSlcbiAgZm9yIChjb2RlID0gNjU7IGNvZGUgPCA3NjsgY29kZSsrKSB7XG4gICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcblxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSA2NjogY2FzZSA2OTogY2FzZSA3MDogY2FzZSA3MjogdmFsdWUgPSAzOyBicmVhaztcbiAgICAgIGNhc2UgNjg6IGNhc2UgNzE6IHZhbHVlID0gNDsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB2YWx1ZSA9IDI7XG4gICAgfVxuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDc7IGluZGV4KyspIHtcbiAgICAgIHRlc3QucHVzaCh7IGs6IGNociArIGluZGV4LCB2OiB2YWx1ZSB9KTtcbiAgICB9XG4gIH1cblxuICB0ZXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIudiAtIGEudjsgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGVzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSB0ZXN0W2luZGV4XS5rLmNoYXJBdCgwKTtcbiAgICBpZiAocmVzdWx0LmNoYXJBdChyZXN1bHQubGVuZ3RoIC0gMSkgIT09IGNocikgcmVzdWx0ICs9IGNocjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgIT09ICdER0JFRkhBQ0lKSyc7XG59KTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRCB8fCAhU1RBQkxFX1NPUlQ7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKHkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHJldHVybiAxO1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgcmV0dXJuICtjb21wYXJlZm4oeCwgeSkgfHwgMDtcbiAgICByZXR1cm4gdG9TdHJpbmcoeCkgPiB0b1N0cmluZyh5KSA/IDEgOiAtMTtcbiAgfTtcbn07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVmbik7XG5cbiAgICB2YXIgYXJyYXkgPSB0b09iamVjdCh0aGlzKTtcblxuICAgIGlmIChTVEFCTEVfU09SVCkgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkID8gbmF0aXZlU29ydChhcnJheSkgOiBuYXRpdmVTb3J0KGFycmF5LCBjb21wYXJlZm4pO1xuXG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdmFyIGFycmF5TGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoYXJyYXkpO1xuICAgIHZhciBpdGVtc0xlbmd0aCwgaW5kZXg7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGluZGV4IGluIGFycmF5KSBwdXNoKGl0ZW1zLCBhcnJheVtpbmRleF0pO1xuICAgIH1cblxuICAgIGludGVybmFsU29ydChpdGVtcywgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG5cbiAgICBpdGVtc0xlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGl0ZW1zKTtcbiAgICBpbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBpdGVtc0xlbmd0aCkgYXJyYXlbaW5kZXhdID0gaXRlbXNbaW5kZXgrK107XG4gICAgd2hpbGUgKGluZGV4IDwgYXJyYXlMZW5ndGgpIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhhcnJheSwgaW5kZXgrKyk7XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXktQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBzZXRBcnJheUxlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBkZWxldGVQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVsZXRlLXByb3BlcnR5LW9yLXRocm93Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXJPckluZmluaXR5KGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICBmcm9tID0gYWN0dWFsU3RhcnQgKyBrO1xuICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgfVxuICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgaWYgKGluc2VydENvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudDtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCB0byk7XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCBrIC0gMSk7XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCB0byk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IDA7IGsgPCBpbnNlcnRDb3VudDsgaysrKSB7XG4gICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgIH1cbiAgICBzZXRBcnJheUxlbmd0aChPLCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50KTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvLyB0aGlzIG1ldGhvZCB3YXMgYWRkZWQgdG8gdW5zY29wYWJsZXMgYWZ0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGluIHBvcHVsYXIgZW5naW5lcywgc28gaXQncyBtb3ZlZCB0byBhIHNlcGFyYXRlIG1vZHVsZVxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZsYXRNYXAnKTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBzZXRBcnJheUxlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG5cbi8vIElFOC1cbnZhciBJTkNPUlJFQ1RfUkVTVUxUID0gW10udW5zaGlmdCgwKSAhPT0gMTtcblxuLy8gVjggfiBDaHJvbWUgPCA3MSBhbmQgU2FmYXJpIDw9IDE1LjQsIEZGIDwgMjMgdGhyb3dzIEludGVybmFsRXJyb3JcbnZhciBwcm9wZXJFcnJvck9uTm9uV3JpdGFibGVMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFtdLCAnbGVuZ3RoJywgeyB3cml0YWJsZTogZmFsc2UgfSkudW5zaGlmdCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgfVxufTtcblxudmFyIEZPUkNFRCA9IElOQ09SUkVDVF9SRVNVTFQgfHwgIXByb3BlckVycm9yT25Ob25Xcml0YWJsZUxlbmd0aCgpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnVuc2hpZnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudW5zaGlmdFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHVuc2hpZnQ6IGZ1bmN0aW9uIHVuc2hpZnQoaXRlbSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGFyZ0NvdW50KSB7XG4gICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobGVuICsgYXJnQ291bnQpO1xuICAgICAgdmFyIGsgPSBsZW47XG4gICAgICB3aGlsZSAoay0tKSB7XG4gICAgICAgIHZhciB0byA9IGsgKyBhcmdDb3VudDtcbiAgICAgICAgaWYgKGsgaW4gTykgT1t0b10gPSBPW2tdO1xuICAgICAgICBlbHNlIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhPLCB0byk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyZ0NvdW50OyBqKyspIHtcbiAgICAgICAgT1tqXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgIH1cbiAgICB9IHJldHVybiBzZXRBcnJheUxlbmd0aChPLCBsZW4gKyBhcmdDb3VudCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItYmFzaWMtZGV0ZWN0aW9uJyk7XG5cbi8vIGBEYXRhVmlld2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0YXZpZXctY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSIH0sIHtcbiAgRGF0YVZpZXc6IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGEtdmlldy5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gSUU4LSBub24tc3RhbmRhcmQgY2FzZVxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKDE2ZTExKS5nZXRZZWFyKCkgIT09IDEyMDtcbn0pO1xuXG52YXIgZ2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhcik7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS5nZXRZZWFyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUuZ2V0eWVhclxuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRZZWFyOiBmdW5jdGlvbiBnZXRZZWFyKCkge1xuICAgIHJldHVybiBnZXRGdWxsWWVhcih0aGlzKSAtIDE5MDA7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgJERhdGUgPSBEYXRlO1xudmFyIHRoaXNUaW1lVmFsdWUgPSB1bmN1cnJ5VGhpcygkRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG5cbi8vIGBEYXRlLm5vd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUubm93XG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHN0YXQ6IHRydWUgfSwge1xuICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gdGhpc1RpbWVWYWx1ZShuZXcgJERhdGUoKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgdGhpc1RpbWVWYWx1ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgc2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLnNldEZ1bGxZZWFyKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnNldFllYXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS5zZXR5ZWFyXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlIH0sIHtcbiAgc2V0WWVhcjogZnVuY3Rpb24gc2V0WWVhcih5ZWFyKSB7XG4gICAgLy8gdmFsaWRhdGVcbiAgICB0aGlzVGltZVZhbHVlKHRoaXMpO1xuICAgIHZhciB5aSA9IHRvSW50ZWdlck9ySW5maW5pdHkoeWVhcik7XG4gICAgdmFyIHl5eXkgPSAwIDw9IHlpICYmIHlpIDw9IDk5ID8geWkgKyAxOTAwIDogeWk7XG4gICAgcmV0dXJuIHNldEZ1bGxZZWFyKHRoaXMsIHl5eXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9HTVRTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2dtdHN0cmluZ1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHRvR01UU3RyaW5nOiBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZ1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9pc29zdHJpbmdcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcgfSwge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2pzb25cbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTywgJ251bWJlcicpO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghaGFzT3duKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSkpIHtcbiAgZGVmaW5lQnVpbHRJbihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGRhdGVUb1ByaW1pdGl2ZSk7XG59XG4iLCIvLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YFxudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBuYXRpdmVEYXRlVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlW1RPX1NUUklOR10pO1xudmFyIHRoaXNUaW1lVmFsdWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKFN0cmluZyhuZXcgRGF0ZShOYU4pKSAhPSBJTlZBTElEX0RBVEUpIHtcbiAgZGVmaW5lQnVpbHRJbihEYXRlUHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXNUaW1lVmFsdWUodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gbmF0aXZlRGF0ZVRvU3RyaW5nKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBmdW5jdGlvbnMgYC5sZW5ndGhgICovXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UnKTtcblxudmFyIFdFQl9BU1NFTUJMWSA9ICdXZWJBc3NlbWJseSc7XG52YXIgV2ViQXNzZW1ibHkgPSBnbG9iYWxbV0VCX0FTU0VNQkxZXTtcblxudmFyIEZPUkNFRCA9IEVycm9yKCdlJywgeyBjYXVzZTogNyB9KS5jYXVzZSAhPT0gNztcblxudmFyIGV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyID0gZnVuY3Rpb24gKEVSUk9SX05BTUUsIHdyYXBwZXIpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tFUlJPUl9OQU1FXSA9IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKEVSUk9SX05BTUUsIHdyYXBwZXIsIEZPUkNFRCk7XG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBGT1JDRUQgfSwgTyk7XG59O1xuXG52YXIgZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlciA9IGZ1bmN0aW9uIChFUlJPUl9OQU1FLCB3cmFwcGVyKSB7XG4gIGlmIChXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseVtFUlJPUl9OQU1FXSkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tFUlJPUl9OQU1FXSA9IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKFdFQl9BU1NFTUJMWSArICcuJyArIEVSUk9SX05BTUUsIHdyYXBwZXIsIEZPUkNFRCk7XG4gICAgJCh7IHRhcmdldDogV0VCX0FTU0VNQkxZLCBzdGF0OiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIE8pO1xuICB9XG59O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5hdGl2ZWVycm9yXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ0Vycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdFdmFsRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRXZhbEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdSYW5nZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJhbmdlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1JlZmVyZW5jZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJlZmVyZW5jZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdTeW50YXhFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTeW50YXhFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignVHlwZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFR5cGVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignVVJJRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVVJJRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlcignQ29tcGlsZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIENvbXBpbGVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyKCdMaW5rRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gTGlua0Vycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIoJ1J1bnRpbWVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSdW50aW1lRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuIiwidmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZXJyb3JUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci10by1zdHJpbmcnKTtcblxudmFyIEVycm9yUHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4vLyBgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgZml4XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWVycm9yLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKEVycm9yUHJvdG90eXBlLnRvU3RyaW5nICE9PSBlcnJvclRvU3RyaW5nKSB7XG4gIGRlZmluZUJ1aWx0SW4oRXJyb3JQcm90b3R5cGUsICd0b1N0cmluZycsIGVycm9yVG9TdHJpbmcpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciB0b1VwcGVyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvVXBwZXJDYXNlKTtcblxudmFyIHJhdyA9IC9bXFx3KitcXC0uL0BdLztcblxudmFyIGhleCA9IGZ1bmN0aW9uIChjb2RlLCBsZW5ndGgpIHtcbiAgdmFyIHJlc3VsdCA9IG51bWJlclRvU3RyaW5nKGNvZGUsIDE2KTtcbiAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCBsZW5ndGgpIHJlc3VsdCA9ICcwJyArIHJlc3VsdDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBlc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1lc2NhcGUtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgY29kZTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGV4ZWMocmF3LCBjaHIpKSB7XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChjaHIsIDApO1xuICAgICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICAgIHJlc3VsdCArPSAnJScgKyBoZXgoY29kZSwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICcldScgKyB0b1VwcGVyQ2FzZShoZXgoY29kZSwgNCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZ1bmN0aW9uLmJpbmQgIT09IGJpbmQgfSwge1xuICBiaW5kOiBiaW5kXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xuXG52YXIgSEFTX0lOU1RBTkNFID0gd2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLUBAaGFzaW5zdGFuY2VcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihGdW5jdGlvblByb3RvdHlwZSwgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBtYWtlQnVpbHRJbihmdW5jdGlvbiAoTykge1xuICAgIGlmICghaXNDYWxsYWJsZSh0aGlzKSB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgUCA9IHRoaXMucHJvdG90eXBlO1xuICAgIGlmICghaXNPYmplY3QoUCkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICAgIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmIChQID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIEhBU19JTlNUQU5DRSkgfSk7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGVU5DVElPTl9OQU1FX0VYSVNUUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuRVhJU1RTO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nKTtcbnZhciBuYW1lUkUgPSAvZnVuY3Rpb25cXGIoPzpcXHN8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xcXC9cXC9bXlxcblxccl0qW1xcblxccl0rKSooW15cXHMoL10qKS87XG52YXIgcmVnRXhwRXhlYyA9IHVuY3VycnlUaGlzKG5hbWVSRS5leGVjKTtcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICFGVU5DVElPTl9OQU1FX0VYSVNUUykge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWdFeHBFeGVjKG5hbWVSRSwgZnVuY3Rpb25Ub1N0cmluZyh0aGlzKSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYGdsb2JhbFRoaXNgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nbG9iYWx0aGlzXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IGdsb2JhbC5nbG9iYWxUaGlzICE9PSBnbG9iYWwgfSwge1xuICBnbG9iYWxUaGlzOiBnbG9iYWxcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKSgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG52YXIgSUxMX0ZPUk1FRF9VTklDT0RFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxudmFyIHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4ID0gZnVuY3Rpb24gKGl0LCByZXBsYWNlcikge1xuICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgdmFyICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbn07XG5cbnZhciBmaXhJbGxGb3JtZWQgPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGFyaXR5OiAzLCBmb3JjZWQ6IFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiB8fCBJTExfRk9STUVEX1VOSUNPREUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID8gc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggOiAkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICAgIHJldHVybiBJTExfRk9STUVEX1VOSUNPREUgJiYgdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeElsbEZvcm1lZCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbmNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAuY29uc3RydWN0b3InKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtYWNvc2ggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgTE4yID0gTWF0aC5MTjI7XG5cbnZhciBGT1JDRUQgPSAhJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgfHwgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpICE9IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICB8fCAkYWNvc2goSW5maW5pdHkpICE9IEluZmluaXR5O1xuXG4vLyBgTWF0aC5hY29zaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYWNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHZhciBuID0gK3g7XG4gICAgcmV0dXJuIG4gPCAxID8gTmFOIDogbiA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IGxvZyhuKSArIExOMlxuICAgICAgOiBsb2cxcChuIC0gMSArIHNxcnQobiAtIDEpICogc3FydChuICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hc2luaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gIWlzRmluaXRlKG4pIHx8IG4gPT0gMCA/IG4gOiBuIDwgMCA/IC1hc2luaCgtbikgOiBsb2cobiArIHNxcnQobiAqIG4gKyAxKSk7XG59XG5cbnZhciBGT1JDRUQgPSAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCk7XG5cbi8vIGBNYXRoLmFzaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hc2luaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgYXNpbmg6IGFzaW5oXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hdGFuaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG5cbnZhciBGT1JDRUQgPSAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApO1xuXG4vLyBgTWF0aC5hdGFuaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYXRhbmhcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gbiA9PSAwID8gbiA6IGxvZygoMSArIG4pIC8gKDEgLSBuKSkgLyAyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcblxuLy8gYE1hdGguY2JydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY2JydFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gc2lnbihuKSAqIHBvdyhhYnMobiksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG5cbi8vIGBNYXRoLmNsejMyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jbHozMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICB2YXIgbiA9IHggPj4+IDA7XG4gICAgcmV0dXJuIG4gPyAzMSAtIGZsb29yKGxvZyhuICsgMC41KSAqIExPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtY29zaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRjb3NoID0gTWF0aC5jb3NoO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIEUgPSBNYXRoLkU7XG5cbnZhciBGT1JDRUQgPSAhJGNvc2ggfHwgJGNvc2goNzEwKSA9PT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICB2YXIgdCA9IGV4cG0xKGFicyh4KSAtIDEpICsgMTtcbiAgICByZXR1cm4gKHQgKyAxIC8gKHQgKiBFICogRSkpICogKEUgLyAyKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbi8vIGBNYXRoLmV4cG0xYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZXhwbTEgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBleHBtMSAhPSBNYXRoLmV4cG0xIH0sIHsgZXhwbTE6IGV4cG0xIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZnJvdW5kJyk7XG5cbi8vIGBNYXRoLmZyb3VuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZnJvdW5kXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBmcm91bmQ6IGZyb3VuZCB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1oeXBvdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRoeXBvdCA9IE1hdGguaHlwb3Q7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuLy8gQ2hyb21lIDc3IGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTU0NlxudmFyIEZPUkNFRCA9ICEhJGh5cG90ICYmICRoeXBvdChJbmZpbml0eSwgTmFOKSAhPT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmh5cG90YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5oeXBvdFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBhcml0eTogMiwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIHNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1pbXVsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweEZGRkZGRkZGLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pO1xuXG4vLyBgTWF0aC5pbXVsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5pbXVsXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweEZGRkY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG5cbi8vIGBNYXRoLmxvZzEwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMTA6IGxvZzEwXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gYE1hdGgubG9nMXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBsb2cxcDogbG9nMXAgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBgTWF0aC5sb2cyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTE4yO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbi8vIGBNYXRoLnNpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpZ25cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNpZ246IHNpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBleHAgPSBNYXRoLmV4cDtcbnZhciBFID0gTWF0aC5FO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaW5oIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KTtcblxuLy8gYE1hdGguc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2luaFxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gYWJzKG4pIDwgMSA/IChleHBtMShuKSAtIGV4cG0xKC1uKSkgLyAyIDogKGV4cChuIC0gMSkgLSBleHAoLW4gLSAxKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC50YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50YW5oXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgbiA9ICt4O1xuICAgIHZhciBhID0gZXhwbTEobik7XG4gICAgdmFyIGIgPSBleHBtMSgtbik7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAobikgKyBleHAoLW4pKTtcbiAgfVxufSk7XG4iLCJ2YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gTWF0aFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cnVuYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXRydW5jJyk7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdHJ1bmM6IHRydW5jXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgUHVyZU51bWJlck5hbWVzcGFjZSA9IHBhdGhbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoaXQsIDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGNoYXJDb2RlQXQoaXQsIDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoY2hhckNvZGVBdChpdCwgMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IHN0cmluZ1NsaWNlKGl0LCAyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoZGlnaXRzLCBpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpO1xuXG52YXIgY2FsbGVkV2l0aE5ldyA9IGZ1bmN0aW9uIChkdW1teSkge1xuICAvLyBpbmNsdWRlcyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KTtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxudmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gIHJldHVybiBjYWxsZWRXaXRoTmV3KHRoaXMpID8gaW5oZXJpdElmUmVxdWlyZWQoT2JqZWN0KG4pLCB0aGlzLCBOdW1iZXJXcmFwcGVyKSA6IG47XG59O1xuXG5OdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbmlmIChGT1JDRUQgJiYgIUlTX1BVUkUpIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIE51bWJlcjogTnVtYmVyV3JhcHBlclxufSk7XG5cbi8vIFVzZSBgaW50ZXJuYWwvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzYCBoZWxwZXIgaW4gYGNvcmUtanNANGBcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihzb3VyY2UsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuXG5pZiAoSVNfUFVSRSAmJiBQdXJlTnVtYmVyTmFtZXNwYWNlKSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHBhdGhbTlVNQkVSXSwgUHVyZU51bWJlck5hbWVzcGFjZSk7XG5pZiAoRk9SQ0VEIHx8IElTX1BVUkUpIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMocGF0aFtOVU1CRVJdLCBOYXRpdmVOdW1iZXIpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuRVBTSUxPTmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmVwc2lsb25cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBub25Db25maWd1cmFibGU6IHRydWUsIG5vbldyaXRhYmxlOiB0cnVlIH0sIHtcbiAgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBudW1iZXJJc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItaXMtZmluaXRlJyk7XG5cbi8vIGBOdW1iZXIuaXNGaW5pdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNmaW5pdGVcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHsgaXNGaW5pdGU6IG51bWJlcklzRmluaXRlIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcblxuLy8gYE51bWJlci5pc0ludGVnZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzSW50ZWdlcjogaXNJbnRlZ3JhbE51bWJlclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5pc05hTmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc25hblxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVncmFsTnVtYmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlcicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbi8vIGBOdW1iZXIuaXNTYWZlSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdyYWxOdW1iZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFGRkZGRkZGRkZGRkZGO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5tYXhfc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgbm9uQ29uZmlndXJhYmxlOiB0cnVlLCBub25Xcml0YWJsZTogdHJ1ZSB9LCB7XG4gIE1BWF9TQUZFX0lOVEVHRVI6IDB4MUZGRkZGRkZGRkZGRkZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLm1pbl9zYWZlX2ludGVnZXJcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBub25Db25maWd1cmFibGU6IHRydWUsIG5vbldyaXRhYmxlOiB0cnVlIH0sIHtcbiAgTUlOX1NBRkVfSU5URUdFUjogLTB4MUZGRkZGRkZGRkZGRkZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQnKTtcblxuLy8gYE51bWJlci5wYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlRmxvYXRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1udW1iZXItcGFyc2VmbG9hdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlRmxvYXQgIT0gcGFyc2VGbG9hdCB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlaW50XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLXBhcnNlaW50IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBOdW1iZXIucGFyc2VJbnQgIT0gcGFyc2VJbnQgfSwge1xuICBwYXJzZUludDogcGFyc2VJbnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgbG9nMTAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxMCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciAkUmFuZ2VFcnJvciA9IFJhbmdlRXJyb3I7XG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIG5hdGl2ZVRvRXhwb25lbnRpYWwgPSB1bmN1cnJ5VGhpcygxLjAudG9FeHBvbmVudGlhbCk7XG52YXIgcmVwZWF0ID0gdW5jdXJyeVRoaXMoJHJlcGVhdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbi8vIEVkZ2UgMTctXG52YXIgUk9VTkRTX1BST1BFUkxZID0gbmF0aXZlVG9FeHBvbmVudGlhbCgtNi45ZS0xMSwgNCkgPT09ICctNi45MDAwZS0xMSdcbiAgLy8gSUUxMS0gJiYgRWRnZSAxNC1cbiAgJiYgbmF0aXZlVG9FeHBvbmVudGlhbCgxLjI1NSwgMikgPT09ICcxLjI1ZSswJ1xuICAvLyBGRjg2LSwgVjggfiBDaHJvbWUgNDktNTBcbiAgJiYgbmF0aXZlVG9FeHBvbmVudGlhbCgxMjM0NSwgMykgPT09ICcxLjIzNWUrNCdcbiAgLy8gRkY4Ni0sIFY4IH4gQ2hyb21lIDQ5LTUwXG4gICYmIG5hdGl2ZVRvRXhwb25lbnRpYWwoMjUsIDApID09PSAnM2UrMSc7XG5cbi8vIElFOC1cbnZhciB0aHJvd3NPbkluZmluaXR5RnJhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmF0aXZlVG9FeHBvbmVudGlhbCgxLCBJbmZpbml0eSk7XG4gIH0pICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuYXRpdmVUb0V4cG9uZW50aWFsKDEsIC1JbmZpbml0eSk7XG4gIH0pO1xufTtcblxuLy8gU2FmYXJpIDwxMSAmJiBGRiA8NTBcbnZhciBwcm9wZXJOb25GaW5pdGVUaGlzQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5hdGl2ZVRvRXhwb25lbnRpYWwoSW5maW5pdHksIEluZmluaXR5KTtcbiAgICBuYXRpdmVUb0V4cG9uZW50aWFsKE5hTiwgSW5maW5pdHkpO1xuICB9KTtcbn07XG5cbnZhciBGT1JDRUQgPSAhUk9VTkRTX1BST1BFUkxZIHx8ICF0aHJvd3NPbkluZmluaXR5RnJhY3Rpb24oKSB8fCAhcHJvcGVyTm9uRmluaXRlVGhpc0NoZWNrKCk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRXhwb25lbnRpYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZXhwb25lbnRpYWxcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0V4cG9uZW50aWFsOiBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgaWYgKGZyYWN0aW9uRGlnaXRzID09PSB1bmRlZmluZWQpIHJldHVybiBuYXRpdmVUb0V4cG9uZW50aWFsKHgpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgaWYgKCEkaXNGaW5pdGUoeCkpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgLy8gVE9ETzogRVMyMDE4IGluY3JlYXNlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIDEwMCwgbmVlZCB0byBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93ICRSYW5nZUVycm9yKCdJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzJyk7XG4gICAgaWYgKFJPVU5EU19QUk9QRVJMWSkgcmV0dXJuIG5hdGl2ZVRvRXhwb25lbnRpYWwoeCwgZik7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9ICcnO1xuICAgIHZhciBlID0gMDtcbiAgICB2YXIgYyA9ICcnO1xuICAgIHZhciBkID0gJyc7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgZSA9IDA7XG4gICAgICBtID0gcmVwZWF0KCcwJywgZiArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIGJsb2NrIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1NoZWV0SlNEZXYvMTEwMGFkNTZiOWY4NTZjOTUyOTllZDBlMDY4ZWVhMDhcbiAgICAgIC8vIFRPRE86IGltcHJvdmUgYWNjdXJhY3kgd2l0aCBiaWcgZnJhY3Rpb24gZGlnaXRzXG4gICAgICB2YXIgbCA9IGxvZzEwKHgpO1xuICAgICAgZSA9IGZsb29yKGwpO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHcgPSBwb3coMTAsIGUgLSBmKTtcbiAgICAgIG4gPSByb3VuZCh4IC8gdyk7XG4gICAgICBpZiAoMiAqIHggPj0gKDIgKiBuICsgMSkgKiB3KSB7XG4gICAgICAgIG4gKz0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChuID49IHBvdygxMCwgZiArIDEpKSB7XG4gICAgICAgIG4gLz0gMTA7XG4gICAgICAgIGUgKz0gMTtcbiAgICAgIH1cbiAgICAgIG0gPSAkU3RyaW5nKG4pO1xuICAgIH1cbiAgICBpZiAoZiAhPT0gMCkge1xuICAgICAgbSA9IHN0cmluZ1NsaWNlKG0sIDAsIDEpICsgJy4nICsgc3RyaW5nU2xpY2UobSwgMSk7XG4gICAgfVxuICAgIGlmIChlID09PSAwKSB7XG4gICAgICBjID0gJysnO1xuICAgICAgZCA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgYyA9IGUgPiAwID8gJysnIDogJy0nO1xuICAgICAgZCA9ICRTdHJpbmcoYWJzKGUpKTtcbiAgICB9XG4gICAgbSArPSAnZScgKyBjICsgZDtcbiAgICByZXR1cm4gcyArIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBuYXRpdmVUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gJFN0cmluZyhkYXRhW2luZGV4XSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdCgnMCcsIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVUb0ZpeGVkKDAuMDAwMDgsIDMpICE9PSAnMC4wMDAnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgwLjksIDApICE9PSAnMScgfHxcbiAgICBuYXRpdmVUb0ZpeGVkKDEuMjU1LCAyKSAhPT0gJzEuMjUnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgxMDAwMDAwMDAwMDAwMDAwMTI4LjAsIDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCc7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICBuYXRpdmVUb0ZpeGVkKHt9KTtcbn0pO1xuXG4vLyBgTnVtYmVyLnByb3RvdHlwZS50b0ZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b2ZpeGVkXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHNpZ24gPSAnJztcbiAgICB2YXIgcmVzdWx0ID0gJzAnO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuXG4gICAgLy8gVE9ETzogRVMyMDE4IGluY3JlYXNlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIDEwMCwgbmVlZCB0byBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgJFJhbmdlRXJyb3IoJ0luY29ycmVjdCBmcmFjdGlvbiBkaWdpdHMnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChudW1iZXIgIT0gbnVtYmVyKSByZXR1cm4gJ05hTic7XG4gICAgaWYgKG51bWJlciA8PSAtMWUyMSB8fCBudW1iZXIgPj0gMWUyMSkgcmV0dXJuICRTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIG5hdGl2ZVRvUHJlY2lzaW9uID0gdW5jdXJyeVRoaXMoMS4wLnRvUHJlY2lzaW9uKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gbmF0aXZlVG9QcmVjaXNpb24oMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgbmF0aXZlVG9QcmVjaXNpb24oe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b3ByZWNpc2lvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWRcbiAgICAgID8gbmF0aXZlVG9QcmVjaXNpb24odGhpc051bWJlclZhbHVlKHRoaXMpKVxuICAgICAgOiBuYXRpdmVUb1ByZWNpc2lvbih0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGFyaXR5OiAyLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGNyZWF0ZTogY3JlYXRlXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhQ2FsbGFibGUoZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyAhPT0gZGVmaW5lUHJvcGVydGllcywgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAhPT0gZGVmaW5lUHJvcGVydHksIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnR5OiBkZWZpbmVQcm9wZXJ0eVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUNhbGxhYmxlKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWZyZWV6ZSAtLSBzYWZlXG52YXIgJGZyZWV6ZSA9IE9iamVjdC5mcmVlemU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGZyZWV6ZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuZnJlZXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmZyZWV6ZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgZnJlZXplOiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5mcm9tRW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZnJvbS1lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGZyb21FbnRyaWVzOiBmdW5jdGlvbiBmcm9tRW50cmllcyhpdGVyYWJsZSkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgY3JlYXRlUHJvcGVydHkob2JqLCBrLCB2KTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpLmY7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG4vLyBWOCB+IENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGT1JDRUQgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRvT2JqZWN0KGl0KSkgOiBbXTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0Lmhhc093bmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hY2Nlc3NpYmxlLW9iamVjdC1oYXNvd25wcm9wZXJ0eVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBoYXNPd246IGhhc093blxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG5cbi8vIGBPYmplY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmlzRXh0ZW5zaWJsZSAhPT0gJGlzRXh0ZW5zaWJsZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogJGlzRXh0ZW5zaWJsZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNmcm96ZW4gLS0gc2FmZVxudmFyICRpc0Zyb3plbiA9IE9iamVjdC5pc0Zyb3plbjtcblxudmFyIEZPUkNFRCA9IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGlzRnJvemVuOiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzc2VhbGVkIC0tIHNhZmVcbnZhciAkaXNTZWFsZWQgPSBPYmplY3QuaXNTZWFsZWQ7XG5cbnZhciBGT1JDRUQgPSBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgfHwgZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNTZWFsZWQoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzU2VhbGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0Lmlzc2VhbGVkXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBpc1NlYWxlZDogZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSAmJiBjbGFzc29mKGl0KSA9PSAnQXJyYXlCdWZmZXInKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcblxuLy8gYE9iamVjdC5pc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpczogaXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2MuZ2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICAgICAgdmFyIGRlc2M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSkpIHJldHVybiBkZXNjLnNldDtcbiAgICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHNhZmVcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHByZXZlbnRFeHRlbnNpb25zKDEpOyB9KTtcblxuLy8gYE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHNhZmVcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxudmFyIHNldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgUFJPVE8gPSAnX19wcm90b19fJztcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19wcm90b19fYCBhY2Nlc3NvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fcHJvdG9fX1xuaWYgKERFU0NSSVBUT1JTICYmIGdldFByb3RvdHlwZU9mICYmIHNldFByb3RvdHlwZU9mICYmICEoUFJPVE8gaW4gT2JqZWN0UHJvdG90eXBlKSkgdHJ5IHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKE9iamVjdFByb3RvdHlwZSwgUFJPVE8sIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBfX3Byb3RvX18oKSB7XG4gICAgICByZXR1cm4gZ2V0UHJvdG90eXBlT2YodG9PYmplY3QodGhpcykpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBfX3Byb3RvX18ocHJvdG8pIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsIHx8ICFpc09iamVjdChPKSkgcmV0dXJuO1xuICAgICAgc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pO1xuICAgIH1cbiAgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZWFsIC0tIHNhZmVcbnZhciAkc2VhbCA9IE9iamVjdC5zZWFsO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRzZWFsKDEpOyB9KTtcblxuLy8gYE9iamVjdC5zZWFsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNlYWxcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIHNlYWw6IGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IHNldFByb3RvdHlwZU9mXG59KTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgZGVmaW5lQnVpbHRJbihPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLnZhbHVlcztcblxuLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICByZXR1cm4gJHZhbHVlcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQnKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0IH0sIHtcbiAgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQnKTtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHBhcnNlSW50ICE9ICRwYXJzZUludCB9LCB7XG4gIHBhcnNlSW50OiAkcGFyc2VJbnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24nKTtcblxuLy8gYFByb21pc2UuYWxsU2V0dGxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsc2V0dGxlZFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlcnJvciB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2Utc3RhdGljcy1pbmNvcnJlY3QtaXRlcmF0aW9uJyk7XG5cbi8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUsIGZvcmNlZDogUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2Utc3RhdGljcy1pbmNvcnJlY3QtaXRlcmF0aW9uJyk7XG5cbnZhciBQUk9NSVNFX0FOWV9FUlJPUiA9ICdObyBvbmUgcHJvbWlzZSByZXNvbHZlZCc7XG5cbi8vIGBQcm9taXNlLmFueWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUsIGZvcmNlZDogUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgQWdncmVnYXRlRXJyb3IgPSBnZXRCdWlsdEluKCdBZ2dyZWdhdGVFcnJvcicpO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbChwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvcnNbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IsIHJlYWw6IHRydWUgfSwge1xuICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2NhdGNoYCBwcm9wZXJseSB3b3JrcyB3aXRoIHBhdGNoZWQgYFByb21pc2UjdGhlbmBcbmlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2NhdGNoJ107XG4gIGlmIChOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICE9PSBtZXRob2QpIHtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdjYXRjaCcsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBRdWV1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9xdWV1ZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gUHJvbWlzZUNvbnN0cnVjdG9yRGV0ZWN0aW9uLkNPTlNUUlVDVE9SO1xudmFyIE5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCA9IFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbi5SRUpFQ1RJT05fRVZFTlQ7XG52YXIgTkFUSVZFX1BST01JU0VfU1VCQ0xBU1NJTkcgPSBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24uU1VCQ0xBU1NJTkc7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcjtcbnZhciBQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG5cbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcblxudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIGlzQ2FsbGFibGUodGhlbiA9IGl0LnRoZW4pID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIGNhbGxSZWFjdGlvbiA9IGZ1bmN0aW9uIChyZWFjdGlvbiwgc3RhdGUpIHtcbiAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gIHRyeSB7XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGlmICghb2spIHtcbiAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgIGNhbGwodGhlbiwgcmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgfVxufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVhY3Rpb25zID0gc3RhdGUucmVhY3Rpb25zO1xuICAgIHZhciByZWFjdGlvbjtcbiAgICB3aGlsZSAocmVhY3Rpb24gPSByZWFjdGlvbnMuZ2V0KCkpIHtcbiAgICAgIGNhbGxSZWFjdGlvbihyZWFjdGlvbiwgc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKCFOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY2FsbCh0YXNrLCBnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGwodGhlbiwgdmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUikge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICBhQ2FsbGFibGUoZXhlY3V0b3IpO1xuICAgIGNhbGwoSW50ZXJuYWwsIHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBQcm9taXNlUHJvdG90eXBlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IG5ldyBRdWV1ZSgpLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuXG4gIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gIEludGVybmFsLnByb3RvdHlwZSA9IGRlZmluZUJ1aWx0SW4oUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgcmVhY3Rpb24ub2sgPSBpc0NhbGxhYmxlKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICBpZiAoc3RhdGUuc3RhdGUgPT0gUEVORElORykgc3RhdGUucmVhY3Rpb25zLmFkZChyZWFjdGlvbik7XG4gICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gIH0pO1xuXG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuXG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikgJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLnRoZW47XG5cbiAgICBpZiAoIU5BVElWRV9QUk9NSVNFX1NVQkNMQVNTSU5HKSB7XG4gICAgICAvLyBtYWtlIGBQcm9taXNlI3RoZW5gIHJldHVybiBhIHBvbHlmaWxsZWQgYFByb21pc2VgIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBjYWxsKG5hdGl2ZVRoZW4sIHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbnZhciBOYXRpdmVQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yICYmIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGVuYWJsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBOYXRpdmVQcm9taXNlUHJvdG90eXBlWydmaW5hbGx5J10uY2FsbCh7IHRoZW46IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBOT05fR0VORVJJQyB9LCB7XG4gICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKSk7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSBpc0NhbGxhYmxlKG9uRmluYWxseSk7XG4gICAgcmV0dXJuIHRoaXMudGhlbihcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5LFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseVxuICAgICk7XG4gIH1cbn0pO1xuXG4vLyBtYWtlcyBzdXJlIHRoYXQgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJcyBgUHJvbWlzZSNmaW5hbGx5YCBwcm9wZXJseSB3b3JrcyB3aXRoIHBhdGNoZWQgYFByb21pc2UjdGhlbmBcbmlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXTtcbiAgaWYgKE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSAhPT0gbWV0aG9kKSB7XG4gICAgZGVmaW5lQnVpbHRJbihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCAnZmluYWxseScsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3Mgc3BsaXQgdG8gbW9kdWxlcyBsaXN0ZWQgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmNhdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLnJlamVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLnJlc29sdmUnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2Utc3RhdGljcy1pbmNvcnJlY3QtaXRlcmF0aW9uJyk7XG5cbi8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBQUk9NSVNFX1NUQVRJQ1NfSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xuXG4vLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZih0aGlzKTtcbiAgICBjYWxsKGNhcGFiaWxpdHkucmVqZWN0LCB1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xuXG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yV3JhcHBlciA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKTtcbnZhciBDSEVDS19XUkFQUEVSID0gSVNfUFVSRSAmJiAhRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1I7XG5cbi8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKENIRUNLX1dSQVBQRVIgJiYgdGhpcyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yV3JhcHBlciA/IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZ1bmN0aW9uQXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxudmFyIE9QVElPTkFMX0FSR1VNRU5UU19MSVNUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgUmVmbGVjdC5hcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmFwcGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5hcHBseVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9QVElPTkFMX0FSR1VNRU5UU19MSVNUIH0sIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uQXBwbHkoYUNhbGxhYmxlKHRhcmdldCksIHRoaXNBcmd1bWVudCwgYW5PYmplY3QoYXJndW1lbnRzTGlzdCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUNvbnN0cnVjdG9yKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUNvbnN0cnVjdG9yKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICBhcHBseShwdXNoLCAkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChhcHBseShiaW5kLCBUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3RQcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBhcHBseShUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxudmFyIEVSUk9SX0lOU1RFQURfT0ZfRkFMU0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZGVmaW5lUHJvcGVydHlNb2R1bGUuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRhcmdldCwga2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYFJlZmxlY3QuZGVsZXRlUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlbGV0ZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvcicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3QuZ2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRcbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjcmlwdG9yLCBwcm90b3R5cGU7XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBpc0RhdGFEZXNjcmlwdG9yKGRlc2NyaXB0b3IpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY2FsbChkZXNjcmlwdG9yLmdldCwgcmVjZWl2ZXIpO1xuICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXQ6IGdldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFJlZmxlY3QuaGFzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5oYXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYFJlZmxlY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG4vLyBgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpO1xuICAgICAgaWYgKG9iamVjdFByZXZlbnRFeHRlbnNpb25zKSBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldHByb3RvdHlwZW9mXG5pZiAob2JqZWN0U2V0UHJvdG90eXBlT2YpICQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBvYmplY3RTZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldFxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZSwgc2V0dGVyO1xuICBpZiAoIW93bkRlc2NyaXB0b3IpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDApO1xuICB9XG4gIGlmIChpc0RhdGFEZXNjcmlwdG9yKG93bkRlc2NyaXB0b3IpKSB7XG4gICAgaWYgKG93bkRlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpO1xuICB9IGVsc2Uge1xuICAgIHNldHRlciA9IG93bkRlc2NyaXB0b3Iuc2V0O1xuICAgIGlmIChzZXR0ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNhbGwoc2V0dGVyLCByZWNlaXZlciwgVik7XG4gIH0gcmV0dXJuIHRydWU7XG59XG5cbi8vIE1TIEVkZ2UgMTctMTggUmVmbGVjdC5zZXQgYWxsb3dzIHNldHRpbmcgdGhlIHByb3BlcnR5IHRvIG9iamVjdFxuLy8gd2l0aCBub24td3JpdGFibGUgcHJvcGVydHkgb24gdGhlIHByb3RvdHlwZVxudmFyIE1TX0VER0VfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIHZhciBvYmplY3QgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG5ldyBDb25zdHJ1Y3RvcigpLCAnYScsIHsgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gUmVmbGVjdC5zZXQoQ29uc3RydWN0b3IucHJvdG90eXBlLCAnYScsIDEsIG9iamVjdCkgIT09IGZhbHNlO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBNU19FREdFX0JVRyB9LCB7XG4gIHNldDogc2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHsgUmVmbGVjdDoge30gfSk7XG5cbi8vIFJlZmxlY3RbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuUmVmbGVjdCwgJ1JlZmxlY3QnLCB0cnVlKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHByb3h5QWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJveHktYWNjZXNzb3InKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmVuZm9yY2U7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG52YXIgTmF0aXZlUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBOYXRpdmVSZWdFeHAucHJvdG90eXBlO1xudmFyIFN5bnRheEVycm9yID0gZ2xvYmFsLlN5bnRheEVycm9yO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhSZWdFeHBQcm90b3R5cGUuZXhlYyk7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuLy8gVE9ETzogVXNlIG9ubHkgcHJvcGVyIFJlZ0V4cElkZW50aWZpZXJOYW1lXG52YXIgSVNfTkNHID0gL15cXD88W15cXHNcXGQhIyUmKis8PT5AXl1bXlxccyEjJSYqKzw9PkBeXSo+LztcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG5cbi8vIFwibmV3XCIgc2hvdWxkIGNyZWF0ZSBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgTmF0aXZlUmVnRXhwKHJlMSkgIT09IHJlMTtcblxudmFyIE1JU1NFRF9TVElDS1kgPSBzdGlja3lIZWxwZXJzLk1JU1NFRF9TVElDS1k7XG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcblxudmFyIEJBU0VfRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiZcbiAgKCFDT1JSRUNUX05FVyB8fCBNSVNTRURfU1RJQ0tZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZTJbTUFUQ0hdID0gZmFsc2U7XG4gICAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgICByZXR1cm4gTmF0aXZlUmVnRXhwKHJlMSkgIT0gcmUxIHx8IE5hdGl2ZVJlZ0V4cChyZTIpID09IHJlMiB8fCBOYXRpdmVSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbiAgfSkpO1xuXG52YXIgaGFuZGxlRG90QWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgYnJhY2tldHMgPSBmYWxzZTtcbiAgdmFyIGNocjtcbiAgZm9yICg7IGluZGV4IDw9IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNociA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgIHJlc3VsdCArPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIWJyYWNrZXRzICYmIGNociA9PT0gJy4nKSB7XG4gICAgICByZXN1bHQgKz0gJ1tcXFxcc1xcXFxTXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaHIgPT09ICdbJykge1xuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICAgIGJyYWNrZXRzID0gZmFsc2U7XG4gICAgICB9IHJlc3VsdCArPSBjaHI7XG4gICAgfVxuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgaGFuZGxlTkNHID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbmFtZWQgPSBbXTtcbiAgdmFyIG5hbWVzID0ge307XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgbmNnID0gZmFsc2U7XG4gIHZhciBncm91cGlkID0gMDtcbiAgdmFyIGdyb3VwbmFtZSA9ICcnO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgY2hyID0gY2hyICsgY2hhckF0KHN0cmluZywgKytpbmRleCk7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09ICddJykge1xuICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFicmFja2V0cykgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIGNociA9PT0gJ1snOlxuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjaHIgPT09ICcoJzpcbiAgICAgICAgaWYgKGV4ZWMoSVNfTkNHLCBzdHJpbmdTbGljZShzdHJpbmcsIGluZGV4ICsgMSkpKSB7XG4gICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICBuY2cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICAgIGdyb3VwaWQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIGNociA9PT0gJz4nICYmIG5jZzpcbiAgICAgICAgaWYgKGdyb3VwbmFtZSA9PT0gJycgfHwgaGFzT3duKG5hbWVzLCBncm91cG5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdJbnZhbGlkIGNhcHR1cmUgZ3JvdXAgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzW2dyb3VwbmFtZV0gPSB0cnVlO1xuICAgICAgICBuYW1lZFtuYW1lZC5sZW5ndGhdID0gW2dyb3VwbmFtZSwgZ3JvdXBpZF07XG4gICAgICAgIG5jZyA9IGZhbHNlO1xuICAgICAgICBncm91cG5hbWUgPSAnJztcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChuY2cpIGdyb3VwbmFtZSArPSBjaHI7XG4gICAgZWxzZSByZXN1bHQgKz0gY2hyO1xuICB9IHJldHVybiBbcmVzdWx0LCBuYW1lZF07XG59O1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZCgnUmVnRXhwJywgQkFTRV9GT1JDRUQpKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCB0aGlzKTtcbiAgICB2YXIgcGF0dGVybklzUmVnRXhwID0gaXNSZWdFeHAocGF0dGVybik7XG4gICAgdmFyIGZsYWdzQXJlVW5kZWZpbmVkID0gZmxhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgdmFyIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuICAgIHZhciByYXdGbGFncywgZG90QWxsLCBzdGlja3ksIGhhbmRsZWQsIHJlc3VsdCwgc3RhdGU7XG5cbiAgICBpZiAoIXRoaXNJc1JlZ0V4cCAmJiBwYXR0ZXJuSXNSZWdFeHAgJiYgZmxhZ3NBcmVVbmRlZmluZWQgJiYgcGF0dGVybi5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwV3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm5Jc1JlZ0V4cCB8fCBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgcGF0dGVybikpIHtcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICAgIGlmIChmbGFnc0FyZVVuZGVmaW5lZCkgZmxhZ3MgPSBnZXRSZWdFeHBGbGFncyhyYXdQYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBwYXR0ZXJuID0gcGF0dGVybiA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhwYXR0ZXJuKTtcbiAgICBmbGFncyA9IGZsYWdzID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzKTtcbiAgICByYXdQYXR0ZXJuID0gcGF0dGVybjtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ET1RfQUxMICYmICdkb3RBbGwnIGluIHJlMSkge1xuICAgICAgZG90QWxsID0gISFmbGFncyAmJiBzdHJpbmdJbmRleE9mKGZsYWdzLCAncycpID4gLTE7XG4gICAgICBpZiAoZG90QWxsKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC9zL2csICcnKTtcbiAgICB9XG5cbiAgICByYXdGbGFncyA9IGZsYWdzO1xuXG4gICAgaWYgKE1JU1NFRF9TVElDS1kgJiYgJ3N0aWNreScgaW4gcmUxKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICd5JykgPiAtMTtcbiAgICAgIGlmIChzdGlja3kgJiYgVU5TVVBQT1JURURfWSkgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAveS9nLCAnJyk7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX05DRykge1xuICAgICAgaGFuZGxlZCA9IGhhbmRsZU5DRyhwYXR0ZXJuKTtcbiAgICAgIHBhdHRlcm4gPSBoYW5kbGVkWzBdO1xuICAgICAgZ3JvdXBzID0gaGFuZGxlZFsxXTtcbiAgICB9XG5cbiAgICByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLCB0aGlzSXNSZWdFeHAgPyB0aGlzIDogUmVnRXhwUHJvdG90eXBlLCBSZWdFeHBXcmFwcGVyKTtcblxuICAgIGlmIChkb3RBbGwgfHwgc3RpY2t5IHx8IGdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUocmVzdWx0KTtcbiAgICAgIGlmIChkb3RBbGwpIHtcbiAgICAgICAgc3RhdGUuZG90QWxsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucmF3ID0gUmVnRXhwV3JhcHBlcihoYW5kbGVEb3RBbGwocGF0dGVybiksIHJhd0ZsYWdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGlja3kpIHN0YXRlLnN0aWNreSA9IHRydWU7XG4gICAgICBpZiAoZ3JvdXBzLmxlbmd0aCkgc3RhdGUuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuICE9PSByYXdQYXR0ZXJuKSB0cnkge1xuICAgICAgLy8gZmFpbHMgaW4gb2xkIGVuZ2luZXMsIGJ1dCB3ZSBoYXZlIG5vIGFsdGVybmF0aXZlcyBmb3IgdW5zdXBwb3J0ZWQgcmVnZXggc3ludGF4XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc291cmNlJywgcmF3UGF0dGVybiA9PT0gJycgPyAnKD86KScgOiByYXdQYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVJlZ0V4cCksIGluZGV4ID0gMDsga2V5cy5sZW5ndGggPiBpbmRleDspIHtcbiAgICBwcm94eUFjY2Vzc29yKFJlZ0V4cFdyYXBwZXIsIE5hdGl2ZVJlZ0V4cCwga2V5c1tpbmRleCsrXSk7XG4gIH1cblxuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgZGVmaW5lQnVpbHRJbihnbG9iYWwsICdSZWdFeHAnLCBSZWdFeHBXcmFwcGVyLCB7IGNvbnN0cnVjdG9yOiB0cnVlIH0pO1xufVxuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmRvdEFsbGAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmRvdGFsbFxuaWYgKERFU0NSSVBUT1JTICYmIFVOU1VQUE9SVEVEX0RPVF9BTEwpIHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFJlZ0V4cFByb3RvdHlwZSwgJ2RvdEFsbCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkb3RBbGwoKSB7XG4gICAgICBpZiAodGhpcyA9PT0gUmVnRXhwUHJvdG90eXBlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yIGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvbid0IGFkZCBtZXRhZGF0YSBmb3IgcmVnZXhwcyBjcmVhdGVkIGJ5IGEgbGl0ZXJhbC5cbiAgICAgIGlmIChjbGFzc29mKHRoaXMpID09PSAnUmVnRXhwJykge1xuICAgICAgICByZXR1cm4gISFnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRvdEFsbDtcbiAgICAgIH1cbiAgICAgIHRocm93ICRUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgUmVnRXhwIHJlcXVpcmVkJyk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZXhlY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUuZXhlY1xuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdkJykgLT4gLy4vZCBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgSU5ESUNFU19TVVBQT1JUID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBSZWdFeHAoJy4nLCAnZCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIElORElDRVNfU1VQUE9SVCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIE8gPSB7fTtcbiAgLy8gbW9kZXJuIFY4IGJ1Z1xuICB2YXIgY2FsbHMgPSAnJztcbiAgdmFyIGV4cGVjdGVkID0gSU5ESUNFU19TVVBQT1JUID8gJ2RnaW1zeScgOiAnZ2ltc3knO1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoa2V5LCBjaHIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywga2V5LCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbHMgKz0gY2hyO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSB9KTtcbiAgfTtcblxuICB2YXIgcGFpcnMgPSB7XG4gICAgZG90QWxsOiAncycsXG4gICAgZ2xvYmFsOiAnZycsXG4gICAgaWdub3JlQ2FzZTogJ2knLFxuICAgIG11bHRpbGluZTogJ20nLFxuICAgIHN0aWNreTogJ3knXG4gIH07XG5cbiAgaWYgKElORElDRVNfU1VQUE9SVCkgcGFpcnMuaGFzSW5kaWNlcyA9ICdkJztcblxuICBmb3IgKHZhciBrZXkgaW4gcGFpcnMpIGFkZEdldHRlcihrZXksIHBhaXJzW2tleV0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwUHJvdG90eXBlLCAnZmxhZ3MnKS5nZXQuY2FsbChPKTtcblxuICByZXR1cm4gcmVzdWx0ICE9PSBleHBlY3RlZCB8fCBjYWxscyAhPT0gZXhwZWN0ZWQ7XG59KTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xuaWYgKEZPUkNFRCkgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFJlZ0V4cFByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVnRXhwRmxhZ3Ncbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTUlTU0VEX1NUSUNLWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKS5NSVNTRURfU1RJQ0tZO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuc3RpY2t5YCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuc3RpY2t5XG5pZiAoREVTQ1JJUFRPUlMgJiYgTUlTU0VEX1NUSUNLWSkge1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoUmVnRXhwUHJvdG90eXBlLCAnc3RpY2t5Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHN0aWNreSgpIHtcbiAgICAgIGlmICh0aGlzID09PSBSZWdFeHBQcm90b3R5cGUpIHJldHVybjtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvciBiZWNhdXNlXG4gICAgICAvLyB3ZSBkb24ndCBhZGQgbWV0YWRhdGEgZm9yIHJlZ2V4cHMgY3JlYXRlZCBieSBhIGxpdGVyYWwuXG4gICAgICBpZiAoY2xhc3NvZih0aGlzKSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdGlja3k7XG4gICAgICB9XG4gICAgICB0aHJvdyAkVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFJlZ0V4cCByZXF1aXJlZCcpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIG1vdmVkIHRvIGVudHJ5IHBvaW50c1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gIHZhciByZSA9IC9bYWNdLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gLy4vLmV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHJlLnRlc3QoJ2FiYycpID09PSB0cnVlICYmIGV4ZWNDYWxsZWQ7XG59KCk7XG5cbnZhciBuYXRpdmVUZXN0ID0gLy4vLnRlc3Q7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRlc3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRlc3RcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhREVMRUdBVEVTX1RPX0VYRUMgfSwge1xuICB0ZXN0OiBmdW5jdGlvbiAoUykge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKFMpO1xuICAgIHZhciBleGVjID0gUi5leGVjO1xuICAgIGlmICghaXNDYWxsYWJsZShleGVjKSkgcmV0dXJuIGNhbGwobmF0aXZlVGVzdCwgUiwgc3RyaW5nKTtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbChleGVjLCBSLCBzdHJpbmcpO1xuICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICBhbk9iamVjdChyZXN1bHQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IFBST1BFUl9GVU5DVElPTl9OQU1FICYmIG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICBkZWZpbmVCdWlsdEluKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgcGF0dGVybiA9ICR0b1N0cmluZyhSLnNvdXJjZSk7XG4gICAgdmFyIGZsYWdzID0gJHRvU3RyaW5nKGdldFJlZ0V4cEZsYWdzKFIpKTtcbiAgICByZXR1cm4gJy8nICsgcGF0dGVybiArICcvJyArIGZsYWdzO1xuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBTZXRgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC1vYmplY3RzXG5jb2xsZWN0aW9uKCdTZXQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25TdHJvbmcpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc2V0LmNvbnN0cnVjdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYW5jaG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5hbmNob3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdhbmNob3InKSB9LCB7XG4gIGFuY2hvcjogZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXN0cmluZy1wcm90b3R5cGUtYXQgLS0gc2FmZVxuICByZXR1cm4gJ/CgrrcnLmF0KC0yKSAhPT0gJ1xcdUQ4NDInO1xufSk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGF0OiBmdW5jdGlvbiBhdChpbmRleCkge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgdmFyIGxlbiA9IFMubGVuZ3RoO1xuICAgIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gICAgdmFyIGsgPSByZWxhdGl2ZUluZGV4ID49IDAgPyByZWxhdGl2ZUluZGV4IDogbGVuICsgcmVsYXRpdmVJbmRleDtcbiAgICByZXR1cm4gKGsgPCAwIHx8IGsgPj0gbGVuKSA/IHVuZGVmaW5lZCA6IGNoYXJBdChTLCBrKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmlnYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5iaWdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdiaWcnKSB9LCB7XG4gIGJpZzogZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ibGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdibGluaycpIH0sIHtcbiAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJvbGRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJvbGRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdib2xkJykgfSwge1xuICBib2xkOiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuIGNvZGVBdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLWVuZHN3aXRoIC0tIHNhZmVcbnZhciBuYXRpdmVFbmRzV2l0aCA9IHVuY3VycnlUaGlzKCcnLmVuZHNXaXRoKTtcbnZhciBzbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0aGF0Lmxlbmd0aDtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIG5hdGl2ZUVuZHNXaXRoXG4gICAgICA/IG5hdGl2ZUVuZHNXaXRoKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiBzbGljZSh0aGF0LCBlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5maXhlZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZpeGVkJykgfSwge1xuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250Y29sb3InKSB9LCB7XG4gIGZvbnRjb2xvcjogZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRzaXplJykgfSwge1xuICBmb250c2l6ZTogZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1mcm9tY29kZXBvaW50IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbnZhciBJTkNPUlJFQ1RfTEVOR1RIID0gISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMTtcblxuLy8gYFN0cmluZy5mcm9tQ29kZVBvaW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLmZyb21jb2RlcG9pbnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBJTkNPUlJFQ1RfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpIHRocm93ICRSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIGVsZW1lbnRzW2ldID0gY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4RDgwMCwgY29kZSAlIDB4NDAwICsgMHhEQzAwKTtcbiAgICB9IHJldHVybiBqb2luKGVsZW1lbnRzLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG5cbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+c3RyaW5nSW5kZXhPZihcbiAgICAgIHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpLFxuICAgICAgdG9TdHJpbmcobm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpKSxcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaXRhbGljc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaXRhbGljc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2l0YWxpY3MnKSB9LCB7XG4gIGl0YWxpY3M6IGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogdG9TdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHBvaW50LCBmYWxzZSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5saW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5saW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnbGluaycpIH0sIHtcbiAgbGluazogZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLW1hdGNoYWxsIC0tIHNhZmUgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIE1BVENIX0FMTCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbnZhciBSRUdFWFBfU1RSSU5HID0gJ1JlZ0V4cCBTdHJpbmcnO1xudmFyIFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IgPSBSRUdFWFBfU1RSSU5HICsgJyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihSRUdFWFBfU1RSSU5HX0lURVJBVE9SKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIG5hdGl2ZU1hdGNoQWxsID0gdW5jdXJyeVRoaXMoJycubWF0Y2hBbGwpO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISFuYXRpdmVNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVNYXRjaEFsbCgnYScsIC8uLyk7XG59KTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gUmVnRXhwU3RyaW5nSXRlcmF0b3IocmVnZXhwLCBzdHJpbmcsICRnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiAkZ2xvYmFsLFxuICAgIHVuaWNvZGU6IGZ1bGxVbmljb2RlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH0pO1xufSwgUkVHRVhQX1NUUklORywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIHZhciBSID0gc3RhdGUucmVnZXhwO1xuICB2YXIgUyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIG1hdGNoID0gcmVnRXhwRXhlYyhSLCBTKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgc3RhdGUuZG9uZSA9IHRydWU7XG4gICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxuICBpZiAoc3RhdGUuZ2xvYmFsKSB7XG4gICAgaWYgKHRvU3RyaW5nKG1hdGNoWzBdKSA9PT0gJycpIFIubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKFIubGFzdEluZGV4KSwgc3RhdGUudW5pY29kZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcbn0pO1xuXG52YXIgJG1hdGNoQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKFIsIFJlZ0V4cCk7XG4gIHZhciBmbGFncyA9IHRvU3RyaW5nKGdldFJlZ0V4cEZsYWdzKFIpKTtcbiAgdmFyIG1hdGNoZXIsICRnbG9iYWwsIGZ1bGxVbmljb2RlO1xuICBtYXRjaGVyID0gbmV3IEMoQyA9PT0gUmVnRXhwID8gUi5zb3VyY2UgOiBSLCBmbGFncyk7XG4gICRnbG9iYWwgPSAhIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAnZycpO1xuICBmdWxsVW5pY29kZSA9ICEhfnN0cmluZ0luZGV4T2YoZmxhZ3MsICd1Jyk7XG4gIG1hdGNoZXIubGFzdEluZGV4ID0gdG9MZW5ndGgoUi5sYXN0SW5kZXgpO1xuICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihtYXRjaGVyLCBTLCAkZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggfSwge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBmbGFncywgUywgbWF0Y2hlciwgcng7XG4gICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWdleHApKSB7XG4gICAgICBpZiAoaXNSZWdFeHAocmVnZXhwKSkge1xuICAgICAgICBmbGFncyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoZ2V0UmVnRXhwRmxhZ3MocmVnZXhwKSkpO1xuICAgICAgICBpZiAoIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAnZycpKSB0aHJvdyAkVHlwZUVycm9yKCdgLm1hdGNoQWxsYCBkb2VzIG5vdCBhbGxvdyBub24tZ2xvYmFsIHJlZ2V4ZXMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbChPLCByZWdleHApO1xuICAgICAgbWF0Y2hlciA9IGdldE1ldGhvZChyZWdleHAsIE1BVENIX0FMTCk7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gdW5kZWZpbmVkICYmIElTX1BVUkUgJiYgY2xhc3NvZihyZWdleHApID09ICdSZWdFeHAnKSBtYXRjaGVyID0gJG1hdGNoQWxsO1xuICAgICAgaWYgKG1hdGNoZXIpIHJldHVybiBjYWxsKG1hdGNoZXIsIHJlZ2V4cCwgTyk7XG4gICAgfSBlbHNlIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbChPLCByZWdleHApO1xuICAgIFMgPSB0b1N0cmluZyhPKTtcbiAgICByeCA9IG5ldyBSZWdFeHAocmVnZXhwLCAnZycpO1xuICAgIHJldHVybiBJU19QVVJFID8gY2FsbCgkbWF0Y2hBbGwsIHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgZGVmaW5lQnVpbHRJbihSZWdFeHBQcm90b3R5cGUsIE1BVENIX0FMTCwgJG1hdGNoQWxsKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHJlZ2V4cCkgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBNQVRDSCk7XG4gICAgICByZXR1cm4gbWF0Y2hlciA/IGNhbGwobWF0Y2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRFbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLmVuZDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgU3RyaW5nLnJhd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5yYXdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlIH0sIHtcbiAgcmF3OiBmdW5jdGlvbiByYXcodGVtcGxhdGUpIHtcbiAgICB2YXIgcmF3VGVtcGxhdGUgPSB0b0luZGV4ZWRPYmplY3QodG9PYmplY3QodGVtcGxhdGUpLnJhdyk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IGxlbmd0aE9mQXJyYXlMaWtlKHJhd1RlbXBsYXRlKTtcbiAgICBpZiAoIWxpdGVyYWxTZWdtZW50cykgcmV0dXJuICcnO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgcHVzaChlbGVtZW50cywgdG9TdHJpbmcocmF3VGVtcGxhdGVbaSsrXSkpO1xuICAgICAgaWYgKGkgPT09IGxpdGVyYWxTZWdtZW50cykgcmV0dXJuIGpvaW4oZWxlbWVudHMsICcnKTtcbiAgICAgIGlmIChpIDwgYXJndW1lbnRzTGVuZ3RoKSBwdXNoKGVsZW1lbnRzLCB0b1N0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBnZXRSZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbnZhciBzdHJpbmdJbmRleE9mID0gZnVuY3Rpb24gKHN0cmluZywgc2VhcmNoVmFsdWUsIGZyb21JbmRleCkge1xuICBpZiAoZnJvbUluZGV4ID4gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIC0xO1xuICBpZiAoc2VhcmNoVmFsdWUgPT09ICcnKSByZXR1cm4gZnJvbUluZGV4O1xuICByZXR1cm4gaW5kZXhPZihzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZWFsbFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwbGFjZUFsbDogZnVuY3Rpb24gcmVwbGFjZUFsbChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBJU19SRUdfRVhQLCBmbGFncywgcmVwbGFjZXIsIHN0cmluZywgc2VhcmNoU3RyaW5nLCBmdW5jdGlvbmFsUmVwbGFjZSwgc2VhcmNoTGVuZ3RoLCBhZHZhbmNlQnksIHJlcGxhY2VtZW50O1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGVuZE9mTGFzdE1hdGNoID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChzZWFyY2hWYWx1ZSkpIHtcbiAgICAgIElTX1JFR19FWFAgPSBpc1JlZ0V4cChzZWFyY2hWYWx1ZSk7XG4gICAgICBpZiAoSVNfUkVHX0VYUCkge1xuICAgICAgICBmbGFncyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoZ2V0UmVnRXhwRmxhZ3Moc2VhcmNoVmFsdWUpKSk7XG4gICAgICAgIGlmICghfmluZGV4T2YoZmxhZ3MsICdnJykpIHRocm93ICRUeXBlRXJyb3IoJ2AucmVwbGFjZUFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICByZXBsYWNlciA9IGdldE1ldGhvZChzZWFyY2hWYWx1ZSwgUkVQTEFDRSk7XG4gICAgICBpZiAocmVwbGFjZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChJU19QVVJFICYmIElTX1JFR19FWFApIHtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2UodG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmcgPSB0b1N0cmluZyhPKTtcbiAgICBzZWFyY2hTdHJpbmcgPSB0b1N0cmluZyhzZWFyY2hWYWx1ZSk7XG4gICAgZnVuY3Rpb25hbFJlcGxhY2UgPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICBzZWFyY2hMZW5ndGggPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICAgIGFkdmFuY2VCeSA9IG1heCgxLCBzZWFyY2hMZW5ndGgpO1xuICAgIHBvc2l0aW9uID0gc3RyaW5nSW5kZXhPZihzdHJpbmcsIHNlYXJjaFN0cmluZywgMCk7XG4gICAgd2hpbGUgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgcmVwbGFjZW1lbnQgPSBmdW5jdGlvbmFsUmVwbGFjZVxuICAgICAgICA/IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZShzZWFyY2hTdHJpbmcsIHBvc2l0aW9uLCBzdHJpbmcpKVxuICAgICAgICA6IGdldFN1YnN0aXR1dGlvbihzZWFyY2hTdHJpbmcsIHN0cmluZywgcG9zaXRpb24sIFtdLCB1bmRlZmluZWQsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nU2xpY2Uoc3RyaW5nLCBlbmRPZkxhc3RNYXRjaCwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICBlbmRPZkxhc3RNYXRjaCA9IHBvc2l0aW9uICsgc2VhcmNoTGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBzdHJpbmdJbmRleE9mKHN0cmluZywgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiArIGFkdmFuY2VCeSk7XG4gICAgfVxuICAgIGlmIChlbmRPZkxhc3RNYXRjaCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdTbGljZShzdHJpbmcsIGVuZE9mTGFzdE1hdGNoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3ByZWZlci1lc2NhcGUtcmVwbGFjZW1lbnQtZG9sbGFyLWNoYXIgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLXVzZWxlc3MtZG9sbGFyLXJlcGxhY2VtZW50cyAtLSBmYWxzZSBwb3NpdGl2ZVxuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3JlcGxhY2UnLCBmdW5jdGlvbiAoXywgbmF0aXZlUmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBVTlNBRkVfU1VCU1RJVFVURSA9IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID8gJyQnIDogJyQwJztcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBpc051bGxPclVuZGVmaW5lZChzZWFyY2hWYWx1ZSkgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VhcmNoVmFsdWUsIFJFUExBQ0UpO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyXG4gICAgICAgID8gY2FsbChyZXBsYWNlciwgc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBjYWxsKG5hdGl2ZVJlcGxhY2UsIHRvU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAoc3RyaW5nLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiByZXBsYWNlVmFsdWUgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsIFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsICckPCcpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlUmVwbGFjZSwgcngsIFMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgIHB1c2gocmVzdWx0cywgcmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBwdXNoKGNhcHR1cmVzLCBtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBjb25jYXQoW21hdGNoZWRdLCBjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHB1c2gocmVwbGFjZXJBcmdzLCBuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhhcHBseShyZXBsYWNlVmFsdWUsIHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xufSwgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIHx8ICFSRVBMQUNFX0tFRVBTXyQwIHx8IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zYW1lLXZhbHVlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc2VhcmNoJywgZnVuY3Rpb24gKFNFQVJDSCwgbmF0aXZlU2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc2VhcmNoZXIgPSBpc051bGxPclVuZGVmaW5lZChyZWdleHApID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHJlZ2V4cCwgU0VBUkNIKTtcbiAgICAgIHJldHVybiBzZWFyY2hlciA/IGNhbGwoc2VhcmNoZXIsIHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXSh0b1N0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVTZWFyY2gsIHJ4LCBTKTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc21hbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNtYWxsXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc21hbGwnKSB9LCB7XG4gIHNtYWxsOiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoJHB1c2gpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoICE9PSAyIHx8IHJlc3VsdFswXSAhPT0gJ2EnIHx8IHJlc3VsdFsxXSAhPT0gJ2InO1xufSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzcGxpdCcsIGZ1bmN0aW9uIChTUExJVCwgbmF0aXZlU3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJy5zcGxpdCgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9IDQgfHxcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9IDIgfHxcbiAgICAnLicuc3BsaXQoLyguPykoLj8pLykubGVuZ3RoICE9IDQgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMSB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBjYWxsKG5hdGl2ZVNwbGl0LCBzdHJpbmcsIHNlcGFyYXRvciwgbGltKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gY2FsbChyZWdleHBFeGVjLCBzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIHB1c2gob3V0cHV0LCBzdHJpbmdTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcHBseSgkcHVzaCwgb3V0cHV0LCBhcnJheVNsaWNlKG1hdGNoLCAxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIWV4ZWMoc2VwYXJhdG9yQ29weSwgJycpKSBwdXNoKG91dHB1dCwgJycpO1xuICAgICAgfSBlbHNlIHB1c2gob3V0cHV0LCBzdHJpbmdTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gYXJyYXlTbGljZShvdXRwdXQsIDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBjYWxsKG5hdGl2ZVNwbGl0LCB0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHNlcGFyYXRvcikgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VwYXJhdG9yLCBTUExJVCk7XG4gICAgICByZXR1cm4gc3BsaXR0ZXJcbiAgICAgICAgPyBjYWxsKHNwbGl0dGVyLCBzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGNhbGwoaW50ZXJuYWxTcGxpdCwgdG9TdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIGxpbWl0KSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcngsIFMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBzdHJpbmdTbGljZShTLCBxKSA6IFMpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9IG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoVU5TVVBQT1JURURfWSA/IHEgOiAwKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgcHVzaChBLCB6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlKFMsIHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMsIFVOU1VQUE9SVEVEX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtc3RhcnRzd2l0aCAtLSBzYWZlXG52YXIgbmF0aXZlU3RhcnRzV2l0aCA9IHVuY3VycnlUaGlzKCcnLnN0YXJ0c1dpdGgpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RhcnRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgobWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSB0b1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGgodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogc3RyaW5nU2xpY2UodGhhdCwgaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RyaWtlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdHJpa2VcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdHJpa2UnKSB9LCB7XG4gIHN0cmlrZTogZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdWJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1YlxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1YicpIH0sIHtcbiAgc3ViOiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItc3RyaW5nLXNsaWNlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgRk9SQ0VEID0gIScnLnN1YnN0ciB8fCAnYWInLnN1YnN0cigtMSkgIT09ICdiJztcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3Vic3RyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJzdHJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzdWJzdHI6IGZ1bmN0aW9uIHN1YnN0cihzdGFydCwgbGVuZ3RoKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICB2YXIgc2l6ZSA9IHRoYXQubGVuZ3RoO1xuICAgIHZhciBpbnRTdGFydCA9IHRvSW50ZWdlck9ySW5maW5pdHkoc3RhcnQpO1xuICAgIHZhciBpbnRMZW5ndGgsIGludEVuZDtcbiAgICBpZiAoaW50U3RhcnQgPT09IEluZmluaXR5KSBpbnRTdGFydCA9IDA7XG4gICAgaWYgKGludFN0YXJ0IDwgMCkgaW50U3RhcnQgPSBtYXgoc2l6ZSArIGludFN0YXJ0LCAwKTtcbiAgICBpbnRMZW5ndGggPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHNpemUgOiB0b0ludGVnZXJPckluZmluaXR5KGxlbmd0aCk7XG4gICAgaWYgKGludExlbmd0aCA8PSAwIHx8IGludExlbmd0aCA9PT0gSW5maW5pdHkpIHJldHVybiAnJztcbiAgICBpbnRFbmQgPSBtaW4oaW50U3RhcnQgKyBpbnRMZW5ndGgsIHNpemUpO1xuICAgIHJldHVybiBpbnRTdGFydCA+PSBpbnRFbmQgPyAnJyA6IHN0cmluZ1NsaWNlKHRoYXQsIGludFN0YXJ0LCBpbnRFbmQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1cFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1cCcpIH0sIHtcbiAgc3VwOiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbGluZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLXJpZ2h0Jyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cmltRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWVuZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltRW5kJywgZm9yY2VkOiAnJy50cmltRW5kICE9PSB0cmltRW5kIH0sIHtcbiAgdHJpbUVuZDogdHJpbUVuZFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cmltU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tc3RhcnQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbUxlZnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1sZWZ0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltbGVmdC10cmltcmlnaHQgLS0gc2FmZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbVN0YXJ0JywgZm9yY2VkOiAnJy50cmltTGVmdCAhPT0gdHJpbVN0YXJ0IH0sIHtcbiAgdHJpbUxlZnQ6IHRyaW1TdGFydFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cmltRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWVuZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1sZWZ0LXRyaW1yaWdodCAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltRW5kJywgZm9yY2VkOiAnJy50cmltUmlnaHQgIT09IHRyaW1FbmQgfSwge1xuICB0cmltUmlnaHQ6IHRyaW1FbmRcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbGluZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLWxlZnQnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1zdGFydCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltU3RhcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbVN0YXJ0JywgZm9yY2VkOiAnJy50cmltU3RhcnQgIT09IHRyaW1TdGFydCB9LCB7XG4gIHRyaW1TdGFydDogdHJpbVN0YXJ0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuYXN5bmNpdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG52YXIgZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2wgJiYgJFN5bWJvbFtQUk9UT1RZUEVdO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZShTeW1ib2xQcm90b3R5cGUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXNPd24oTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhc093bihPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgY2FsbCgkcHJvcGVydHlJc0VudW1lcmFibGUsIHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJvcGVydHlLZXkoVik7XG4gIHZhciBlbnVtZXJhYmxlID0gY2FsbChuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSwgdGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIFApICYmICFoYXNPd24oT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhc093bih0aGlzLCBQKSB8fCAhaGFzT3duKEFsbFN5bWJvbHMsIFApIHx8IGhhc093bih0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXVxuICAgID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXNPd24oaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKGhpZGRlbktleXMsIGtleSkpIHB1c2gocmVzdWx0LCBrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXNPd24oT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcHVzaChyZXN1bHQsIEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKSkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICR0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIGNhbGwoc2V0dGVyLCBPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzT3duKHRoaXMsIEhJRERFTikgJiYgaGFzT3duKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbFtQUk9UT1RZUEVdO1xuXG4gIGRlZmluZUJ1aWx0SW4oU3ltYm9sUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIGRlZmluZUJ1aWx0SW4oJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0aWVzO1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIGRlZmluZUJ1aWx0SW4oT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgdGhpc1N5bWJvbFZhbHVlID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnZhbHVlT2YpO1xuICB2YXIgc3ltYm9sRGVzY3JpcHRpdmVTdHJpbmcgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudG9TdHJpbmcpO1xuICB2YXIgcmVnZXhwID0gL15TeW1ib2xcXCgoLiopXFwpW14pXSskLztcbiAgdmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbiAgdmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4gIGRlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IHRoaXNTeW1ib2xWYWx1ZSh0aGlzKTtcbiAgICAgIGlmIChoYXNPd24oRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sRGVzY3JpcHRpdmVTdHJpbmcoc3ltYm9sKTtcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1yZWdpc3RyeS1kZXRlY3Rpb24nKTtcblxudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wuZm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhrZXkpO1xuICAgIGlmIChoYXNPd24oU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJykoc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5oYXNJbnN0YW5jZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmhhc2luc3RhbmNlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2hhc0luc3RhbmNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmlzY29uY2F0c3ByZWFkYWJsZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wua2V5LWZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhzeW0pICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzT3duKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5tYXRjaEFsbGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoYWxsXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoQWxsJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLm1hdGNoYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wucmVwbGFjZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnJlcGxhY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5zZWFyY2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zZWFyY2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc2VhcmNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLnNwZWNpZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGVjaWVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuc3BsaXRgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGxpdFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZScpO1xuXG4vLyBgU3ltYm9sLnRvUHJpbWl0aXZlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9wcmltaXRpdmVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmRlZmluZVN5bWJvbFRvUHJpbWl0aXZlKCk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdldEJ1aWx0SW4oJ1N5bWJvbCcpLCAnU3ltYm9sJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLnVuc2NvcGFibGVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudW5zY29wYWJsZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnYXQnLCBmdW5jdGlvbiBhdChpbmRleCkge1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogT1trXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRBcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIHUkQXJyYXlDb3B5V2l0aGluID0gdW5jdXJyeVRoaXMoJEFycmF5Q29weVdpdGhpbik7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmNvcHl3aXRoaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2NvcHlXaXRoaW4nLCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgcmV0dXJuIHUkQXJyYXlDb3B5V2l0aGluKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciB0b0JpZ0ludCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1iaWctaW50Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIHNsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4vLyBWOCB+IENocm9tZSA8IDU5LCBTYWZhcmkgPCAxNC4xLCBGRiA8IDU1LCBFZGdlIDw9MThcbnZhciBDT05WRVJTSU9OX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvdW50ID0gMDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG4gIG5ldyBJbnQ4QXJyYXkoMikuZmlsbCh7IHZhbHVlT2Y6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvdW50Kys7IH0gfSk7XG4gIHJldHVybiBjb3VudCAhPT0gMTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgYWN0dWFsVmFsdWUgPSBzbGljZShjbGFzc29mKHRoaXMpLCAwLCAzKSA9PT0gJ0JpZycgPyB0b0JpZ0ludCh2YWx1ZSkgOiArdmFsdWU7XG4gIHJldHVybiBjYWxsKCRmaWxsLCB0aGlzLCBhY3R1YWxWYWx1ZSwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59LCBDT05WRVJTSU9OX0JVRyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsdGVyXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgbGlzdCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRMYXN0SW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLWZyb20tbGFzdCcpLmZpbmRMYXN0SW5kZXg7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZExhc3RJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZExhc3RJbmRleCcsIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmRMYXN0SW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRMYXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi1mcm9tLWxhc3QnKS5maW5kTGFzdDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kTGFzdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maW5kLWZyb20tbGFzdFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZExhc3QnLCBmdW5jdGlvbiBmaW5kTGFzdChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZExhc3QoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaW5kJywgZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZChhVHlwZWRBcnJheSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0NjRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0NjQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZvcmVhY2hcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICRmb3JFYWNoKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG5cbi8vIGAlVHlwZWRBcnJheSUuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5mcm9tXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdmcm9tJywgdHlwZWRBcnJheUZyb20sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5jbHVkZXMnLCBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5jbHVkZXMoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5kZXhPZihhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgYXJyYXlWYWx1ZXMgPSB1bmN1cnJ5VGhpcyhBcnJheUl0ZXJhdG9ycy52YWx1ZXMpO1xudmFyIGFycmF5S2V5cyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmtleXMpO1xudmFyIGFycmF5RW50cmllcyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmVudHJpZXMpO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlO1xuXG52YXIgR0VORVJJQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwoWzFdKTtcbn0pO1xuXG52YXIgSVRFUkFUT1JfSVNfVkFMVUVTID0gISFUeXBlZEFycmF5UHJvdG90eXBlXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlc1xuICAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlcy5uYW1lID09PSAndmFsdWVzJztcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdlbnRyaWVzJywgZnVuY3Rpb24gZW50cmllcygpIHtcbiAgcmV0dXJuIGFycmF5RW50cmllcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59LCBHRU5FUklDKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0sIEdFTkVSSUMpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS52YWx1ZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsIEdFTkVSSUMgfHwgIUlURVJBVE9SX0lTX1ZBTFVFUywgeyBuYW1lOiAndmFsdWVzJyB9KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCBHRU5FUklDIHx8ICFJVEVSQVRPUl9JU19WQUxVRVMsIHsgbmFtZTogJ3ZhbHVlcycgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdqb2luJywgZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgcmV0dXJuICRqb2luKGFUeXBlZEFycmF5KHRoaXMpLCBzZXBhcmF0b3IpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciAkbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gYXBwbHkoJGxhc3RJbmRleE9mLCBhVHlwZWRBcnJheSh0aGlzKSwgbGVuZ3RoID4gMSA/IFtzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV1dIDogW3NlYXJjaEVsZW1lbnRdKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubWFwXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdtYXAnLCBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkbWFwKGFUeXBlZEFycmF5KHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3ICh0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKE8pKShsZW5ndGgpO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5vZlxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnb2YnLCBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlUmlnaHQnLCBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciAkc2V0ID0gSW50OEFycmF5UHJvdG90eXBlICYmIEludDhBcnJheVByb3RvdHlwZS5zZXQ7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgyKTtcbiAgY2FsbCgkc2V0LCBhcnJheSwgeyBsZW5ndGg6IDEsIDA6IDMgfSwgMSk7XG4gIHJldHVybiBhcnJheVsxXSAhPT0gMztcbn0pO1xuXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMTI5NCBhbmQgb3RoZXJcbnZhciBUT19PQkpFQ1RfQlVHID0gV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTICYmIEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoMik7XG4gIGFycmF5LnNldCgxKTtcbiAgYXJyYXkuc2V0KCcyJywgMSk7XG4gIHJldHVybiBhcnJheVswXSAhPT0gMCB8fCBhcnJheVsxXSAhPT0gMjtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIHNyYyA9IHRvSW5kZXhlZE9iamVjdChhcnJheUxpa2UpO1xuICBpZiAoV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTKSByZXR1cm4gY2FsbCgkc2V0LCB0aGlzLCBzcmMsIG9mZnNldCk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKHNyYyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgIVdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyB8fCBUT19PQkpFQ1RfQlVHKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29tZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29tZScsIGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRzb21lKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpbnRlcm5hbFNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEZGID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uJyk7XG52YXIgSUVfT1JfRURHRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZScpO1xudmFyIFY4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgVWludDE2QXJyYXkgPSBnbG9iYWwuVWludDE2QXJyYXk7XG52YXIgbmF0aXZlU29ydCA9IFVpbnQxNkFycmF5ICYmIHVuY3VycnlUaGlzKFVpbnQxNkFycmF5LnByb3RvdHlwZS5zb3J0KTtcblxuLy8gV2ViS2l0XG52YXIgQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMgPSAhIW5hdGl2ZVNvcnQgJiYgIShmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZVNvcnQobmV3IFVpbnQxNkFycmF5KDIpLCBudWxsKTtcbn0pICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlU29ydChuZXcgVWludDE2QXJyYXkoMiksIHt9KTtcbn0pKTtcblxudmFyIFNUQUJMRV9TT1JUID0gISFuYXRpdmVTb3J0ICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIGNhbiBiZSB0b28gc2xvdywgc28gY2hlY2sgZW5naW5lcyB2ZXJzaW9uc1xuICBpZiAoVjgpIHJldHVybiBWOCA8IDc0O1xuICBpZiAoRkYpIHJldHVybiBGRiA8IDY3O1xuICBpZiAoSUVfT1JfRURHRSkgcmV0dXJuIHRydWU7XG4gIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDI7XG5cbiAgdmFyIGFycmF5ID0gbmV3IFVpbnQxNkFycmF5KDUxNik7XG4gIHZhciBleHBlY3RlZCA9IEFycmF5KDUxNik7XG4gIHZhciBpbmRleCwgbW9kO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDUxNjsgaW5kZXgrKykge1xuICAgIG1vZCA9IGluZGV4ICUgNDtcbiAgICBhcnJheVtpbmRleF0gPSA1MTUgLSBpbmRleDtcbiAgICBleHBlY3RlZFtpbmRleF0gPSBpbmRleCAtIDIgKiBtb2QgKyAzO1xuICB9XG5cbiAgbmF0aXZlU29ydChhcnJheSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLyA0IHwgMCkgLSAoYiAvIDQgfCAwKTtcbiAgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNTE2OyBpbmRleCsrKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSAhPT0gZXhwZWN0ZWRbaW5kZXhdKSByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gK2NvbXBhcmVmbih4LCB5KSB8fCAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKHkgIT09IHkpIHJldHVybiAtMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmICh4ICE9PSB4KSByZXR1cm4gMTtcbiAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSByZXR1cm4gMSAvIHggPiAwICYmIDEgLyB5IDwgMCA/IDEgOiAtMTtcbiAgICByZXR1cm4geCA+IHk7XG4gIH07XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb3J0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb3J0JywgZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSBhQ2FsbGFibGUoY29tcGFyZWZuKTtcbiAgaWYgKFNUQUJMRV9TT1JUKSByZXR1cm4gbmF0aXZlU29ydCh0aGlzLCBjb21wYXJlZm4pO1xuXG4gIHJldHVybiBpbnRlcm5hbFNvcnQoYVR5cGVkQXJyYXkodGhpcyksIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xufSwgIVNUQUJMRV9TT1JUIHx8IEFDQ0VQVF9JTkNPUlJFQ1RfQVJHVU1FTlRTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zdWJhcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3N1YmFycmF5JywgZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gIHZhciBiZWdpbkluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoTyk7XG4gIHJldHVybiBuZXcgQyhcbiAgICBPLmJ1ZmZlcixcbiAgICBPLmJ5dGVPZmZzZXQgKyBiZWdpbkluZGV4ICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtIGJlZ2luSW5kZXgpXG4gICk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJHRvTG9jYWxlU3RyaW5nID0gW10udG9Mb2NhbGVTdHJpbmc7XG5cbi8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbnZhciBUT19MT0NBTEVfU1RSSU5HX0JVRyA9ICEhSW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IEludDhBcnJheSgxKSk7XG59KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBJbnQ4QXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5LnByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvbG9jYWxlc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b0xvY2FsZVN0cmluZycsIGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICByZXR1cm4gYXBwbHkoXG4gICAgJHRvTG9jYWxlU3RyaW5nLFxuICAgIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID8gYXJyYXlTbGljZShhVHlwZWRBcnJheSh0aGlzKSkgOiBhVHlwZWRBcnJheSh0aGlzKSxcbiAgICBhcnJheVNsaWNlKGFyZ3VtZW50cylcbiAgKTtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBVaW50OEFycmF5UHJvdG90eXBlID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZSB8fCB7fTtcbnZhciBhcnJheVRvU3RyaW5nID0gW10udG9TdHJpbmc7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICBhcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGpvaW4odGhpcyk7XG4gIH07XG59XG5cbnZhciBJU19OT1RfQVJSQVlfTUVUSE9EID0gVWludDhBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9zdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvU3RyaW5nJywgYXJyYXlUb1N0cmluZywgSVNfTk9UX0FSUkFZX01FVEhPRCk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQxNicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQzMicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OENsYW1wZWRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBoZXgyID0gL15bXFxkYS1mXXsyfSQvaTtcbnZhciBoZXg0ID0gL15bXFxkYS1mXXs0fSQvaTtcblxuLy8gYHVuZXNjYXBlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdW5lc2NhcGUtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgdW5lc2NhcGU6IGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjaHIsIHBhcnQ7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaHIgPSBjaGFyQXQoc3RyLCBpbmRleCsrKTtcbiAgICAgIGlmIChjaHIgPT09ICclJykge1xuICAgICAgICBpZiAoY2hhckF0KHN0ciwgaW5kZXgpID09PSAndScpIHtcbiAgICAgICAgICBwYXJ0ID0gc3RyaW5nU2xpY2Uoc3RyLCBpbmRleCArIDEsIGluZGV4ICsgNSk7XG4gICAgICAgICAgaWYgKGV4ZWMoaGV4NCwgcGFydCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBmcm9tQ2hhckNvZGUocGFyc2VJbnQocGFydCwgMTYpKTtcbiAgICAgICAgICAgIGluZGV4ICs9IDU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydCA9IHN0cmluZ1NsaWNlKHN0ciwgaW5kZXgsIGluZGV4ICsgMik7XG4gICAgICAgICAgaWYgKGV4ZWMoaGV4MiwgcGFydCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBmcm9tQ2hhckNvZGUocGFyc2VJbnQocGFydCwgMTYpKTtcbiAgICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG52YXIgaXNFeHRlbnNpYmxlID0gJE9iamVjdC5pc0V4dGVuc2libGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZnJvemVuIC0tIHNhZmVcbnZhciBpc0Zyb3plbiA9ICRPYmplY3QuaXNGcm96ZW47XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzc2VhbGVkIC0tIHNhZmVcbnZhciBpc1NlYWxlZCA9ICRPYmplY3QuaXNTZWFsZWQ7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWZyZWV6ZSAtLSBzYWZlXG52YXIgZnJlZXplID0gJE9iamVjdC5mcmVlemU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNlYWwgLS0gc2FmZVxudmFyIHNlYWwgPSAkT2JqZWN0LnNlYWw7XG5cbnZhciBGUk9aRU4gPSB7fTtcbnZhciBTRUFMRUQgPSB7fTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgSW50ZXJuYWxXZWFrTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxuLy8gYFdlYWtNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAtY29uc3RydWN0b3JcbnZhciAkV2Vha01hcCA9IGNvbGxlY3Rpb24oJ1dlYWtNYXAnLCB3cmFwcGVyLCBjb2xsZWN0aW9uV2Vhayk7XG52YXIgV2Vha01hcFByb3RvdHlwZSA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG5cbi8vIENoYWtyYSBFZGdlIGJ1ZzogYWRkaW5nIGZyb3plbiBhcnJheXMgdG8gV2Vha01hcCB1bmZyZWV6ZSB0aGVtXG52YXIgaGFzTVNFZGdlRnJlZXppbmdCdWcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBGUkVFWklORyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyb3plbkFycmF5ID0gZnJlZXplKFtdKTtcbiAgICBuYXRpdmVTZXQobmV3ICRXZWFrTWFwKCksIGZyb3plbkFycmF5LCAxKTtcbiAgICByZXR1cm4gIWlzRnJvemVuKGZyb3plbkFycmF5KTtcbiAgfSk7XG59O1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG4vLyBXZSBjYW4ndCB1c2UgZmVhdHVyZSBkZXRlY3Rpb24gYmVjYXVzZSBpdCBjcmFzaCBzb21lIG9sZCBJRSBidWlsZHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80ODVcbmlmIChOQVRJVkVfV0VBS19NQVApIGlmIChJU19JRTExKSB7XG4gIEludGVybmFsV2Vha01hcCA9IGNvbGxlY3Rpb25XZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsICdXZWFrTWFwJywgdHJ1ZSk7XG4gIEludGVybmFsTWV0YWRhdGFNb2R1bGUuZW5hYmxlKCk7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIGRlZmluZUJ1aWx0SW5zKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xuLy8gQ2hha3JhIEVkZ2UgZnJvemVuIGtleXMgZml4XG59IGVsc2UgaWYgKGhhc01TRWRnZUZyZWV6aW5nQnVnKCkpIHtcbiAgZGVmaW5lQnVpbHRJbnMoV2Vha01hcFByb3RvdHlwZSwge1xuICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBhcnJheUludGVncml0eUxldmVsO1xuICAgICAgaWYgKGlzQXJyYXkoa2V5KSkge1xuICAgICAgICBpZiAoaXNGcm96ZW4oa2V5KSkgYXJyYXlJbnRlZ3JpdHlMZXZlbCA9IEZST1pFTjtcbiAgICAgICAgZWxzZSBpZiAoaXNTZWFsZWQoa2V5KSkgYXJyYXlJbnRlZ3JpdHlMZXZlbCA9IFNFQUxFRDtcbiAgICAgIH1cbiAgICAgIG5hdGl2ZVNldCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmIChhcnJheUludGVncml0eUxldmVsID09IEZST1pFTikgZnJlZXplKGtleSk7XG4gICAgICBpZiAoYXJyYXlJbnRlZ3JpdHlMZXZlbCA9PSBTRUFMRUQpIHNlYWwoa2V5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSk7XG59XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy53ZWFrLW1hcC5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstc2V0LmNvbnN0cnVjdG9yJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIGN0b2kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmFzZTY0LW1hcCcpLmN0b2k7XG5cbnZhciBkaXNhbGxvd2VkID0gL1teXFxkKy9hLXpdL2k7XG52YXIgd2hpdGVzcGFjZXMgPSAvW1xcdFxcblxcZlxcciBdKy9nO1xudmFyIGZpbmFsRXEgPSAvWz1dKyQvO1xuXG52YXIgJGF0b2IgPSBnZXRCdWlsdEluKCdhdG9iJyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoZGlzYWxsb3dlZC5leGVjKTtcblxudmFyIE5PX1NQQUNFU19JR05PUkUgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkYXRvYignICcpICE9PSAnJztcbn0pO1xuXG52YXIgTk9fRU5DT0RJTkdfQ0hFQ0sgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkYXRvYignYScpO1xufSk7XG5cbnZhciBOT19BUkdfUkVDRUlWSU5HX0NIRUNLID0gIU5PX1NQQUNFU19JR05PUkUgJiYgIU5PX0VOQ09ESU5HX0NIRUNLICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRhdG9iKCk7XG59KTtcblxudmFyIFdST05HX0FSSVRZID0gIU5PX1NQQUNFU19JR05PUkUgJiYgIU5PX0VOQ09ESU5HX0NIRUNLICYmICRhdG9iLmxlbmd0aCAhPT0gMTtcblxuLy8gYGF0b2JgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1hdG9iXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX1NQQUNFU19JR05PUkUgfHwgTk9fRU5DT0RJTkdfQ0hFQ0sgfHwgTk9fQVJHX1JFQ0VJVklOR19DSEVDSyB8fCBXUk9OR19BUklUWSB9LCB7XG4gIGF0b2I6IGZ1bmN0aW9uIGF0b2IoZGF0YSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIC8vIGB3ZWJwYWNrYCBkZXYgc2VydmVyIGJ1ZyBvbiBJRSBnbG9iYWwgbWV0aG9kcyAtIHVzZSBjYWxsKGZuLCBnbG9iYWwsIC4uLilcbiAgICBpZiAoTk9fQVJHX1JFQ0VJVklOR19DSEVDSyB8fCBXUk9OR19BUklUWSkgcmV0dXJuIGNhbGwoJGF0b2IsIGdsb2JhbCwgZGF0YSk7XG4gICAgdmFyIHN0cmluZyA9IHJlcGxhY2UodG9TdHJpbmcoZGF0YSksIHdoaXRlc3BhY2VzLCAnJyk7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGJjID0gMDtcbiAgICB2YXIgY2hyLCBicztcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCAlIDQgPT0gMCkge1xuICAgICAgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGZpbmFsRXEsICcnKTtcbiAgICB9XG4gICAgaWYgKHN0cmluZy5sZW5ndGggJSA0ID09IDEgfHwgZXhlYyhkaXNhbGxvd2VkLCBzdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgKGdldEJ1aWx0SW4oJ0RPTUV4Y2VwdGlvbicpKSgnVGhlIHN0cmluZyBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQnLCAnSW52YWxpZENoYXJhY3RlckVycm9yJyk7XG4gICAgfVxuICAgIHdoaWxlIChjaHIgPSBjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbisrKSkge1xuICAgICAgaWYgKGhhc093bihjdG9pLCBjaHIpKSB7XG4gICAgICAgIGJzID0gYmMgJSA0ID8gYnMgKiA2NCArIGN0b2lbY2hyXSA6IGN0b2lbY2hyXTtcbiAgICAgICAgaWYgKGJjKysgJSA0KSBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDI1NSAmIGJzID4+ICgtMiAqIGJjICYgNikpO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIG91dHB1dDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBpdG9jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Jhc2U2NC1tYXAnKS5pdG9jO1xuXG52YXIgJGJ0b2EgPSBnZXRCdWlsdEluKCdidG9hJyk7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG5cbnZhciBOT19BUkdfUkVDRUlWSU5HX0NIRUNLID0gISEkYnRvYSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkYnRvYSgpO1xufSk7XG5cbnZhciBXUk9OR19BUkdfQ09OVkVSU0lPTiA9ICEhJGJ0b2EgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGJ0b2EobnVsbCkgIT09ICdiblZzYkE9PSc7XG59KTtcblxudmFyIFdST05HX0FSSVRZID0gISEkYnRvYSAmJiAkYnRvYS5sZW5ndGggIT09IDE7XG5cbi8vIGBidG9hYCBtZXRob2Rcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNkb20tYnRvYVxuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBOT19BUkdfUkVDRUlWSU5HX0NIRUNLIHx8IFdST05HX0FSR19DT05WRVJTSU9OIHx8IFdST05HX0FSSVRZIH0sIHtcbiAgYnRvYTogZnVuY3Rpb24gYnRvYShkYXRhKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgLy8gYHdlYnBhY2tgIGRldiBzZXJ2ZXIgYnVnIG9uIElFIGdsb2JhbCBtZXRob2RzIC0gdXNlIGNhbGwoZm4sIGdsb2JhbCwgLi4uKVxuICAgIGlmIChOT19BUkdfUkVDRUlWSU5HX0NIRUNLIHx8IFdST05HX0FSR19DT05WRVJTSU9OIHx8IFdST05HX0FSSVRZKSByZXR1cm4gY2FsbCgkYnRvYSwgZ2xvYmFsLCB0b1N0cmluZyhkYXRhKSk7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKGRhdGEpO1xuICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBtYXAgPSBpdG9jO1xuICAgIHZhciBibG9jaywgY2hhckNvZGU7XG4gICAgd2hpbGUgKGNoYXJBdChzdHJpbmcsIHBvc2l0aW9uKSB8fCAobWFwID0gJz0nLCBwb3NpdGlvbiAlIDEpKSB7XG4gICAgICBjaGFyQ29kZSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBwb3NpdGlvbiArPSAzIC8gNCk7XG4gICAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICAgIHRocm93IG5ldyAoZ2V0QnVpbHRJbignRE9NRXhjZXB0aW9uJykpKCdUaGUgc3RyaW5nIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3V0c2lkZSBvZiB0aGUgTGF0aW4xIHJhbmdlJywgJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcicpO1xuICAgICAgfVxuICAgICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gICAgICBvdXRwdXQgKz0gY2hhckF0KG1hcCwgNjMgJiBibG9jayA+PiA4IC0gcG9zaXRpb24gJSAxICogOCk7XG4gICAgfSByZXR1cm4gb3V0cHV0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjbGVhckltbWVkaWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuY2xlYXI7XG5cbi8vIGBjbGVhckltbWVkaWF0ZWAgbWV0aG9kXG4vLyBodHRwOi8vdzNjLmdpdGh1Yi5pby9zZXRJbW1lZGlhdGUvI3NpLWNsZWFySW1tZWRpYXRlXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IGdsb2JhbC5jbGVhckltbWVkaWF0ZSAhPT0gY2xlYXJJbW1lZGlhdGUgfSwge1xuICBjbGVhckltbWVkaWF0ZTogY2xlYXJJbW1lZGlhdGVcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkge1xuICAgIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUpO1xuICB9XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSkge1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUsICdET01Ub2tlbkxpc3QnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRyeU5vZGVSZXF1aXJlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS1ub2RlLXJlcXVpcmUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBlcnJvclRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXRvLXN0cmluZycpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBET01FeGNlcHRpb25Db25zdGFudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2stY2xlYXInKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJztcbnZhciBEQVRBX0NMT05FX0VSUiA9ICdEQVRBX0NMT05FX0VSUic7XG52YXIgRXJyb3IgPSBnZXRCdWlsdEluKCdFcnJvcicpO1xuLy8gTm9kZUpTIDwgMTcuMCBkb2VzIG5vdCBleHBvc2UgYERPTUV4Y2VwdGlvbmAgdG8gZ2xvYmFsXG52YXIgTmF0aXZlRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKSB8fCAoZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIE5vZGVKUyA8IDE1LjAgZG9lcyBub3QgZXhwb3NlIGBNZXNzYWdlQ2hhbm5lbGAgdG8gZ2xvYmFsXG4gICAgdmFyIE1lc3NhZ2VDaGFubmVsID0gZ2V0QnVpbHRJbignTWVzc2FnZUNoYW5uZWwnKSB8fCB0cnlOb2RlUmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKS5NZXNzYWdlQ2hhbm5lbDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8td2Vhay1tYXAsIHVuaWNvcm4vcmVxdWlyZS1wb3N0LW1lc3NhZ2UtdGFyZ2V0LW9yaWdpbiAtLSBzYWZlXG4gICAgbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEucG9zdE1lc3NhZ2UobmV3IFdlYWtNYXAoKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm5hbWUgPT0gREFUQV9DTE9ORV9FUlIgJiYgZXJyb3IuY29kZSA9PSAyNSkgcmV0dXJuIGVycm9yLmNvbnN0cnVjdG9yO1xuICB9XG59KSgpO1xudmFyIE5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZSA9IE5hdGl2ZURPTUV4Y2VwdGlvbiAmJiBOYXRpdmVET01FeGNlcHRpb24ucHJvdG90eXBlO1xudmFyIEVycm9yUHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoRE9NX0VYQ0VQVElPTik7XG52YXIgSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBFcnJvcihET01fRVhDRVBUSU9OKTtcblxudmFyIGNvZGVGb3IgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaGFzT3duKERPTUV4Y2VwdGlvbkNvbnN0YW50cywgbmFtZSkgJiYgRE9NRXhjZXB0aW9uQ29uc3RhbnRzW25hbWVdLm0gPyBET01FeGNlcHRpb25Db25zdGFudHNbbmFtZV0uYyA6IDA7XG59O1xuXG52YXIgJERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIERPTUV4Y2VwdGlvbigpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBET01FeGNlcHRpb25Qcm90b3R5cGUpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCAnRXJyb3InKTtcbiAgdmFyIGNvZGUgPSBjb2RlRm9yKG5hbWUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBET01fRVhDRVBUSU9OLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBjb2RlOiBjb2RlXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH1cbiAgaWYgKEhBU19TVEFDSykge1xuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLm5hbWUgPSBET01fRVhDRVBUSU9OO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBjbGVhckVycm9yU3RhY2soZXJyb3Iuc3RhY2ssIDEpKSk7XG4gIH1cbn07XG5cbnZhciBET01FeGNlcHRpb25Qcm90b3R5cGUgPSAkRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IGNyZWF0ZShFcnJvclByb3RvdHlwZSk7XG5cbnZhciBjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4geyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIGdldDogZ2V0IH07XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gY3JlYXRlR2V0dGVyRGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTtcbiAgfSk7XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgLy8gYERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29kZWAgZ2V0dGVyXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb2RlJywgZ2V0dGVyRm9yKCdjb2RlJykpO1xuICAvLyBgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5tZXNzYWdlYCBnZXR0ZXJcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ21lc3NhZ2UnLCBnZXR0ZXJGb3IoJ21lc3NhZ2UnKSk7XG4gIC8vIGBET01FeGNlcHRpb24ucHJvdG90eXBlLm5hbWVgIGdldHRlclxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnbmFtZScsIGdldHRlckZvcignbmFtZScpKTtcbn1cblxuZGVmaW5lUHJvcGVydHkoRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJERPTUV4Y2VwdGlvbikpO1xuXG4vLyBGRjM2LSBET01FeGNlcHRpb24gaXMgYSBmdW5jdGlvbiwgYnV0IGNhbid0IGJlIGNvbnN0cnVjdGVkXG52YXIgSU5DT1JSRUNUX0NPTlNUUlVDVE9SID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIShuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKCkgaW5zdGFuY2VvZiBFcnJvcik7XG59KTtcblxuLy8gU2FmYXJpIDEwLjEgLyBDaHJvbWUgMzItIC8gSUU4LSBET01FeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nIGJ1Z3NcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEVycm9yUHJvdG90eXBlLnRvU3RyaW5nICE9PSBlcnJvclRvU3RyaW5nIHx8IFN0cmluZyhuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsIDIpKSAhPT0gJzI6IDEnO1xufSk7XG5cbi8vIERlbm8gMS42LjMtIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29kZSBqdXN0IG1pc3NlZFxudmFyIElOQ09SUkVDVF9DT0RFID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBOYXRpdmVET01FeGNlcHRpb24oMSwgJ0RhdGFDbG9uZUVycm9yJykuY29kZSAhPT0gMjU7XG59KTtcblxuLy8gRGVubyAxLjYuMy0gRE9NRXhjZXB0aW9uIGNvbnN0YW50cyBqdXN0IG1pc3NlZFxudmFyIE1JU1NFRF9DT05TVEFOVFMgPSBJTkNPUlJFQ1RfQ09OU1RSVUNUT1JcbiAgfHwgTmF0aXZlRE9NRXhjZXB0aW9uW0RBVEFfQ0xPTkVfRVJSXSAhPT0gMjVcbiAgfHwgTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlW0RBVEFfQ0xPTkVfRVJSXSAhPT0gMjU7XG5cbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBJU19QVVJFID8gSU5DT1JSRUNUX1RPX1NUUklORyB8fCBJTkNPUlJFQ1RfQ09ERSB8fCBNSVNTRURfQ09OU1RBTlRTIDogSU5DT1JSRUNUX0NPTlNUUlVDVE9SO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNpZGwtRE9NRXhjZXB0aW9uXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfQ09OU1RSVUNUT1IgfSwge1xuICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb25cbn0pO1xuXG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSA9IFBvbHlmaWxsZWRET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG5pZiAoSU5DT1JSRUNUX1RPX1NUUklORyAmJiAoSVNfUFVSRSB8fCBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pKSB7XG4gIGRlZmluZUJ1aWx0SW4oUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZXJyb3JUb1N0cmluZyk7XG59XG5cbmlmIChJTkNPUlJFQ1RfQ09ERSAmJiBERVNDUklQVE9SUyAmJiBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pIHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb2RlJywgY3JlYXRlR2V0dGVyRGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvZGVGb3IoYW5PYmplY3QodGhpcykubmFtZSk7XG4gIH0pKTtcbn1cblxuLy8gYERPTUV4Y2VwdGlvbmAgY29uc3RhbnRzXG5mb3IgKHZhciBrZXkgaW4gRE9NRXhjZXB0aW9uQ29uc3RhbnRzKSBpZiAoaGFzT3duKERPTUV4Y2VwdGlvbkNvbnN0YW50cywga2V5KSkge1xuICB2YXIgY29uc3RhbnQgPSBET01FeGNlcHRpb25Db25zdGFudHNba2V5XTtcbiAgdmFyIGNvbnN0YW50TmFtZSA9IGNvbnN0YW50LnM7XG4gIHZhciBkZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDYsIGNvbnN0YW50LmMpO1xuICBpZiAoIWhhc093bihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lLCBkZXNjcmlwdG9yKTtcbiAgfVxuICBpZiAoIWhhc093bihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLCBjb25zdGFudE5hbWUpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgY29uc3RhbnROYW1lLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBET01FeGNlcHRpb25Db25zdGFudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2stY2xlYXInKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xudmFyIEVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTtcbnZhciBOYXRpdmVET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pO1xuXG52YXIgJERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIERPTUV4Y2VwdGlvbigpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBET01FeGNlcHRpb25Qcm90b3R5cGUpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCAnRXJyb3InKTtcbiAgdmFyIHRoYXQgPSBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKG1lc3NhZ2UsIG5hbWUpO1xuICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTtcbiAgZXJyb3IubmFtZSA9IERPTV9FWENFUFRJT047XG4gIGRlZmluZVByb3BlcnR5KHRoYXQsICdzdGFjaycsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBjbGVhckVycm9yU3RhY2soZXJyb3Iuc3RhY2ssIDEpKSk7XG4gIGluaGVyaXRJZlJlcXVpcmVkKHRoYXQsIHRoaXMsICRET01FeGNlcHRpb24pO1xuICByZXR1cm4gdGhhdDtcbn07XG5cbnZhciBET01FeGNlcHRpb25Qcm90b3R5cGUgPSAkRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE5hdGl2ZURPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG5cbnZhciBFUlJPUl9IQVNfU1RBQ0sgPSAnc3RhY2snIGluIEVycm9yKERPTV9FWENFUFRJT04pO1xudmFyIERPTV9FWENFUFRJT05fSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsIDIpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZGVzY3JpcHRvciA9IE5hdGl2ZURPTUV4Y2VwdGlvbiAmJiBERVNDUklQVE9SUyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgRE9NX0VYQ0VQVElPTik7XG5cbi8vIEJ1biB+IDAuMS4xIERPTUV4Y2VwdGlvbiBoYXZlIGluY29ycmVjdCBkZXNjcmlwdG9yIGFuZCB3ZSBjYW4ndCByZWRlZmluZSBpdFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0phcnJlZC1TdW1uZXIvYnVuL2lzc3Vlcy8zOTlcbnZhciBCVUdHWV9ERVNDUklQVE9SID0gISFkZXNjcmlwdG9yICYmICEoZGVzY3JpcHRvci53cml0YWJsZSAmJiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSk7XG5cbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBFUlJPUl9IQVNfU1RBQ0sgJiYgIUJVR0dZX0RFU0NSSVBUT1IgJiYgIURPTV9FWENFUFRJT05fSEFTX1NUQUNLO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvciBwYXRjaCBmb3IgYC5zdGFja2Agd2hlcmUgaXQncyByZXF1aXJlZFxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNlcy1ET01FeGNlcHRpb24tc3BlY2lhbG5lc3NcbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEX0NPTlNUUlVDVE9SIH0sIHsgLy8gVE9ETzogZml4IGV4cG9ydCBsb2dpY1xuICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb25cbn0pO1xuXG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSA9IFBvbHlmaWxsZWRET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG5pZiAoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbikge1xuICBpZiAoIUlTX1BVUkUpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgUG9seWZpbGxlZERPTUV4Y2VwdGlvbikpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIERPTUV4Y2VwdGlvbkNvbnN0YW50cykgaWYgKGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIGtleSkpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBET01FeGNlcHRpb25Db25zdGFudHNba2V5XTtcbiAgICB2YXIgY29uc3RhbnROYW1lID0gY29uc3RhbnQucztcbiAgICBpZiAoIWhhc093bihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig2LCBjb25zdGFudC5jKSk7XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xuXG4vLyBgRE9NRXhjZXB0aW9uLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbnNldFRvU3RyaW5nVGFnKGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTiksIERPTV9FWENFUFRJT04pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuY2xlYXItaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5zZXQtaW1tZWRpYXRlJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcblxuLy8gYHF1ZXVlTWljcm90YXNrYCBtZXRob2Rcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXF1ZXVlbWljcm90YXNrXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBkb250Q2FsbEdldFNldDogdHJ1ZSB9LCB7XG4gIHF1ZXVlTWljcm90YXNrOiBmdW5jdGlvbiBxdWV1ZU1pY3JvdGFzayhmbikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIGFDYWxsYWJsZShmbik7XG4gICAgdmFyIGRvbWFpbiA9IElTX05PREUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgSU5DT1JSRUNUX1ZBTFVFID0gZ2xvYmFsLnNlbGYgIT09IGdsb2JhbDtcblxuLy8gYHNlbGZgIGdldHRlclxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2luZG93LW9iamVjdC5odG1sI2RvbS1zZWxmXG50cnkge1xuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3NlbGYnKTtcbiAgICAvLyBzb21lIGVuZ2luZXMgaGF2ZSBgc2VsZmAsIGJ1dCB3aXRoIGluY29ycmVjdCBkZXNjcmlwdG9yXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vaXNzdWVzLzE1NzY1XG4gICAgaWYgKElOQ09SUkVDVF9WQUxVRSB8fCAhZGVzY3JpcHRvciB8fCAhZGVzY3JpcHRvci5nZXQgfHwgIWRlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xuICAgICAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKGdsb2JhbCwgJ3NlbGYnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gc2VsZigpIHtcbiAgICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNlbGYodmFsdWUpIHtcbiAgICAgICAgICBpZiAodGhpcyAhPT0gZ2xvYmFsKSB0aHJvdyAkVHlwZUVycm9yKCdJbGxlZ2FsIGludm9jYXRpb24nKTtcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWwsICdzZWxmJywge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2UgJCh7IGdsb2JhbDogdHJ1ZSwgc2ltcGxlOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9WQUxVRSB9LCB7XG4gICAgc2VsZjogZ2xvYmFsXG4gIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBzY2hlZHVsZXJzRml4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NjaGVkdWxlcnMtZml4Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vdmVuLXNoL2J1bi9pc3N1ZXMvMTYzM1xudmFyIHNldEltbWVkaWF0ZSA9IGdsb2JhbC5zZXRJbW1lZGlhdGUgPyBzY2hlZHVsZXJzRml4KHNldFRhc2ssIGZhbHNlKSA6IHNldFRhc2s7XG5cbi8vIGBzZXRJbW1lZGlhdGVgIG1ldGhvZFxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1zZXRJbW1lZGlhdGVcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogZ2xvYmFsLnNldEltbWVkaWF0ZSAhPT0gc2V0SW1tZWRpYXRlIH0sIHtcbiAgc2V0SW1tZWRpYXRlOiBzZXRJbW1lZGlhdGVcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNjaGVkdWxlcnNGaXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2NoZWR1bGVycy1maXgnKTtcblxudmFyIHNldEludGVydmFsID0gc2NoZWR1bGVyc0ZpeChnbG9iYWwuc2V0SW50ZXJ2YWwsIHRydWUpO1xuXG4vLyBCdW4gLyBJRTktIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldGludGVydmFsXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBmb3JjZWQ6IGdsb2JhbC5zZXRJbnRlcnZhbCAhPT0gc2V0SW50ZXJ2YWwgfSwge1xuICBzZXRJbnRlcnZhbDogc2V0SW50ZXJ2YWxcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNjaGVkdWxlcnNGaXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2NoZWR1bGVycy1maXgnKTtcblxudmFyIHNldFRpbWVvdXQgPSBzY2hlZHVsZXJzRml4KGdsb2JhbC5zZXRUaW1lb3V0LCB0cnVlKTtcblxuLy8gQnVuIC8gSUU5LSBzZXRUaW1lb3V0IGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldHRpbWVvdXRcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGZvcmNlZDogZ2xvYmFsLnNldFRpbWVvdXQgIT09IHNldFRpbWVvdXQgfSwge1xuICBzZXRUaW1lb3V0OiBzZXRUaW1lb3V0XG59KTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBnZXRSZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzJyk7XG52YXIgTWFwSGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXAtaGVscGVycycpO1xudmFyIFNldEhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWhlbHBlcnMnKTtcbnZhciBFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZScpO1xudmFyIFY4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfQlJPV1NFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3NlcicpO1xudmFyIElTX0RFTk8gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWRlbm8nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIERhdGUgPSBnbG9iYWwuRGF0ZTtcbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciBFdmFsRXJyb3IgPSBnbG9iYWwuRXZhbEVycm9yO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBSZWZlcmVuY2VFcnJvciA9IGdsb2JhbC5SZWZlcmVuY2VFcnJvcjtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFVSSUVycm9yID0gZ2xvYmFsLlVSSUVycm9yO1xudmFyIFBlcmZvcm1hbmNlTWFyayA9IGdsb2JhbC5QZXJmb3JtYW5jZU1hcms7XG52YXIgV2ViQXNzZW1ibHkgPSBnbG9iYWwuV2ViQXNzZW1ibHk7XG52YXIgQ29tcGlsZUVycm9yID0gV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHkuQ29tcGlsZUVycm9yIHx8IEVycm9yO1xudmFyIExpbmtFcnJvciA9IFdlYkFzc2VtYmx5ICYmIFdlYkFzc2VtYmx5LkxpbmtFcnJvciB8fCBFcnJvcjtcbnZhciBSdW50aW1lRXJyb3IgPSBXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IgfHwgRXJyb3I7XG52YXIgRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRpbignRE9NRXhjZXB0aW9uJyk7XG52YXIgTWFwID0gTWFwSGVscGVycy5NYXA7XG52YXIgbWFwSGFzID0gTWFwSGVscGVycy5oYXM7XG52YXIgbWFwR2V0ID0gTWFwSGVscGVycy5nZXQ7XG52YXIgbWFwU2V0ID0gTWFwSGVscGVycy5zZXQ7XG52YXIgU2V0ID0gU2V0SGVscGVycy5TZXQ7XG52YXIgc2V0QWRkID0gU2V0SGVscGVycy5hZGQ7XG52YXIgb2JqZWN0S2V5cyA9IGdldEJ1aWx0aW4oJ09iamVjdCcsICdrZXlzJyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHRoaXNCb29sZWFuVmFsdWUgPSB1bmN1cnJ5VGhpcyh0cnVlLnZhbHVlT2YpO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHVuY3VycnlUaGlzKDEuMC52YWx1ZU9mKTtcbnZhciB0aGlzU3RyaW5nVmFsdWUgPSB1bmN1cnJ5VGhpcygnJy52YWx1ZU9mKTtcbnZhciB0aGlzVGltZVZhbHVlID0gdW5jdXJyeVRoaXMoRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgUEVSRk9STUFOQ0VfTUFSSyA9IHVpZCgnc3RydWN0dXJlZENsb25lJyk7XG52YXIgREFUQV9DTE9ORV9FUlJPUiA9ICdEYXRhQ2xvbmVFcnJvcic7XG52YXIgVFJBTlNGRVJSSU5HID0gJ1RyYW5zZmVycmluZyc7XG5cbnZhciBjaGVja0Jhc2ljU2VtYW50aWMgPSBmdW5jdGlvbiAoc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24pIHtcbiAgcmV0dXJuICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNldDEgPSBuZXcgZ2xvYmFsLlNldChbN10pO1xuICAgIHZhciBzZXQyID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24oc2V0MSk7XG4gICAgdmFyIG51bWJlciA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKE9iamVjdCg3KSk7XG4gICAgcmV0dXJuIHNldDIgPT0gc2V0MSB8fCAhc2V0Mi5oYXMoNykgfHwgdHlwZW9mIG51bWJlciAhPSAnb2JqZWN0JyB8fCBudW1iZXIgIT0gNztcbiAgfSkgJiYgc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb247XG59O1xuXG52YXIgY2hlY2tFcnJvcnNDbG9uaW5nID0gZnVuY3Rpb24gKHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uLCAkRXJyb3IpIHtcbiAgcmV0dXJuICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVycm9yID0gbmV3ICRFcnJvcigpO1xuICAgIHZhciB0ZXN0ID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24oeyBhOiBlcnJvciwgYjogZXJyb3IgfSk7XG4gICAgcmV0dXJuICEodGVzdCAmJiB0ZXN0LmEgPT09IHRlc3QuYiAmJiB0ZXN0LmEgaW5zdGFuY2VvZiAkRXJyb3IgJiYgdGVzdC5hLnN0YWNrID09PSBlcnJvci5zdGFjayk7XG4gIH0pO1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL3B1bGwvNTc0OVxudmFyIGNoZWNrTmV3RXJyb3JzQ2xvbmluZ1NlbWFudGljID0gZnVuY3Rpb24gKHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24obmV3IGdsb2JhbC5BZ2dyZWdhdGVFcnJvcihbMV0sIFBFUkZPUk1BTkNFX01BUkssIHsgY2F1c2U6IDMgfSkpO1xuICAgIHJldHVybiB0ZXN0Lm5hbWUgIT0gJ0FnZ3JlZ2F0ZUVycm9yJyB8fCB0ZXN0LmVycm9yc1swXSAhPSAxIHx8IHRlc3QubWVzc2FnZSAhPSBQRVJGT1JNQU5DRV9NQVJLIHx8IHRlc3QuY2F1c2UgIT0gMztcbiAgfSk7XG59O1xuXG4vLyBGRjk0KywgU2FmYXJpIDE1LjQrLCBDaHJvbWUgOTgrLCBOb2RlSlMgMTcuMCssIERlbm8gMS4xMytcbi8vIEZGPDEwMyBhbmQgU2FmYXJpIGltcGxlbWVudGF0aW9ucyBjYW4ndCBjbG9uZSBlcnJvcnNcbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE1NTY2MDRcbi8vIEZGMTAzIGNhbiBjbG9uZSBlcnJvcnMsIGJ1dCBgLnN0YWNrYCBvZiBjbG9uZSBpcyBhbiBlbXB0eSBzdHJpbmdcbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE3Nzg3NjJcbi8vIEZGMTA0KyBmaXhlZCBpdCBvbiB1c3VhbCBlcnJvcnMsIGJ1dCBub3Qgb24gRE9NRXhjZXB0aW9uc1xuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc3NzMyMVxuLy8gQ2hyb21lIDwxMDIgcmV0dXJucyBgbnVsbGAgaWYgY2xvbmVkIG9iamVjdCBjb250YWlucyBtdWx0aXBsZSByZWZlcmVuY2VzIHRvIG9uZSBlcnJvclxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MTI1NDJcbi8vIE5vZGVKUyBpbXBsZW1lbnRhdGlvbiBjYW4ndCBjbG9uZSBET01FeGNlcHRpb25zXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzQxMDM4XG4vLyBvbmx5IEZGMTAzKyBzdXBwb3J0cyBuZXcgKGh0bWwvNTc0OSkgZXJyb3IgY2xvbmluZyBzZW1hbnRpY1xudmFyIG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSA9IGdsb2JhbC5zdHJ1Y3R1cmVkQ2xvbmU7XG5cbnZhciBGT1JDRURfUkVQTEFDRU1FTlQgPSBJU19QVVJFXG4gIHx8ICFjaGVja0Vycm9yc0Nsb25pbmcobmF0aXZlU3RydWN0dXJlZENsb25lLCBFcnJvcilcbiAgfHwgIWNoZWNrRXJyb3JzQ2xvbmluZyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUsIERPTUV4Y2VwdGlvbilcbiAgfHwgIWNoZWNrTmV3RXJyb3JzQ2xvbmluZ1NlbWFudGljKG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSk7XG5cbi8vIENocm9tZSA4MissIFNhZmFyaSAxNC4xKywgRGVubyAxLjExK1xuLy8gQ2hyb21lIDc4LTgxIGltcGxlbWVudGF0aW9uIHN3YXBzIGAubmFtZWAgYW5kIGAubWVzc2FnZWAgb2YgY2xvbmVkIGBET01FeGNlcHRpb25gXG4vLyBDaHJvbWUgcmV0dXJucyBgbnVsbGAgaWYgY2xvbmVkIG9iamVjdCBjb250YWlucyBtdWx0aXBsZSByZWZlcmVuY2VzIHRvIG9uZSBlcnJvclxuLy8gU2FmYXJpIDE0LjEgaW1wbGVtZW50YXRpb24gZG9lc24ndCBjbG9uZSBzb21lIGBSZWdFeHBgIGZsYWdzLCBzbyByZXF1aXJlcyBhIHdvcmthcm91bmRcbi8vIFNhZmFyaSBpbXBsZW1lbnRhdGlvbiBjYW4ndCBjbG9uZSBlcnJvcnNcbi8vIERlbm8gMS4yLTEuMTAgaW1wbGVtZW50YXRpb25zIHRvbyBuYWl2ZVxuLy8gTm9kZUpTIDE2LjArIGRvZXMgbm90IGhhdmUgYFBlcmZvcm1hbmNlTWFya2AgY29uc3RydWN0b3Jcbi8vIE5vZGVKUyA8MTcuMiBzdHJ1Y3R1cmVkIGNsb25pbmcgaW1wbGVtZW50YXRpb24gZnJvbSBgcGVyZm9ybWFuY2UubWFya2AgaXMgdG9vIG5haXZlXG4vLyBhbmQgY2FuJ3QgY2xvbmUsIGZvciBleGFtcGxlLCBgUmVnRXhwYCBvciBzb21lIGJveGVkIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDA4NDBcbi8vIG5vIG9uZSBvZiB0aG9zZSBpbXBsZW1lbnRhdGlvbnMgc3VwcG9ydHMgbmV3IChodG1sLzU3NDkpIGVycm9yIGNsb25pbmcgc2VtYW50aWNcbnZhciBzdHJ1Y3R1cmVkQ2xvbmVGcm9tTWFyayA9ICFuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUgJiYgY2hlY2tCYXNpY1NlbWFudGljKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gbmV3IFBlcmZvcm1hbmNlTWFyayhQRVJGT1JNQU5DRV9NQVJLLCB7IGRldGFpbDogdmFsdWUgfSkuZGV0YWlsO1xufSk7XG5cbnZhciBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lID0gY2hlY2tCYXNpY1NlbWFudGljKG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSkgfHwgc3RydWN0dXJlZENsb25lRnJvbU1hcms7XG5cbnZhciB0aHJvd1VuY2xvbmVhYmxlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignVW5jbG9uZWFibGUgdHlwZTogJyArIHR5cGUsIERBVEFfQ0xPTkVfRVJST1IpO1xufTtcblxudmFyIHRocm93VW5wb2x5ZmlsbGFibGUgPSBmdW5jdGlvbiAodHlwZSwgYWN0aW9uKSB7XG4gIHRocm93IG5ldyBET01FeGNlcHRpb24oKGFjdGlvbiB8fCAnQ2xvbmluZycpICsgJyBvZiAnICsgdHlwZSArICcgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gdGhpcyBlbmdpbmUnLCBEQVRBX0NMT05FX0VSUk9SKTtcbn07XG5cbnZhciBjcmVhdGVEYXRhVHJhbnNmZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhVHJhbnNmZXI7XG4gIHRyeSB7XG4gICAgZGF0YVRyYW5zZmVyID0gbmV3IGdsb2JhbC5EYXRhVHJhbnNmZXIoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgZGF0YVRyYW5zZmVyID0gbmV3IGdsb2JhbC5DbGlwYm9hcmRFdmVudCgnJykuY2xpcGJvYXJkRGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICB9XG4gIHJldHVybiBkYXRhVHJhbnNmZXIgJiYgZGF0YVRyYW5zZmVyLml0ZW1zICYmIGRhdGFUcmFuc2Zlci5maWxlcyA/IGRhdGFUcmFuc2ZlciA6IG51bGw7XG59O1xuXG52YXIgc3RydWN0dXJlZENsb25lSW50ZXJuYWwgPSBmdW5jdGlvbiAodmFsdWUsIG1hcCkge1xuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB0aHJvd1VuY2xvbmVhYmxlKCdTeW1ib2wnKTtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgLy8gZWZmZWN0aXZlbHkgcHJlc2VydmVzIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgaWYgKG1hcCkge1xuICAgIGlmIChtYXBIYXMobWFwLCB2YWx1ZSkpIHJldHVybiBtYXBHZXQobWFwLCB2YWx1ZSk7XG4gIH0gZWxzZSBtYXAgPSBuZXcgTWFwKCk7XG5cbiAgdmFyIHR5cGUgPSBjbGFzc29mKHZhbHVlKTtcbiAgdmFyIGRlZXAgPSBmYWxzZTtcbiAgdmFyIEMsIG5hbWUsIGNsb25lZCwgZGF0YVRyYW5zZmVyLCBpLCBsZW5ndGgsIGtleXMsIGtleSwgc291cmNlLCB0YXJnZXQ7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAgY2xvbmVkID0gQXJyYXkobGVuZ3RoT2ZBcnJheUxpa2UodmFsdWUpKTtcbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgIGNsb25lZCA9IHt9O1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgICAgY2xvbmVkID0gbmV3IE1hcCgpO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTZXQnOlxuICAgICAgY2xvbmVkID0gbmV3IFNldCgpO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgLy8gaW4gdGhpcyBibG9jayBiZWNhdXNlIG9mIGEgU2FmYXJpIDE0LjEgYnVnXG4gICAgICAvLyBvbGQgRkYgZG9lcyBub3QgY2xvbmUgcmVnZXhlcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLCBzbyBnZXQgdGhlIHNvdXJjZSBhbmQgZmxhZ3MgZGlyZWN0bHlcbiAgICAgIGNsb25lZCA9IG5ldyBSZWdFeHAodmFsdWUuc291cmNlLCBnZXRSZWdFeHBGbGFncyh2YWx1ZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSAnQWdncmVnYXRlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IGdldEJ1aWx0aW4oJ0FnZ3JlZ2F0ZUVycm9yJykoW10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFdmFsRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IEV2YWxFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSYW5nZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSYW5nZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JlZmVyZW5jZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSZWZlcmVuY2VFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTeW50YXhFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gU3ludGF4RXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVHlwZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBUeXBlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVVJJRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFVSSUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NvbXBpbGVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gQ29tcGlsZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0xpbmtFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gTGlua0Vycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1J1bnRpbWVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gUnVudGltZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY2xvbmVkID0gRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRE9NRXhjZXB0aW9uJzpcbiAgICAgIGNsb25lZCA9IG5ldyBET01FeGNlcHRpb24odmFsdWUubWVzc2FnZSwgdmFsdWUubmFtZSk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RhdGFWaWV3JzpcbiAgICBjYXNlICdJbnQ4QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQ4QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQ4Q2xhbXBlZEFycmF5JzpcbiAgICBjYXNlICdJbnQxNkFycmF5JzpcbiAgICBjYXNlICdVaW50MTZBcnJheSc6XG4gICAgY2FzZSAnSW50MzJBcnJheSc6XG4gICAgY2FzZSAnVWludDMyQXJyYXknOlxuICAgIGNhc2UgJ0Zsb2F0MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQ2NEFycmF5JzpcbiAgICBjYXNlICdCaWdJbnQ2NEFycmF5JzpcbiAgICBjYXNlICdCaWdVaW50NjRBcnJheSc6XG4gICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgLy8gaW4gc29tZSBvbGQgZW5naW5lcyBsaWtlIFNhZmFyaSA5LCB0eXBlb2YgQyBpcyAnb2JqZWN0J1xuICAgICAgLy8gb24gVWludDhDbGFtcGVkQXJyYXkgb3Igc29tZSBvdGhlciBjb25zdHJ1Y3RvcnNcbiAgICAgIGlmICghaXNPYmplY3QoQykpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICBjbG9uZWQgPSBuZXcgQyhcbiAgICAgICAgLy8gdGhpcyBpcyBzYWZlLCBzaW5jZSBhcnJheWJ1ZmZlciBjYW5ub3QgaGF2ZSBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLmJ1ZmZlciwgbWFwKSxcbiAgICAgICAgdmFsdWUuYnl0ZU9mZnNldCxcbiAgICAgICAgdHlwZSA9PT0gJ0RhdGFWaWV3JyA/IHZhbHVlLmJ5dGVMZW5ndGggOiB2YWx1ZS5sZW5ndGhcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdET01RdWFkJzpcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZCA9IG5ldyBET01RdWFkKFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAxLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAyLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAzLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnA0LCBtYXApXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICAgIGNsb25lZCA9IG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xuICAgICAgICB9IGVsc2UgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ZpbGVMaXN0JzpcbiAgICAgIGRhdGFUcmFuc2ZlciA9IGNyZWF0ZURhdGFUcmFuc2ZlcigpO1xuICAgICAgaWYgKGRhdGFUcmFuc2Zlcikge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSh2YWx1ZSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGRhdGFUcmFuc2Zlci5pdGVtcy5hZGQoc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWVbaV0sIG1hcCkpO1xuICAgICAgICB9XG4gICAgICAgIGNsb25lZCA9IGRhdGFUcmFuc2Zlci5maWxlcztcbiAgICAgIH0gZWxzZSBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICBjbG9uZWQgPSBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnSW1hZ2VEYXRhJzpcbiAgICAgIC8vIFNhZmFyaSA5IEltYWdlRGF0YSBpcyBhIGNvbnN0cnVjdG9yLCBidXQgdHlwZW9mIEltYWdlRGF0YSBpcyAnb2JqZWN0J1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xvbmVkID0gbmV3IEltYWdlRGF0YShcbiAgICAgICAgICBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5kYXRhLCBtYXApLFxuICAgICAgICAgIHZhbHVlLndpZHRoLFxuICAgICAgICAgIHZhbHVlLmhlaWdodCxcbiAgICAgICAgICB7IGNvbG9yU3BhY2U6IHZhbHVlLmNvbG9yU3BhY2UgfVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUpIHtcbiAgICAgICAgICBjbG9uZWQgPSBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICB9IGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICBjbG9uZWQgPSBuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnQmlnSW50JzpcbiAgICAgICAgICAvLyBjYW4gYmUgYSAzcmQgcGFydHkgcG9seWZpbGxcbiAgICAgICAgICBjbG9uZWQgPSBPYmplY3QodmFsdWUudmFsdWVPZigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQm9vbGVhbic6XG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KHRoaXNCb29sZWFuVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTnVtYmVyJzpcbiAgICAgICAgICBjbG9uZWQgPSBPYmplY3QodGhpc051bWJlclZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KHRoaXNTdHJpbmdWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICBjbG9uZWQgPSBuZXcgRGF0ZSh0aGlzVGltZVZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcbiAgICAgICAgICBDID0gZ2xvYmFsLkRhdGFWaWV3O1xuICAgICAgICAgIC8vIGBBcnJheUJ1ZmZlciNzbGljZWAgaXMgbm90IGF2YWlsYWJsZSBpbiBJRTEwXG4gICAgICAgICAgLy8gYEFycmF5QnVmZmVyI3NsaWNlYCBhbmQgYERhdGFWaWV3YCBhcmUgbm90IGF2YWlsYWJsZSBpbiBvbGQgRkZcbiAgICAgICAgICBpZiAoIUMgJiYgdHlwZW9mIHZhbHVlLnNsaWNlICE9ICdmdW5jdGlvbicpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgLy8gZGV0YWNoZWQgYnVmZmVycyB0aHJvd3MgaW4gYERhdGFWaWV3YCBhbmQgYC5zbGljZWBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5zbGljZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNsb25lZCA9IHZhbHVlLnNsaWNlKDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgY2xvbmVkID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IG5ldyBDKHZhbHVlKTtcbiAgICAgICAgICAgICAgdGFyZ2V0ID0gbmV3IEMoY2xvbmVkKTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnNldFVpbnQ4KGksIHNvdXJjZS5nZXRVaW50OChpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignQXJyYXlCdWZmZXIgaXMgZGV0YWNoZWQnLCBEQVRBX0NMT05FX0VSUk9SKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdTaGFyZWRBcnJheUJ1ZmZlcic6XG4gICAgICAgICAgLy8gU2hhcmVkQXJyYXlCdWZmZXIgc2hvdWxkIHVzZSBzaGFyZWQgbWVtb3J5LCB3ZSBjYW4ndCBwb2x5ZmlsbCBpdCwgc28gcmV0dXJuIHRoZSBvcmlnaW5hbFxuICAgICAgICAgIGNsb25lZCA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdCbG9iJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gdmFsdWUuc2xpY2UoMCwgdmFsdWUuc2l6ZSwgdmFsdWUudHlwZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnRE9NUG9pbnQnOlxuICAgICAgICBjYXNlICdET01Qb2ludFJlYWRPbmx5JzpcbiAgICAgICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBDLmZyb21Qb2ludFxuICAgICAgICAgICAgICA/IEMuZnJvbVBvaW50KHZhbHVlKVxuICAgICAgICAgICAgICA6IG5ldyBDKHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnosIHZhbHVlLncpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RPTVJlY3QnOlxuICAgICAgICBjYXNlICdET01SZWN0UmVhZE9ubHknOlxuICAgICAgICAgIEMgPSBnbG9iYWxbdHlwZV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IEMuZnJvbVJlY3RcbiAgICAgICAgICAgICAgPyBDLmZyb21SZWN0KHZhbHVlKVxuICAgICAgICAgICAgICA6IG5ldyBDKHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLndpZHRoLCB2YWx1ZS5oZWlnaHQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RPTU1hdHJpeCc6XG4gICAgICAgIGNhc2UgJ0RPTU1hdHJpeFJlYWRPbmx5JzpcbiAgICAgICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBDLmZyb21NYXRyaXhcbiAgICAgICAgICAgICAgPyBDLmZyb21NYXRyaXgodmFsdWUpXG4gICAgICAgICAgICAgIDogbmV3IEModmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0F1ZGlvRGF0YSc6XG4gICAgICAgIGNhc2UgJ1ZpZGVvRnJhbWUnOlxuICAgICAgICAgIGlmICghaXNDYWxsYWJsZSh2YWx1ZS5jbG9uZSkpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5jbG9uZWFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnRmlsZSc6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IG5ldyBGaWxlKFt2YWx1ZV0sIHZhbHVlLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdDcm9wVGFyZ2V0JzpcbiAgICAgICAgY2FzZSAnQ3J5cHRvS2V5JzpcbiAgICAgICAgY2FzZSAnRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSc6XG4gICAgICAgIGNhc2UgJ0ZpbGVTeXN0ZW1GaWxlSGFuZGxlJzpcbiAgICAgICAgY2FzZSAnRmlsZVN5c3RlbUhhbmRsZSc6XG4gICAgICAgIGNhc2UgJ0dQVUNvbXBpbGF0aW9uSW5mbyc6XG4gICAgICAgIGNhc2UgJ0dQVUNvbXBpbGF0aW9uTWVzc2FnZSc6XG4gICAgICAgIGNhc2UgJ0ltYWdlQml0bWFwJzpcbiAgICAgICAgY2FzZSAnUlRDQ2VydGlmaWNhdGUnOlxuICAgICAgICBjYXNlICdXZWJBc3NlbWJseS5Nb2R1bGUnOlxuICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgLy8gYnJlYWsgb21pdHRlZFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93VW5jbG9uZWFibGUodHlwZSk7XG4gICAgICB9XG4gIH1cblxuICBtYXBTZXQobWFwLCB2YWx1ZSwgY2xvbmVkKTtcblxuICBpZiAoZGVlcCkgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICBrZXlzID0gb2JqZWN0S2V5cyh2YWx1ZSk7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShrZXlzKTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KGNsb25lZCwga2V5LCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZVtrZXldLCBtYXApKTtcbiAgICAgIH0gYnJlYWs7XG4gICAgY2FzZSAnTWFwJzpcbiAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgbWFwU2V0KGNsb25lZCwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwoaywgbWFwKSwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodiwgbWFwKSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NldCc6XG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHNldEFkZChjbG9uZWQsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHYsIG1hcCkpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoY2xvbmVkLCAnbWVzc2FnZScsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLm1lc3NhZ2UsIG1hcCkpO1xuICAgICAgaWYgKGhhc093bih2YWx1ZSwgJ2NhdXNlJykpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGNsb25lZCwgJ2NhdXNlJywgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuY2F1c2UsIG1hcCkpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgPT0gJ0FnZ3JlZ2F0ZUVycm9yJykge1xuICAgICAgICBjbG9uZWQuZXJyb3JzID0gc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuZXJyb3JzLCBtYXApO1xuICAgICAgfSAvLyBicmVhayBvbWl0dGVkXG4gICAgY2FzZSAnRE9NRXhjZXB0aW9uJzpcbiAgICAgIGlmIChFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoY2xvbmVkLCAnc3RhY2snLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5zdGFjaywgbWFwKSk7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvbmVkO1xufTtcblxudmFyIFBST1BFUl9UUkFOU0ZFUiA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBwcmV2ZW50IFY4IEFycmF5QnVmZmVyRGV0YWNoaW5nIHByb3RlY3RvciBjZWxsIGludmFsaWRhdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoKElTX0RFTk8gJiYgVjggPiA5MikgfHwgKElTX05PREUgJiYgVjggPiA5NCkgfHwgKElTX0JST1dTRVIgJiYgVjggPiA5NykpIHJldHVybiBmYWxzZTtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgdmFyIGNsb25lID0gbmF0aXZlU3RydWN0dXJlZENsb25lKGJ1ZmZlciwgeyB0cmFuc2ZlcjogW2J1ZmZlcl0gfSk7XG4gIHJldHVybiBidWZmZXIuYnl0ZUxlbmd0aCAhPSAwIHx8IGNsb25lLmJ5dGVMZW5ndGggIT0gODtcbn0pO1xuXG52YXIgdHJ5VG9UcmFuc2ZlciA9IGZ1bmN0aW9uIChyYXdUcmFuc2ZlciwgbWFwKSB7XG4gIGlmICghaXNPYmplY3QocmF3VHJhbnNmZXIpKSB0aHJvdyBUeXBlRXJyb3IoJ1RyYW5zZmVyIG9wdGlvbiBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgc2VxdWVuY2UnKTtcblxuICB2YXIgdHJhbnNmZXIgPSBbXTtcblxuICBpdGVyYXRlKHJhd1RyYW5zZmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBwdXNoKHRyYW5zZmVyLCBhbk9iamVjdCh2YWx1ZSkpO1xuICB9KTtcblxuICB2YXIgaSA9IDA7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSh0cmFuc2Zlcik7XG4gIHZhciB2YWx1ZSwgdHlwZSwgQywgdHJhbnNmZXJyZWRBcnJheSwgdHJhbnNmZXJyZWQsIGNhbnZhcywgY29udGV4dDtcblxuICBpZiAoUFJPUEVSX1RSQU5TRkVSKSB7XG4gICAgdHJhbnNmZXJyZWRBcnJheSA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZSh0cmFuc2ZlciwgeyB0cmFuc2ZlcjogdHJhbnNmZXIgfSk7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIG1hcFNldChtYXAsIHRyYW5zZmVyW2ldLCB0cmFuc2ZlcnJlZEFycmF5W2krK10pO1xuICB9IGVsc2Ugd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHRyYW5zZmVyW2krK107XG4gICAgaWYgKG1hcEhhcyhtYXAsIHZhbHVlKSkgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignRHVwbGljYXRlIHRyYW5zZmVyYWJsZScsIERBVEFfQ0xPTkVfRVJST1IpO1xuXG4gICAgdHlwZSA9IGNsYXNzb2YodmFsdWUpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdJbWFnZUJpdG1hcCc6XG4gICAgICAgIEMgPSBnbG9iYWwuT2Zmc2NyZWVuQ2FudmFzO1xuICAgICAgICBpZiAoIWlzQ29uc3RydWN0b3IoQykpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSwgVFJBTlNGRVJSSU5HKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYW52YXMgPSBuZXcgQyh2YWx1ZS53aWR0aCwgdmFsdWUuaGVpZ2h0KTtcbiAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJ2JpdG1hcHJlbmRlcmVyJyk7XG4gICAgICAgICAgY29udGV4dC50cmFuc2ZlckZyb21JbWFnZUJpdG1hcCh2YWx1ZSk7XG4gICAgICAgICAgdHJhbnNmZXJyZWQgPSBjYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBdWRpb0RhdGEnOlxuICAgICAgY2FzZSAnVmlkZW9GcmFtZSc6XG4gICAgICAgIGlmICghaXNDYWxsYWJsZSh2YWx1ZS5jbG9uZSkgfHwgIWlzQ2FsbGFibGUodmFsdWUuY2xvc2UpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUsIFRSQU5TRkVSUklORyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdHJhbnNmZXJyZWQgPSB2YWx1ZS5jbG9uZSgpO1xuICAgICAgICAgIHZhbHVlLmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICBjYXNlICdNZWRpYVNvdXJjZUhhbmRsZSc6XG4gICAgICBjYXNlICdNZXNzYWdlUG9ydCc6XG4gICAgICBjYXNlICdPZmZzY3JlZW5DYW52YXMnOlxuICAgICAgY2FzZSAnUmVhZGFibGVTdHJlYW0nOlxuICAgICAgY2FzZSAnVHJhbnNmb3JtU3RyZWFtJzpcbiAgICAgIGNhc2UgJ1dyaXRhYmxlU3RyZWFtJzpcbiAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlLCBUUkFOU0ZFUlJJTkcpO1xuICAgIH1cblxuICAgIGlmICh0cmFuc2ZlcnJlZCA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUaGlzIG9iamVjdCBjYW5ub3QgYmUgdHJhbnNmZXJyZWQ6ICcgKyB0eXBlLCBEQVRBX0NMT05FX0VSUk9SKTtcbiAgICBtYXBTZXQobWFwLCB2YWx1ZSwgdHJhbnNmZXJyZWQpO1xuICB9XG59O1xuXG4vLyBgc3RydWN0dXJlZENsb25lYCBtZXRob2Rcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N0cnVjdHVyZWQtZGF0YS5odG1sI2RvbS1zdHJ1Y3R1cmVkY2xvbmVcbiQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHNoYW06ICFQUk9QRVJfVFJBTlNGRVIsIGZvcmNlZDogRk9SQ0VEX1JFUExBQ0VNRU5UIH0sIHtcbiAgc3RydWN0dXJlZENsb25lOiBmdW5jdGlvbiBzdHJ1Y3R1cmVkQ2xvbmUodmFsdWUgLyogLCB7IHRyYW5zZmVyIH0gKi8pIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMSAmJiAhaXNOdWxsT3JVbmRlZmluZWQoYXJndW1lbnRzWzFdKSA/IGFuT2JqZWN0KGFyZ3VtZW50c1sxXSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHRyYW5zZmVyID0gb3B0aW9ucyA/IG9wdGlvbnMudHJhbnNmZXIgOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcDtcblxuICAgIGlmICh0cmFuc2ZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICB0cnlUb1RyYW5zZmVyKHRyYW5zZmVyLCBtYXApO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZSwgbWFwKTtcbiAgfVxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5zZXQtaW50ZXJ2YWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnNldC10aW1lb3V0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXJsLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWlucycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheVNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVMgPSAnVVJMU2VhcmNoUGFyYW1zJztcbnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TKTtcbnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gQXZvaWQgTm9kZUpTIGV4cGVyaW1lbnRhbCB3YXJuaW5nXG52YXIgc2FmZUdldEJ1aWx0SW4gPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm4gZ2xvYmFsW25hbWVdO1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsIG5hbWUpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xufTtcblxudmFyIG5hdGl2ZUZldGNoID0gc2FmZUdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgTmF0aXZlUmVxdWVzdCA9IHNhZmVHZXRCdWlsdEluKCdSZXF1ZXN0Jyk7XG52YXIgSGVhZGVycyA9IHNhZmVHZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgUmVxdWVzdFByb3RvdHlwZSA9IE5hdGl2ZVJlcXVlc3QgJiYgTmF0aXZlUmVxdWVzdC5wcm90b3R5cGU7XG52YXIgSGVhZGVyc1Byb3RvdHlwZSA9IEhlYWRlcnMgJiYgSGVhZGVycy5wcm90b3R5cGU7XG52YXIgUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRlY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5kZWNvZGVVUklDb21wb25lbnQ7XG52YXIgZW5jb2RlVVJJQ29tcG9uZW50ID0gZ2xvYmFsLmVuY29kZVVSSUNvbXBvbmVudDtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpO1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBwbHVzID0gL1xcKy9nO1xudmFyIHNlcXVlbmNlcyA9IEFycmF5KDQpO1xuXG52YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHJldHVybiBzZXF1ZW5jZXNbYnl0ZXMgLSAxXSB8fCAoc2VxdWVuY2VzW2J5dGVzIC0gMV0gPSBSZWdFeHAoJygoPzolW1xcXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpO1xufTtcblxudmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2VxdWVuY2U7XG4gIH1cbn07XG5cbnZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gcmVwbGFjZShpdCwgcGx1cywgJyAnKTtcbiAgdmFyIGJ5dGVzID0gNDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2hpbGUgKGJ5dGVzKSB7XG4gICAgICByZXN1bHQgPSByZXBsYWNlKHJlc3VsdCwgcGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2VtZW50cyA9IHtcbiAgJyEnOiAnJTIxJyxcbiAgXCInXCI6ICclMjcnLFxuICAnKCc6ICclMjgnLFxuICAnKSc6ICclMjknLFxuICAnfic6ICclN0UnLFxuICAnJTIwJzogJysnXG59O1xuXG52YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgcmV0dXJuIHJlcGxhY2VtZW50c1ttYXRjaF07XG59O1xuXG52YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiByZXBsYWNlKGVuY29kZVVSSUNvbXBvbmVudChpdCksIGZpbmQsIHJlcGxhY2VyKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0sIHRydWUpO1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zU3RhdGUgPSBmdW5jdGlvbiAoaW5pdCkge1xuICB0aGlzLmVudHJpZXMgPSBbXTtcbiAgdGhpcy51cmwgPSBudWxsO1xuXG4gIGlmIChpbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHRoaXMucGFyc2VPYmplY3QoaW5pdCk7XG4gICAgZWxzZSB0aGlzLnBhcnNlUXVlcnkodHlwZW9mIGluaXQgPT0gJ3N0cmluZycgPyBjaGFyQXQoaW5pdCwgMCkgPT09ICc/JyA/IHN0cmluZ1NsaWNlKGluaXQsIDEpIDogaW5pdCA6ICR0b1N0cmluZyhpbml0KSk7XG4gIH1cbn07XG5cblVSTFNlYXJjaFBhcmFtc1N0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gIGJpbmRVUkw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9LFxuICBwYXJzZU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iamVjdCk7XG4gICAgdmFyIGl0ZXJhdG9yLCBuZXh0LCBzdGVwLCBlbnRyeUl0ZXJhdG9yLCBlbnRyeU5leHQsIGZpcnN0LCBzZWNvbmQ7XG5cbiAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3Iob2JqZWN0LCBpdGVyYXRvck1ldGhvZCk7XG4gICAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICBlbnRyeUl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoYW5PYmplY3Qoc3RlcC52YWx1ZSkpO1xuICAgICAgICBlbnRyeU5leHQgPSBlbnRyeUl0ZXJhdG9yLm5leHQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoZmlyc3QgPSBjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAoc2Vjb25kID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgIWNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleTogJHRvU3RyaW5nKGZpcnN0LnZhbHVlKSwgdmFsdWU6ICR0b1N0cmluZyhzZWNvbmQudmFsdWUpIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBpZiAoaGFzT3duKG9iamVjdCwga2V5KSkge1xuICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiAkdG9TdHJpbmcob2JqZWN0W2tleV0pIH0pO1xuICAgIH1cbiAgfSxcbiAgcGFyc2VRdWVyeTogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwbGl0KHF1ZXJ5LCAnJicpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBhdHRyaWJ1dGUsIGVudHJ5O1xuICAgICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGgpIHtcbiAgICAgICAgICBlbnRyeSA9IHNwbGl0KGF0dHJpYnV0ZSwgJz0nKTtcbiAgICAgICAgICBwdXNoKHRoaXMuZW50cmllcywge1xuICAgICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShzaGlmdChlbnRyeSkpLFxuICAgICAgICAgICAgdmFsdWU6IGRlc2VyaWFsaXplKGpvaW4oZW50cnksICc9JykpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgcHVzaChyZXN1bHQsIHNlcmlhbGl6ZShlbnRyeS5rZXkpICsgJz0nICsgc2VyaWFsaXplKGVudHJ5LnZhbHVlKSk7XG4gICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcmJyk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwO1xuICAgIHRoaXMucGFyc2VRdWVyeSh0aGlzLnVybC5xdWVyeSk7XG4gIH0sXG4gIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnVybCkgdGhpcy51cmwudXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXNgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS11cmxzZWFyY2hwYXJhbXNcbnZhciBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTFNlYXJjaFBhcmFtcygvKiBpbml0ICovKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlKTtcbiAgdmFyIGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCBuZXcgVVJMU2VhcmNoUGFyYW1zU3RhdGUoaW5pdCkpO1xufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSA9IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuZGVmaW5lQnVpbHRJbnMoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCB7XG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmFwcGVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1hcHBlbmRcbiAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAyKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHB1c2goc3RhdGUuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhuYW1lKSwgdmFsdWU6ICR0b1N0cmluZyh2YWx1ZSkgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHNwbGljZShlbnRyaWVzLCBpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBwdXNoKHJlc3VsdCwgZW50cmllc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5oYXNgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtaGFzXG4gIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4KytdLmtleSA9PT0ga2V5KSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc2V0XG4gIHNldDogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgdmFsID0gJHRvU3RyaW5nKHZhbHVlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkge1xuICAgICAgICBpZiAoZm91bmQpIHNwbGljZShlbnRyaWVzLCBpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIHB1c2goZW50cmllcywgeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBhcnJheVNvcnQoc3RhdGUuZW50cmllcywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmtleSA+IGIua2V5ID8gMSA6IC0xO1xuICAgIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5kZWZpbmVCdWlsdEluKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgSVRFUkFUT1IsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5lbnRyaWVzLCB7IG5hbWU6ICdlbnRyaWVzJyB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxzZWFyY2hwYXJhbXMtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5kZWZpbmVCdWlsdEluKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwgfSwge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yXG59KTtcblxuLy8gV3JhcCBgZmV0Y2hgIGFuZCBgUmVxdWVzdGAgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHBvbHlmaWxsZWQgYFVSTFNlYXJjaFBhcmFtc2BcbmlmICghVVNFX05BVElWRV9VUkwgJiYgaXNDYWxsYWJsZShIZWFkZXJzKSkge1xuICB2YXIgaGVhZGVyc0hhcyA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuaGFzKTtcbiAgdmFyIGhlYWRlcnNTZXQgPSB1bmN1cnJ5VGhpcyhIZWFkZXJzUHJvdG90eXBlLnNldCk7XG5cbiAgdmFyIHdyYXBSZXF1ZXN0T3B0aW9ucyA9IGZ1bmN0aW9uIChpbml0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICB2YXIgYm9keSA9IGluaXQuYm9keTtcbiAgICAgIHZhciBoZWFkZXJzO1xuICAgICAgaWYgKGNsYXNzb2YoYm9keSkgPT09IFVSTF9TRUFSQ0hfUEFSQU1TKSB7XG4gICAgICAgIGhlYWRlcnMgPSBpbml0LmhlYWRlcnMgPyBuZXcgSGVhZGVycyhpbml0LmhlYWRlcnMpIDogbmV3IEhlYWRlcnMoKTtcbiAgICAgICAgaWYgKCFoZWFkZXJzSGFzKGhlYWRlcnMsICdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICAgIGhlYWRlcnNTZXQoaGVhZGVycywgJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGUoaW5pdCwge1xuICAgICAgICAgIGJvZHk6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCAkdG9TdHJpbmcoYm9keSkpLFxuICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBoZWFkZXJzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IHJldHVybiBpbml0O1xuICB9O1xuXG4gIGlmIChpc0NhbGxhYmxlKG5hdGl2ZUZldGNoKSkge1xuICAgICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gbmF0aXZlRmV0Y2goaW5wdXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gd3JhcFJlcXVlc3RPcHRpb25zKGFyZ3VtZW50c1sxXSkgOiB7fSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNDYWxsYWJsZShOYXRpdmVSZXF1ZXN0KSkge1xuICAgIHZhciBSZXF1ZXN0Q29uc3RydWN0b3IgPSBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBSZXF1ZXN0UHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlUmVxdWVzdChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICB9O1xuXG4gICAgUmVxdWVzdFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcXVlc3RDb25zdHJ1Y3RvcjtcbiAgICBSZXF1ZXN0Q29uc3RydWN0b3IucHJvdG90eXBlID0gUmVxdWVzdFByb3RvdHlwZTtcblxuICAgICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBkb250Q2FsbEdldFNldDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIFJlcXVlc3Q6IFJlcXVlc3RDb25zdHJ1Y3RvclxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLFxuICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZVxufTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VybC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xudmFyIGFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBjb2RlQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNvZGVBdDtcbnZhciB0b0FTQ0lJID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIFVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5VUkxTZWFyY2hQYXJhbXM7XG52YXIgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5nZXRTdGF0ZTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwYXJzZUludCA9IGdsb2JhbC5wYXJzZUludDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG52YXIgcG9wID0gdW5jdXJyeVRoaXMoW10ucG9wKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpO1xudmFyIHVuc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS51bnNoaWZ0KTtcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bYS16XS9pO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1vYnNjdXJlLXJhbmdlIC0tIHNhZmVcbnZhciBBTFBIQU5VTUVSSUMgPSAvW1xcZCstLmEtel0vaTtcbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIEhFWF9TVEFSVCA9IC9eMHgvaTtcbnZhciBPQ1QgPSAvXlswLTddKyQvO1xudmFyIERFQyA9IC9eXFxkKyQvO1xudmFyIEhFWCA9IC9eW1xcZGEtZl0rJC9pO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWNvbnRyb2wtY2hhcmFjdGVyIC0tIHNhZmUgKi9cbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXDBcXHRcXG5cXHIgIyUvOjw+P0BbXFxcXFxcXV58XS87XG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCA9IC9bXFwwXFx0XFxuXFxyICMvOjw+P0BbXFxcXFxcXV58XS87XG52YXIgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSA9IC9eW1xcdTAwMDAtXFx1MDAyMF0rfFtcXHUwMDAwLVxcdTAwMjBdKyQvZztcbnZhciBUQUJfQU5EX05FV19MSU5FID0gL1tcXHRcXG5cXHJdL2c7XG4vKiBlc2xpbnQtZW5hYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovXG52YXIgRU9GO1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2lwdjQtbnVtYmVyLXBhcnNlclxudmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgcGFydHMgPSBzcGxpdChpbnB1dCwgJy4nKTtcbiAgdmFyIHBhcnRzTGVuZ3RoLCBudW1iZXJzLCBpbmRleCwgcGFydCwgcmFkaXgsIG51bWJlciwgaXB2NDtcbiAgaWYgKHBhcnRzLmxlbmd0aCAmJiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PSAnJykge1xuICAgIHBhcnRzLmxlbmd0aC0tO1xuICB9XG4gIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoO1xuICBpZiAocGFydHNMZW5ndGggPiA0KSByZXR1cm4gaW5wdXQ7XG4gIG51bWJlcnMgPSBbXTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBwYXJ0ID0gcGFydHNbaW5kZXhdO1xuICAgIGlmIChwYXJ0ID09ICcnKSByZXR1cm4gaW5wdXQ7XG4gICAgcmFkaXggPSAxMDtcbiAgICBpZiAocGFydC5sZW5ndGggPiAxICYmIGNoYXJBdChwYXJ0LCAwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gZXhlYyhIRVhfU1RBUlQsIHBhcnQpID8gMTYgOiA4O1xuICAgICAgcGFydCA9IHN0cmluZ1NsaWNlKHBhcnQsIHJhZGl4ID09IDggPyAxIDogMik7XG4gICAgfVxuICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgbnVtYmVyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFleGVjKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCwgcGFydCkpIHJldHVybiBpbnB1dDtcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTtcbiAgICB9XG4gICAgcHVzaChudW1iZXJzLCBudW1iZXIpO1xuICB9XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbnVtYmVyID0gbnVtYmVyc1tpbmRleF07XG4gICAgaWYgKGluZGV4ID09IHBhcnRzTGVuZ3RoIC0gMSkge1xuICAgICAgaWYgKG51bWJlciA+PSBwb3coMjU2LCA1IC0gcGFydHNMZW5ndGgpKSByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA+IDI1NSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgaXB2NCA9IHBvcChudW1iZXJzKTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbnVtYmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTtcbiAgfVxuICByZXR1cm4gaXB2NDtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1pcHY2LXBhcnNlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBwYXJzZUlQdjYgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIGFkZHJlc3MgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gIHZhciBwaWVjZUluZGV4ID0gMDtcbiAgdmFyIGNvbXByZXNzID0gbnVsbDtcbiAgdmFyIHBvaW50ZXIgPSAwO1xuICB2YXIgdmFsdWUsIGxlbmd0aCwgbnVtYmVyc1NlZW4sIGlwdjRQaWVjZSwgbnVtYmVyLCBzd2Fwcywgc3dhcDtcblxuICB2YXIgY2hyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFyQXQoaW5wdXQsIHBvaW50ZXIpO1xuICB9O1xuXG4gIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICBpZiAoY2hhckF0KGlucHV0LCAxKSAhPSAnOicpIHJldHVybjtcbiAgICBwb2ludGVyICs9IDI7XG4gICAgcGllY2VJbmRleCsrO1xuICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgfVxuICB3aGlsZSAoY2hyKCkpIHtcbiAgICBpZiAocGllY2VJbmRleCA9PSA4KSByZXR1cm47XG4gICAgaWYgKGNocigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIGV4ZWMoSEVYLCBjaHIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNocigpLCAxNik7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBsZW5ndGgrKztcbiAgICB9XG4gICAgaWYgKGNocigpID09ICcuJykge1xuICAgICAgaWYgKGxlbmd0aCA9PSAwKSByZXR1cm47XG4gICAgICBwb2ludGVyIC09IGxlbmd0aDtcbiAgICAgIGlmIChwaWVjZUluZGV4ID4gNikgcmV0dXJuO1xuICAgICAgbnVtYmVyc1NlZW4gPSAwO1xuICAgICAgd2hpbGUgKGNocigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hyKCkgPT0gJy4nICYmIG51bWJlcnNTZWVuIDwgNCkgcG9pbnRlcisrO1xuICAgICAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXhlYyhESUdJVCwgY2hyKCkpKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChleGVjKERJR0lULCBjaHIoKSkpIHtcbiAgICAgICAgICBudW1iZXIgPSBwYXJzZUludChjaHIoKSwgMTApO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPT09IG51bGwpIGlwdjRQaWVjZSA9IG51bWJlcjtcbiAgICAgICAgICBlbHNlIGlmIChpcHY0UGllY2UgPT0gMCkgcmV0dXJuO1xuICAgICAgICAgIGVsc2UgaXB2NFBpZWNlID0gaXB2NFBpZWNlICogMTAgKyBudW1iZXI7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA+IDI1NSkgcmV0dXJuO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfVxuICAgICAgICBhZGRyZXNzW3BpZWNlSW5kZXhdID0gYWRkcmVzc1twaWVjZUluZGV4XSAqIDI1NiArIGlwdjRQaWVjZTtcbiAgICAgICAgbnVtYmVyc1NlZW4rKztcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID09IDIgfHwgbnVtYmVyc1NlZW4gPT0gNCkgcGllY2VJbmRleCsrO1xuICAgICAgfVxuICAgICAgaWYgKG51bWJlcnNTZWVuICE9IDQpIHJldHVybjtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNocigpKSByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjaHIoKSkgcmV0dXJuO1xuICAgIGFkZHJlc3NbcGllY2VJbmRleCsrXSA9IHZhbHVlO1xuICB9XG4gIGlmIChjb21wcmVzcyAhPT0gbnVsbCkge1xuICAgIHN3YXBzID0gcGllY2VJbmRleCAtIGNvbXByZXNzO1xuICAgIHBpZWNlSW5kZXggPSA3O1xuICAgIHdoaWxlIChwaWVjZUluZGV4ICE9IDAgJiYgc3dhcHMgPiAwKSB7XG4gICAgICBzd2FwID0gYWRkcmVzc1twaWVjZUluZGV4XTtcbiAgICAgIGFkZHJlc3NbcGllY2VJbmRleC0tXSA9IGFkZHJlc3NbY29tcHJlc3MgKyBzd2FwcyAtIDFdO1xuICAgICAgYWRkcmVzc1tjb21wcmVzcyArIC0tc3dhcHNdID0gc3dhcDtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGllY2VJbmRleCAhPSA4KSByZXR1cm47XG4gIHJldHVybiBhZGRyZXNzO1xufTtcblxudmFyIGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlID0gZnVuY3Rpb24gKGlwdjYpIHtcbiAgdmFyIG1heEluZGV4ID0gbnVsbDtcbiAgdmFyIG1heExlbmd0aCA9IDE7XG4gIHZhciBjdXJyU3RhcnQgPSBudWxsO1xuICB2YXIgY3Vyckxlbmd0aCA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIGZvciAoOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICBpZiAoaXB2NltpbmRleF0gIT09IDApIHtcbiAgICAgIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgICAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoO1xuICAgICAgfVxuICAgICAgY3VyclN0YXJ0ID0gbnVsbDtcbiAgICAgIGN1cnJMZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3VyclN0YXJ0ID09PSBudWxsKSBjdXJyU3RhcnQgPSBpbmRleDtcbiAgICAgICsrY3Vyckxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoO1xuICB9XG4gIHJldHVybiBtYXhJbmRleDtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaG9zdC1zZXJpYWxpemluZ1xudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgdW5zaGlmdChyZXN1bHQsIGhvc3QgJSAyNTYpO1xuICAgICAgaG9zdCA9IGZsb29yKGhvc3QgLyAyNTYpO1xuICAgIH0gcmV0dXJuIGpvaW4ocmVzdWx0LCAnLicpO1xuICAvLyBpcHY2XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT0gJ29iamVjdCcpIHtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb21wcmVzcyA9IGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlKGhvc3QpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpZ25vcmUwICYmIGhvc3RbaW5kZXhdID09PSAwKSBjb250aW51ZTtcbiAgICAgIGlmIChpZ25vcmUwKSBpZ25vcmUwID0gZmFsc2U7XG4gICAgICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdCArPSBpbmRleCA/ICc6JyA6ICc6Oic7XG4gICAgICAgIGlnbm9yZTAgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IG51bWJlclRvU3RyaW5nKGhvc3RbaW5kZXhdLCAxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNociwgc2V0KSB7XG4gIHZhciBjb2RlID0gY29kZUF0KGNociwgMCk7XG4gIHJldHVybiBjb2RlID4gMHgyMCAmJiBjb2RlIDwgMHg3RiAmJiAhaGFzT3duKHNldCwgY2hyKSA/IGNociA6IGVuY29kZVVSSUNvbXBvbmVudChjaHIpO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzcGVjaWFsLXNjaGVtZVxudmFyIHNwZWNpYWxTY2hlbWVzID0ge1xuICBmdHA6IDIxLFxuICBmaWxlOiBudWxsLFxuICBodHRwOiA4MCxcbiAgaHR0cHM6IDQ0MyxcbiAgd3M6IDgwLFxuICB3c3M6IDQ0M1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN3aW5kb3dzLWRyaXZlLWxldHRlclxudmFyIGlzV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZywgbm9ybWFsaXplZCkge1xuICB2YXIgc2Vjb25kO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PSAyICYmIGV4ZWMoQUxQSEEsIGNoYXJBdChzdHJpbmcsIDApKVxuICAgICYmICgoc2Vjb25kID0gY2hhckF0KHN0cmluZywgMSkpID09ICc6JyB8fCAoIW5vcm1hbGl6ZWQgJiYgc2Vjb25kID09ICd8JykpO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzdGFydC13aXRoLWEtd2luZG93cy1kcml2ZS1sZXR0ZXJcbnZhciBzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgdGhpcmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihzdHJpbmdTbGljZShzdHJpbmcsIDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IGNoYXJBdChzdHJpbmcsIDIpKSA9PT0gJy8nIHx8IHRoaXJkID09PSAnXFxcXCcgfHwgdGhpcmQgPT09ICc/JyB8fCB0aGlyZCA9PT0gJyMnKVxuICApO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzaW5nbGUtZG90LXBhdGgtc2VnbWVudFxudmFyIGlzU2luZ2xlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuJyB8fCB0b0xvd2VyQ2FzZShzZWdtZW50KSA9PT0gJyUyZSc7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvdWJsZS1kb3QtcGF0aC1zZWdtZW50XG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gdG9Mb3dlckNhc2Uoc2VnbWVudCk7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLi4nIHx8IHNlZ21lbnQgPT09ICclMmUuJyB8fCBzZWdtZW50ID09PSAnLiUyZScgfHwgc2VnbWVudCA9PT0gJyUyZSUyZSc7XG59O1xuXG4vLyBTdGF0ZXM6XG52YXIgU0NIRU1FX1NUQVJUID0ge307XG52YXIgU0NIRU1FID0ge307XG52YXIgTk9fU0NIRU1FID0ge307XG52YXIgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBQQVRIX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFJFTEFUSVZFID0ge307XG52YXIgUkVMQVRJVkVfU0xBU0ggPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMgPSB7fTtcbnZhciBBVVRIT1JJVFkgPSB7fTtcbnZhciBIT1NUID0ge307XG52YXIgSE9TVE5BTUUgPSB7fTtcbnZhciBQT1JUID0ge307XG52YXIgRklMRSA9IHt9O1xudmFyIEZJTEVfU0xBU0ggPSB7fTtcbnZhciBGSUxFX0hPU1QgPSB7fTtcbnZhciBQQVRIX1NUQVJUID0ge307XG52YXIgUEFUSCA9IHt9O1xudmFyIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEggPSB7fTtcbnZhciBRVUVSWSA9IHt9O1xudmFyIEZSQUdNRU5UID0ge307XG5cbnZhciBVUkxTdGF0ZSA9IGZ1bmN0aW9uICh1cmwsIGlzQmFzZSwgYmFzZSkge1xuICB2YXIgdXJsU3RyaW5nID0gJHRvU3RyaW5nKHVybCk7XG4gIHZhciBiYXNlU3RhdGUsIGZhaWx1cmUsIHNlYXJjaFBhcmFtcztcbiAgaWYgKGlzQmFzZSkge1xuICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZyk7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkgYmFzZVN0YXRlID0gbmV3IFVSTFN0YXRlKGJhc2UsIHRydWUpO1xuICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHNlYXJjaFBhcmFtcyA9IGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUobmV3IFVSTFNlYXJjaFBhcmFtcygpKTtcbiAgICBzZWFyY2hQYXJhbXMuYmluZFVSTCh0aGlzKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IHNlYXJjaFBhcmFtcztcbiAgfVxufTtcblxuVVJMU3RhdGUucHJvdG90eXBlID0ge1xuICB0eXBlOiAnVVJMJyxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtcGFyc2luZ1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xuICBwYXJzZTogZnVuY3Rpb24gKGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gICAgdmFyIHVybCA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7XG4gICAgdmFyIHBvaW50ZXIgPSAwO1xuICAgIHZhciBidWZmZXIgPSAnJztcbiAgICB2YXIgc2VlbkF0ID0gZmFsc2U7XG4gICAgdmFyIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gICAgdmFyIGNvZGVQb2ludHMsIGNociwgYnVmZmVyQ29kZVBvaW50cywgZmFpbHVyZTtcblxuICAgIGlucHV0ID0gJHRvU3RyaW5nKGlucHV0KTtcblxuICAgIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICAgIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgIHVybC5wYXRoID0gW107XG4gICAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7XG4gICAgICBpbnB1dCA9IHJlcGxhY2UoaW5wdXQsIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UsICcnKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IHJlcGxhY2UoaW5wdXQsIFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuXG4gICAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICAgIGNociA9IGNvZGVQb2ludHNbcG9pbnRlcl07XG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOlxuICAgICAgICAgIGlmIChjaHIgJiYgZXhlYyhBTFBIQSwgY2hyKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IHRvTG93ZXJDYXNlKGNocik7XG4gICAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTQ0hFTUU6XG4gICAgICAgICAgaWYgKGNociAmJiAoZXhlYyhBTFBIQU5VTUVSSUMsIGNocikgfHwgY2hyID09ICcrJyB8fCBjaHIgPT0gJy0nIHx8IGNociA9PSAnLicpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gdG9Mb3dlckNhc2UoY2hyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnOicpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgICAgKHVybC5pc1NwZWNpYWwoKSAhPSBoYXNPd24oc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAgIChidWZmZXIgPT0gJ2ZpbGUnICYmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICAgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwuaG9zdClcbiAgICAgICAgICAgICkpIHJldHVybjtcbiAgICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIHN0YXRlID0gQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgICAgcG9pbnRlciA9IDA7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTk9fU0NIRU1FOlxuICAgICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgaWYgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUgPSBiYXNlLnNjaGVtZSA9PSAnZmlsZScgPyBGSUxFIDogUkVMQVRJVkU7XG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSF9PUl9BVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICBpZiAoY2hyID09IEVPRikge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcvJyB8fCAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnBhdGgubGVuZ3RoLS07XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIGlmIChjaHIgIT0gJy8nIHx8IGNoYXJBdChidWZmZXIsIHBvaW50ZXIgKyAxKSAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTOlxuICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICdAJykge1xuICAgICAgICAgICAgaWYgKHNlZW5BdCkgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7XG4gICAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgICAgYnVmZmVyQ29kZVBvaW50cyA9IGFycmF5RnJvbShidWZmZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgICBpZiAoY29kZVBvaW50ID09ICc6JyAmJiAhc2VlblBhc3N3b3JkVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBzZWVuUGFzc3dvcmRUb2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZShjb2RlUG9pbnQsIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgICBlbHNlIHVybC51c2VybmFtZSArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfQVVUSE9SSVRZO1xuICAgICAgICAgICAgcG9pbnRlciAtPSBhcnJheUZyb20oYnVmZmVyKS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEhPU1Q7XG4gICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBIT1NUOlxuICAgICAgICBjYXNlIEhPU1ROQU1FOlxuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6JyAmJiAhc2VlbkJyYWNrZXQpIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBPUlQ7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSA9PSBIT1NUTkFNRSkgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHJldHVybjtcbiAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNociA9PSAnWycpIHNlZW5CcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnXScpIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQT1JUOlxuICAgICAgICAgIGlmIChleGVjKERJR0lULCBjaHIpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpIHx8XG4gICAgICAgICAgICBzdGF0ZU92ZXJyaWRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyICE9ICcnKSB7XG4gICAgICAgICAgICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7XG4gICAgICAgICAgICAgIGlmIChwb3J0ID4gMHhGRkZGKSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgICAgICB1cmwucG9ydCA9ICh1cmwuaXNTcGVjaWFsKCkgJiYgcG9ydCA9PT0gc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0pID8gbnVsbCA6IHBvcnQ7XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRklMRTpcbiAgICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnO1xuICAgICAgICAgIGlmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpIHN0YXRlID0gRklMRV9TTEFTSDtcbiAgICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgaWYgKGNociA9PSBFT0YpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihqb2luKGFycmF5U2xpY2UoY29kZVBvaW50cywgcG9pbnRlciksICcnKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgICB1cmwuc2hvcnRlblBhdGgoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEZJTEVfSE9TVDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScgJiYgIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoam9pbihhcnJheVNsaWNlKGNvZGVQb2ludHMsIHBvaW50ZXIpLCAnJykpKSB7XG4gICAgICAgICAgICBpZiAoaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYmFzZS5wYXRoWzBdLCB0cnVlKSkgcHVzaCh1cmwucGF0aCwgYmFzZS5wYXRoWzBdKTtcbiAgICAgICAgICAgIGVsc2UgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgICBpZiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCA9PSAnbG9jYWxob3N0JykgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIH0gY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIX1NUQVJUOlxuICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFxcXCcpIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgaWYgKGNociAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fFxuICAgICAgICAgICAgKCFzdGF0ZU92ZXJyaWRlICYmIChjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGlzRG91YmxlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgdXJsLnNob3J0ZW5QYXRoKCk7XG4gICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzU2luZ2xlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgIShjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAodXJsLmhvc3QpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gY2hhckF0KGJ1ZmZlciwgMCkgKyAnOic7IC8vIG5vcm1hbGl6ZSB3aW5kb3dzIGRyaXZlIGxldHRlclxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsIGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hyID09IEVPRiB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpKSB7XG4gICAgICAgICAgICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykge1xuICAgICAgICAgICAgICAgIHNoaWZ0KHVybC5wYXRoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNociwgcGF0aFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOlxuICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFFVRVJZOlxuICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICBpZiAoY2hyID09IFwiJ1wiICYmIHVybC5pc1NwZWNpYWwoKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnO1xuICAgICAgICAgICAgZWxzZSB1cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShjaHIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGUkFHTUVOVDpcbiAgICAgICAgICBpZiAoY2hyICE9IEVPRikgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBwb2ludGVyKys7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3QtcGFyc2luZ1xuICBwYXJzZUhvc3Q6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICAgIGlmIChjaGFyQXQoaW5wdXQsIDApID09ICdbJykge1xuICAgICAgaWYgKGNoYXJBdChpbnB1dCwgaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gcGFyc2VJUHY2KHN0cmluZ1NsaWNlKGlucHV0LCAxLCAtMSkpO1xuICAgICAgaWYgKCFyZXN1bHQpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgLy8gb3BhcXVlIGhvc3RcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU3BlY2lhbCgpKSB7XG4gICAgICBpZiAoZXhlYyhGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULCBpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSAnJztcbiAgICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29kZVBvaW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpbmRleF0sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpO1xuICAgICAgaWYgKGV4ZWMoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCwgaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2Nhbm5vdC1oYXZlLWEtdXNlcm5hbWUtcGFzc3dvcmQtcG9ydFxuICBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIXRoaXMuaG9zdCB8fCB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgfHwgdGhpcy5zY2hlbWUgPT0gJ2ZpbGUnO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2luY2x1ZGUtY3JlZGVudGlhbHNcbiAgaW5jbHVkZXNDcmVkZW50aWFsczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lICE9ICcnIHx8IHRoaXMucGFzc3dvcmQgIT0gJyc7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaXMtc3BlY2lhbFxuICBpc1NwZWNpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGFzT3duKHNwZWNpYWxTY2hlbWVzLCB0aGlzLnNjaGVtZSk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2hvcnRlbi1hLXVybHMtcGF0aFxuICBzaG9ydGVuUGF0aDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgIHZhciBwYXRoU2l6ZSA9IHBhdGgubGVuZ3RoO1xuICAgIGlmIChwYXRoU2l6ZSAmJiAodGhpcy5zY2hlbWUgIT0gJ2ZpbGUnIHx8IHBhdGhTaXplICE9IDEgfHwgIWlzV2luZG93c0RyaXZlTGV0dGVyKHBhdGhbMF0sIHRydWUpKSkge1xuICAgICAgcGF0aC5sZW5ndGgtLTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtc2VyaWFsaXplclxuICBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdXJsID0gdGhpcztcbiAgICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgICB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7XG4gICAgdmFyIHBhc3N3b3JkID0gdXJsLnBhc3N3b3JkO1xuICAgIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gICAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICAgIHZhciBxdWVyeSA9IHVybC5xdWVyeTtcbiAgICB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7XG4gICAgdmFyIG91dHB1dCA9IHNjaGVtZSArICc6JztcbiAgICBpZiAoaG9zdCAhPT0gbnVsbCkge1xuICAgICAgb3V0cHV0ICs9ICcvLyc7XG4gICAgICBpZiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSkge1xuICAgICAgICBvdXRwdXQgKz0gdXNlcm5hbWUgKyAocGFzc3dvcmQgPyAnOicgKyBwYXNzd29yZCA6ICcnKSArICdAJztcbiAgICAgIH1cbiAgICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICAgICAgaWYgKHBvcnQgIT09IG51bGwpIG91dHB1dCArPSAnOicgKyBwb3J0O1xuICAgIH0gZWxzZSBpZiAoc2NoZW1lID09ICdmaWxlJykgb3V0cHV0ICs9ICcvLyc7XG4gICAgb3V0cHV0ICs9IHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgam9pbihwYXRoLCAnLycpIDogJyc7XG4gICAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7XG4gICAgaWYgKGZyYWdtZW50ICE9PSBudWxsKSBvdXRwdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgc2V0SHJlZjogZnVuY3Rpb24gKGhyZWYpIHtcbiAgICB2YXIgZmFpbHVyZSA9IHRoaXMucGFyc2UoaHJlZik7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICB0aGlzLnNlYXJjaFBhcmFtcy51cGRhdGUoKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICBnZXRPcmlnaW46IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NoZW1lID0gdGhpcy5zY2hlbWU7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgaWYgKHNjaGVtZSA9PSAnYmxvYicpIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IFVSTENvbnN0cnVjdG9yKHNjaGVtZS5wYXRoWzBdKS5vcmlnaW47XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICF0aGlzLmlzU3BlY2lhbCgpKSByZXR1cm4gJ251bGwnO1xuICAgIHJldHVybiBzY2hlbWUgKyAnOi8vJyArIHNlcmlhbGl6ZUhvc3QodGhpcy5ob3N0KSArIChwb3J0ICE9PSBudWxsID8gJzonICsgcG9ydCA6ICcnKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gIGdldFByb3RvY29sOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1lICsgJzonO1xuICB9LFxuICBzZXRQcm90b2NvbDogZnVuY3Rpb24gKHByb3RvY29sKSB7XG4gICAgdGhpcy5wYXJzZSgkdG9TdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgZ2V0VXNlcm5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51c2VybmFtZTtcbiAgfSxcbiAgc2V0VXNlcm5hbWU6IGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKCR0b1N0cmluZyh1c2VybmFtZSkpO1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgdGhpcy51c2VybmFtZSA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy51c2VybmFtZSArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgZ2V0UGFzc3dvcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXNzd29yZDtcbiAgfSxcbiAgc2V0UGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKCR0b1N0cmluZyhwYXNzd29yZCkpO1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgdGhpcy5wYXNzd29yZCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICBnZXRIb3N0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJ1xuICAgICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgICAgOiBzZXJpYWxpemVIb3N0KGhvc3QpICsgJzonICsgcG9ydDtcbiAgfSxcbiAgc2V0SG9zdDogZnVuY3Rpb24gKGhvc3QpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXJzZShob3N0LCBIT1NUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gIGdldEhvc3RuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJyA6IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gIH0sXG4gIHNldEhvc3RuYW1lOiBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXJzZShob3N0bmFtZSwgSE9TVE5BTUUpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICBnZXRQb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvcnQgPSB0aGlzLnBvcnQ7XG4gICAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6ICR0b1N0cmluZyhwb3J0KTtcbiAgfSxcbiAgc2V0UG9ydDogZnVuY3Rpb24gKHBvcnQpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHBvcnQgPSAkdG9TdHJpbmcocG9ydCk7XG4gICAgaWYgKHBvcnQgPT0gJycpIHRoaXMucG9ydCA9IG51bGw7XG4gICAgZWxzZSB0aGlzLnBhcnNlKHBvcnQsIFBPUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgZ2V0UGF0aG5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICByZXR1cm4gdGhpcy5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgam9pbihwYXRoLCAnLycpIDogJyc7XG4gIH0sXG4gIHNldFBhdGhuYW1lOiBmdW5jdGlvbiAocGF0aG5hbWUpIHtcbiAgICBpZiAodGhpcy5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgdGhpcy5wYXRoID0gW107XG4gICAgdGhpcy5wYXJzZShwYXRobmFtZSwgUEFUSF9TVEFSVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgZ2V0U2VhcmNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeTtcbiAgICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xuICB9LFxuICBzZXRTZWFyY2g6IGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICBzZWFyY2ggPSAkdG9TdHJpbmcoc2VhcmNoKTtcbiAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCc/JyA9PSBjaGFyQXQoc2VhcmNoLCAwKSkgc2VhcmNoID0gc3RyaW5nU2xpY2Uoc2VhcmNoLCAxKTtcbiAgICAgIHRoaXMucXVlcnkgPSAnJztcbiAgICAgIHRoaXMucGFyc2Uoc2VhcmNoLCBRVUVSWSk7XG4gICAgfVxuICAgIHRoaXMuc2VhcmNoUGFyYW1zLnVwZGF0ZSgpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gIGdldFNlYXJjaFBhcmFtczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaFBhcmFtcy5mYWNhZGU7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gIGdldEhhc2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50O1xuICAgIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG4gIH0sXG4gIHNldEhhc2g6IGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgaGFzaCA9ICR0b1N0cmluZyhoYXNoKTtcbiAgICBpZiAoaGFzaCA9PSAnJykge1xuICAgICAgdGhpcy5mcmFnbWVudCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgnIycgPT0gY2hhckF0KGhhc2gsIDApKSBoYXNoID0gc3RyaW5nU2xpY2UoaGFzaCwgMSk7XG4gICAgdGhpcy5mcmFnbWVudCA9ICcnO1xuICAgIHRoaXMucGFyc2UoaGFzaCwgRlJBR01FTlQpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2hQYXJhbXMuc2VyaWFsaXplKCkgfHwgbnVsbDtcbiAgfVxufTtcblxuLy8gYFVSTGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLWNsYXNzXG52YXIgVVJMQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkwodXJsIC8qICwgYmFzZSAqLykge1xuICB2YXIgdGhhdCA9IGFuSW5zdGFuY2UodGhpcywgVVJMUHJvdG90eXBlKTtcbiAgdmFyIGJhc2UgPSB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKSA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBzdGF0ZSA9IHNldEludGVybmFsU3RhdGUodGhhdCwgbmV3IFVSTFN0YXRlKHVybCwgZmFsc2UsIGJhc2UpKTtcbiAgaWYgKCFERVNDUklQVE9SUykge1xuICAgIHRoYXQuaHJlZiA9IHN0YXRlLnNlcmlhbGl6ZSgpO1xuICAgIHRoYXQub3JpZ2luID0gc3RhdGUuZ2V0T3JpZ2luKCk7XG4gICAgdGhhdC5wcm90b2NvbCA9IHN0YXRlLmdldFByb3RvY29sKCk7XG4gICAgdGhhdC51c2VybmFtZSA9IHN0YXRlLmdldFVzZXJuYW1lKCk7XG4gICAgdGhhdC5wYXNzd29yZCA9IHN0YXRlLmdldFBhc3N3b3JkKCk7XG4gICAgdGhhdC5ob3N0ID0gc3RhdGUuZ2V0SG9zdCgpO1xuICAgIHRoYXQuaG9zdG5hbWUgPSBzdGF0ZS5nZXRIb3N0bmFtZSgpO1xuICAgIHRoYXQucG9ydCA9IHN0YXRlLmdldFBvcnQoKTtcbiAgICB0aGF0LnBhdGhuYW1lID0gc3RhdGUuZ2V0UGF0aG5hbWUoKTtcbiAgICB0aGF0LnNlYXJjaCA9IHN0YXRlLmdldFNlYXJjaCgpO1xuICAgIHRoYXQuc2VhcmNoUGFyYW1zID0gc3RhdGUuZ2V0U2VhcmNoUGFyYW1zKCk7XG4gICAgdGhhdC5oYXNoID0gc3RhdGUuZ2V0SGFzaCgpO1xuICB9XG59O1xuXG52YXIgVVJMUHJvdG90eXBlID0gVVJMQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKVtnZXR0ZXJdKCk7XG4gICAgfSxcbiAgICBzZXQ6IHNldHRlciAmJiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW3NldHRlcl0odmFsdWUpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaHJlZicsIGFjY2Vzc29yRGVzY3JpcHRvcignc2VyaWFsaXplJywgJ3NldEhyZWYnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLm9yaWdpbmAgZ2V0dGVyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ29yaWdpbicsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0T3JpZ2luJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwcm90b2NvbCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UHJvdG9jb2wnLCAnc2V0UHJvdG9jb2wnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3VzZXJuYW1lJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRVc2VybmFtZScsICdzZXRVc2VybmFtZScpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUucGFzc3dvcmRgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAncGFzc3dvcmQnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhc3N3b3JkJywgJ3NldFBhc3N3b3JkJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0YCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaG9zdCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdCcsICdzZXRIb3N0JykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdob3N0bmFtZScsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdG5hbWUnLCAnc2V0SG9zdG5hbWUnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnBvcnRgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwb3J0JywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQb3J0JywgJ3NldFBvcnQnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnBhdGhuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3BhdGhuYW1lJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQYXRobmFtZScsICdzZXRQYXRobmFtZScpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdzZWFyY2gnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFNlYXJjaCcsICdzZXRTZWFyY2gnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3NlYXJjaFBhcmFtcycsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoUGFyYW1zJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5oYXNoYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaGFzaCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SGFzaCcsICdzZXRIYXNoJykpO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuZGVmaW5lQnVpbHRJbihVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI1VSTC1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbmRlZmluZUJ1aWx0SW4oVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbmlmIChOYXRpdmVVUkwpIHtcbiAgdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5jcmVhdGVPYmplY3RVUkw7XG4gIHZhciBuYXRpdmVSZXZva2VPYmplY3RVUkwgPSBOYXRpdmVVUkwucmV2b2tlT2JqZWN0VVJMO1xuICAvLyBgVVJMLmNyZWF0ZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvY3JlYXRlT2JqZWN0VVJMXG4gIGlmIChuYXRpdmVDcmVhdGVPYmplY3RVUkwpIGRlZmluZUJ1aWx0SW4oVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBiaW5kKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCwgTmF0aXZlVVJMKSk7XG4gIC8vIGBVUkwucmV2b2tlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9yZXZva2VPYmplY3RVUkxcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgZGVmaW5lQnVpbHRJbihVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlUmV2b2tlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBVUkw6IFVSTENvbnN0cnVjdG9yXG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuJCh7IHRhcmdldDogJ1VSTCcsIHByb3RvOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0sIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIGNhbGwoVVJMLnByb3RvdHlwZS50b1N0cmluZywgdGhpcyk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZXJyb3IudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuY2F1c2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kLWxhc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZC1sYXN0LWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZsYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnB1c2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNwbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnVuc2hpZnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5pcy12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS5nZXQteWVhcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnNldC15ZWFyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tZ210LXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmVzY2FwZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmdsb2JhbC10aGlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLWV4cG9uZW50aWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5mcm9tLWVudHJpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaGFzLW93bicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnByb3RvJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYW55Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZG90LWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnN0aWNreScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAudGVzdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYXQtYWx0ZXJuYXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3Vic3RyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWxhc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1sYXN0LWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJldmVyc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1sb2NhbGUtc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy51bmVzY2FwZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuYXRvYicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuYnRvYScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uc3RhY2snKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24udG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2snKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnNlbGYnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnN0cnVjdHVyZWQtY2xvbmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuIiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4zLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG5cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuXG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYsXG5cbiAgICBjcmVhdGVVUkwodG8pIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKGNyZWF0ZUhyZWYodG8pLCBcImh0dHA6Ly9sb2NhbGhvc3RcIik7XG4gICAgfSxcblxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcblxuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcblxuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ28oZGVsdGEpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgICBsZXQgbmV4dEluZGV4ID0gY2xhbXBJbmRleChpbmRleCArIGRlbHRhKTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG4gICAgICBpbmRleCA9IG5leHRJbmRleDtcblxuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXG4gKiBtb3N0IHdlYiBhcHBzLCBidXQgaXQgcmVxdWlyZXMgc29tZSBjb25maWd1cmF0aW9uIG9uIHRoZSBzZXJ2ZXIgdG8gZW5zdXJlIHlvdVxuICogc2VydmUgdGhlIHNhbWUgYXBwIGF0IG11bHRpcGxlIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVicm93c2VyaGlzdG9yeVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlQnJvd3NlckxvY2F0aW9uLCBjcmVhdGVCcm93c2VySHJlZiwgbnVsbCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHdpbmRvdy5sb2NhdGlvbi5oYXNoLiBUaGlzIG1ha2VzIGl0IGlkZWFsXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxuICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXNcbiAqIHJlc2VydmVkIGZvciBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LCAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcblxuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyBcIiNcIiArICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmckMShsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlSGFzaExvY2F0aW9uLCBjcmVhdGVIYXNoSHJlZiwgdmFsaWRhdGVIYXNoTG9jYXRpb24sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmckMShjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcblxuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcblxuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcblxuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7IC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pOyAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuXG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcblxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG5cbiAgICBjcmVhdGVVUkwsXG5cbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG5cbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcblxuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcblxuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn0gLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5IHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5cblxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIHBhcmVudFBhdGgsIGFsbElkcykge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG5cbiAgaWYgKGFsbElkcyA9PT0gdm9pZCAwKSB7XG4gICAgYWxsSWRzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghYWxsSWRzLmhhcyhpZCksIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGFsbElkcy5hZGQoaWQpO1xuXG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuID8gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgdHJlZVBhdGgsIGFsbElkcykgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgXCJcIiA6IHJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTsgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudCggLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfTtcblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuXG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cblxuXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7IC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcblxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTsgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcblxuICBsZXQgcmVxdWlyZWQgPSBmaXJzdC5yZXBsYWNlKC9cXD8kLywgXCJcIik7XG5cbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG5cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107IC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4gc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGVzIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuXG4gIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZC5tYXAoc3VicGF0aCA9PiBzdWJwYXRoID09PSBcIlwiID8gcmVxdWlyZWQgOiBbcmVxdWlyZWQsIHN1YnBhdGhdLmpvaW4oXCIvXCIpKSk7IC8vIFRoZW4gaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG5cbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9IC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcblxuXG4gIHJldHVybiByZXN1bHQubWFwKGV4cGxvZGVkID0+IHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkKTtcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgbGV0IHBhdGggPSBvcmlnaW5hbFBhdGg7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIik7XG4gIH1cblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9eOihcXHcrKShcXD8/KS9nLCAoXywga2V5LCBvcHRpb25hbCkgPT4ge1xuICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuXG4gICAgaWYgKG9wdGlvbmFsID09PSBcIj9cIikge1xuICAgICAgcmV0dXJuIHBhcmFtID09IG51bGwgPyBcIlwiIDogcGFyYW07XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtID09IG51bGwpIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtO1xuICB9KS5yZXBsYWNlKC9cXC86KFxcdyspKFxcPz8pL2csIChfLCBrZXksIG9wdGlvbmFsKSA9PiB7XG4gICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG5cbiAgICBpZiAob3B0aW9uYWwgPT09IFwiP1wiKSB7XG4gICAgICByZXR1cm4gcGFyYW0gPT0gbnVsbCA/IFwiXCIgOiBcIi9cIiArIHBhcmFtO1xuICAgIH1cblxuICAgIGlmIChwYXJhbSA9PSBudWxsKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBcIi9cIiArIHBhcmFtO1xuICB9KSAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcbiAgLnJlcGxhY2UoL1xcPy9nLCBcIlwiKS5yZXBsYWNlKC8oXFwvPylcXCovLCAoXywgcHJlZml4LCBfXywgc3RyKSA9PiB7XG4gICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuXG4gICAgaWYgKHBhcmFtc1tzdGFyXSA9PSBudWxsKSB7XG4gICAgICAvLyBJZiBubyBzcGxhdCB3YXMgcHJvdmlkZWQsIHRyaW0gdGhlIHRyYWlsaW5nIHNsYXNoIF91bmxlc3NfIGl0J3NcbiAgICAgIC8vIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgcmV0dXJuIHN0ciA9PT0gXCIvKlwiID8gXCIvXCIgOiBcIlwiO1xuICAgIH0gLy8gQXBwbHkgdGhlIHNwbGF0XG5cblxuICAgIHJldHVybiBcIlwiICsgcHJlZml4ICsgcGFyYW1zW3N0YXJdO1xuICB9KTtcbn1cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcblxuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbU5hbWVzXTtcbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuXG5cbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG5cbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgQHJlbWl4LXJ1bi9yb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHtcbiAgcmV0dXJuIFwiQ2Fubm90IGluY2x1ZGUgYSAnXCIgKyBjaGFyICsgXCInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBcIiArIChcImB0by5cIiArIGZpZWxkICsgXCJgIGZpZWxkIFtcIiArIEpTT04uc3RyaW5naWZ5KHBhdGgpICsgXCJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgXCIpICsgKFwiYHRvLlwiICsgZGVzdCArIFwiYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBcIikgKyBcImEgc3RyaW5nIGluIDxMaW5rIHRvPVxcXCIuLi5cXFwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCB0bztcblxuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG5cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTsgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuXG4gIGlmIChpc1BhdGhSZWxhdGl2ZSB8fCB0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTsgLy8gRWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnMgXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lXG4gICAgICAvLyBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleSBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhXG4gICAgICAvLyBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGEgXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cblxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBcIi4uXCIgc2VnbWVudHMgdGhhbiBwYXJlbnQgcm91dGVzLCByZXNvbHZlIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHJvb3QgLyBVUkwuXG5cblxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pOyAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpOyAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG5cbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cblxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcblxuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7IC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuXG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuXG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpOyAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpOyAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cblxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcblxuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cblxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG5cbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5cbmNsYXNzIEVycm9yUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9CTE9DS0VSID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkXG59O1xuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjsgLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVJvdXRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzKTsgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuXG4gIGxldCB1bmxpc3Rlbkhpc3RvcnkgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzXG5cbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcblxuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG5cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDsgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG5cbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBsZXQgaW5pdGlhbGl6ZWQgPSAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKSB8fCBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07IC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuXG4gIGxldCBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDsgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG5cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTsgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyOyAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG5cbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczpcbiAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZClcbiAgLy8gIC0gdXNlUmV2YWxpZGF0ZSgpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcblxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuXG4gIGxldCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIGZldGNoZXIgbG9hZHMgdGhhdCB3ZXJlIGNhbmNlbGxlZCBieSBhblxuICAvLyBhY3Rpb24gbmF2aWdhdGlvbiBhbmQgcmVxdWlyZSByZXZhbGlkYXRpb25cblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107IC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcblxuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTsgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuXG4gIGxldCBpbmNyZW1lbnRpbmdMb2FkSWQgPSAwOyAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcblxuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7IC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zIGZyb20gdGhlaXIgYWN0aW9uc1xuXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpOyAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG5cbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7IC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTsgLy8gV2Ugb255IHN1cHBvcnQgYSBzaW5nbGUgYWN0aXZlIGJsb2NrZXIgYXQgdGhlIG1vbWVudCBzaW5jZSB3ZSBkb24ndCBoYXZlXG4gIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcblxuICBsZXQgYWN0aXZlQmxvY2tlciA9IG51bGw7IC8vIFN0b3JlIGJsb2NrZXIgZnVuY3Rpb25zIGluIGEgc2VwYXJhdGUgTWFwIG91dHNpZGUgb2Ygcm91dGVyIHN0YXRlIHNpbmNlXG4gIC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIFVJIHN0YXRlIGlmIHRoZXkgY2hhbmdlXG5cbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwKCk7IC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uXG4gIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZVxuXG4gIGxldCBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlOyAvLyBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGFsbCBzaWRlIGVmZmVjdHMgc2hvdWxkIGJlIGtpY2tlZCBvZmYgZnJvbSBoZXJlLlxuICAvLyBJbXBsZW1lbnRlZCBhcyBhIEZsdWVudCBBUEkgZm9yIGVhc2Ugb2Y6XG4gIC8vICAgbGV0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcihpbml0KS5pbml0aWFsaXplKCk7XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBJZiBoaXN0b3J5IGluZm9ybXMgdXMgb2YgYSBQT1AgbmF2aWdhdGlvbiwgc3RhcnQgdGhlIG5hdmlnYXRpb24gYnV0IGRvIG5vdCB1cGRhdGVcbiAgICAvLyBzdGF0ZS4gIFdlJ2xsIHVwZGF0ZSBvdXIgb3duIHN0YXRlIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgdW5saXN0ZW5IaXN0b3J5ID0gaW5pdC5oaXN0b3J5Lmxpc3RlbihfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGlvbjogaGlzdG9yeUFjdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9ID0gX3JlZjtcblxuICAgICAgLy8gSWdub3JlIHRoaXMgZXZlbnQgaWYgaXQgd2FzIGp1c3QgdXMgcmVzZXR0aW5nIHRoZSBVUkwgZnJvbSBhXG4gICAgICAvLyBibG9ja2VkIFBPUCBuYXZpZ2F0aW9uXG4gICAgICBpZiAoaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB3YXJuaW5nKGFjdGl2ZUJsb2NrZXIgIT0gbnVsbCAmJiBkZWx0YSA9PT0gbnVsbCwgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICsgXCJwcm9kdWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgdGhlIHJvdXRlciBcIiArIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgKyBcImNyZWF0ZUhhc2hSb3V0ZXIgYW5kIHRoZSB1c2VyIG1hbnVhbGx5IGNoYW5nZXMgdGhlIFVSTC5cIik7XG4gICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGVcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlO1xuICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7IC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuXG4gICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICBsb2NhdGlvbixcblxuICAgICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICB9KTsgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkXG5cbiAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgZGVsZXRlQmxvY2tlcihibG9ja2VyS2V5KTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgICAgYmxvY2tlcnM6IG5ldyBNYXAocm91dGVyLnN0YXRlLmJsb2NrZXJzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pOyAvLyBLaWNrIG9mZiBpbml0aWFsIGRhdGEgbG9hZCBpZiBuZWVkZWQuICBVc2UgUG9wIHRvIGF2b2lkIG1vZGlmeWluZyBoaXN0b3J5XG5cbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZXI7XG4gIH0gLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG5cblxuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh1bmxpc3Rlbkhpc3RvcnkpIHtcbiAgICAgIHVubGlzdGVuSGlzdG9yeSgpO1xuICAgIH1cblxuICAgIHN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgICBzdGF0ZS5ibG9ja2Vycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUJsb2NrZXIoa2V5KSk7XG4gIH0gLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXJcblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH0gLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuXG5cbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlKSk7XG4gIH0gLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG5cblxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlKSB7XG4gICAgdmFyIF9sb2NhdGlvbiRzdGF0ZSwgX2xvY2F0aW9uJHN0YXRlMjtcblxuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIGJlaW5nIGxvYWRlZCBpcyBub3QgdGhlIHJlc3VsdCBvZiBhIHJlZGlyZWN0XG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiAoKF9sb2NhdGlvbiRzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBsZXQgYWN0aW9uRGF0YTtcblxuICAgIGlmIChuZXdTdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICBhY3Rpb25EYXRhID0gbmV3U3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVtcHR5IGFjdGlvbkRhdGEgLT4gY2xlYXIgcHJpb3IgYWN0aW9uRGF0YSBkdWUgdG8gYW4gYWN0aW9uIGVycm9yXG4gICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb25SZWxvYWQpIHtcbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgZGF0YSBpZiB3ZSdyZSB3cmFwcGluZyB1cCB0aGUgYWN0aW9uIHJlbG9hZFxuICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsZWFyIGFjdGlvbkRhdGEgb24gYW55IG90aGVyIGNvbXBsZXRlZCBuYXZpZ2F0aW9uc1xuICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgfSAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuXG5cbiAgICBsZXQgbG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGEgPyBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSwgbmV3U3RhdGUuZXJyb3JzKSA6IHN0YXRlLmxvYWRlckRhdGE7IC8vIE9uIGEgc3VjY2Vzc2Z1bCBuYXZpZ2F0aW9uIHdlIGNhbiBhc3N1bWUgd2UgZ290IHRocm91Z2ggYWxsIGJsb2NrZXJzXG4gICAgLy8gc28gd2UgY2FuIHN0YXJ0IGZyZXNoXG5cbiAgICBmb3IgKGxldCBba2V5XSBvZiBibG9ja2VyRnVuY3Rpb25zKSB7XG4gICAgICBkZWxldGVCbG9ja2VyKGtleSk7XG4gICAgfSAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uXG4gICAgLy8gc3VibWlzc2lvbiBuYXZpZ2F0aW9ucyB1bmxlc3MgdGhleSByZWRpcmVjdFxuXG5cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSB8fCBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgKChfbG9jYXRpb24kc3RhdGUyID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUyLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7fSwgbmV3U3RhdGUsIHtcbiAgICAgIGFjdGlvbkRhdGEsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgaGlzdG9yeUFjdGlvbjogcGVuZGluZ0FjdGlvbixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IHN0YXRlLm1hdGNoZXMpLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpXG4gICAgfSkpO1xuXG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5QdXNoKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlJlcGxhY2UpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnNcblxuXG4gICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdO1xuICAgIGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdO1xuICB9IC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnModG8sIG9wdHMpO1xuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7IC8vIFdoZW4gdXNpbmcgbmF2aWdhdGUgYXMgYSBQVVNIL1JFUExBQ0Ugd2UgYXJlbid0IHJlYWRpbmcgYW4gYWxyZWFkeS1lbmNvZGVkXG4gICAgLy8gVVJMIGZyb20gd2luZG93LmxvY2F0aW9uLCBzbyB3ZSBuZWVkIHRvIGVuY29kZSBpdCBoZXJlIHNvIHRoZSBiZWhhdmlvclxuICAgIC8vIHJlbWFpbnMgdGhlIHNhbWUgYXMgUE9QIGFuZCBub24tZGF0YS1yb3V0ZXIgdXNhZ2VzLiAgbmV3IFVSTCgpIGRvZXMgYWxsXG4gICAgLy8gdGhlIHNhbWUgZW5jb2Rpbmcgd2UnZCBnZXQgZnJvbSBhIGhpc3RvcnkucHVzaFN0YXRlL3dpbmRvdy5sb2NhdGlvbiByZWFkXG4gICAgLy8gd2l0aG91dCBoYXZpbmcgdG8gdG91Y2ggaGlzdG9yeVxuXG4gICAgbmV4dExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwgaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbikpO1xuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtcblxuICAgIGlmICh1c2VyUmVwbGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSA7IGVsc2UgaWYgKHN1Ym1pc3Npb24gIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkgJiYgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfVxuXG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pO1xuXG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcblxuICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgICB9KTsgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcblxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICBkZWxldGVCbG9ja2VyKGJsb2NrZXJLZXkpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgIGJsb2NrZXJzOiBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbmV4dExvY2F0aW9uLCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgLy8gU2VuZCB0aHJvdWdoIHRoZSBmb3JtRGF0YSBzZXJpYWxpemF0aW9uIGVycm9yIGlmIHdlIGhhdmUgb25lIHNvIHdlIGNhblxuICAgICAgLy8gcmVuZGVyIGF0IHRoZSByaWdodCBlcnJvciBib3VuZGFyeSBhZnRlciB3ZSBtYXRjaCByb3V0ZXNcbiAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZVxuICAgIH0pO1xuICB9IC8vIFJldmFsaWRhdGUgYWxsIGN1cnJlbnQgbG9hZGVycy4gIElmIGEgbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzcyBvciBpZiB0aGlzXG4gIC8vIGlzIGludGVycnVwdGVkIGJ5IGEgbmF2aWdhdGlvbiwgYWxsb3cgdGhpcyB0byBcInN1Y2NlZWRcIiBieSBjYWxsaW5nIGFsbFxuICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmRcblxuXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7IC8vIElmIHdlJ3JlIGN1cnJlbnRseSBzdWJtaXR0aW5nIGFuIGFjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24sIHdlJ2xsIGp1c3QgbGV0IHRoZSBmb2xsb3cgdXAgbG9hZGVyIGV4ZWN1dGlvbiBjYWxsIGFsbCBsb2FkZXJzXG5cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbiBhbiBpZGxlIHN0YXRlLCBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uIGZvciB0aGUgY3VycmVudFxuICAgIC8vIGFjdGlvbi9sb2NhdGlvbiBhbmQgbWFyayBpdCBhcyB1bmludGVycnVwdGVkLCB3aGljaCB3aWxsIHNraXAgdGhlIGhpc3RvcnlcbiAgICAvLyB1cGRhdGUgaW4gY29tcGxldGVOYXZpZ2F0aW9uXG5cblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuXG5cbiAgICBzdGFydE5hdmlnYXRpb24ocGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICBvdmVycmlkZU5hdmlnYXRpb246IHN0YXRlLm5hdmlnYXRpb25cbiAgICB9KTtcbiAgfSAvLyBTdGFydCBhIG5hdmlnYXRpb24gdG8gdGhlIGdpdmVuIGFjdGlvbi9sb2NhdGlvbi4gIENhbiBvcHRpb25hbGx5IHByb3ZpZGUgYVxuICAvLyBvdmVycmlkZU5hdmlnYXRpb24gd2hpY2ggd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsTG9hZCBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0XG4gIC8vIG5hdmlnYXRpb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgb3B0cykge1xuICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBuYXZpZ2F0aW9ucyBhbmQgc3RhcnQgYSBuZXcgb25lLiBVbnNldCBhbnkgb25nb2luZ1xuICAgIC8vIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9ucyB1bmxlc3MgdG9sZCBvdGhlcndpc2UsIHNpbmNlIHdlIHdhbnQgdGhpc1xuICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgcGVuZGluZ0FjdGlvbiA9IGhpc3RvcnlBY3Rpb247XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlOyAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG5cbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTsgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpOyAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcblxuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlIGFuZCBub3QgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gRm9yIGV4YW1wbGUsIG9uIC9wYWdlI2hhc2ggYW5kIHN1Ym1pdCBhIDxGb3JtIG1ldGhvZD1cInBvc3RcIj4gd2hpY2ggd2lsbFxuICAgIC8vIGRlZmF1bHQgdG8gYSBuYXZpZ2F0aW9uIHRvIC9wYWdlXG5cblxuICAgIGlmIChpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiYgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgICBwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO1xuXG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSwgb3B0cy5zdWJtaXNzaW9uKTtcblxuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBuYXZpZ2F0aW9uOyAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcblxuICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2FsbCBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7XG5cbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzXG4gICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgIH0gOiB7fSwge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pKTtcbiAgfSAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBzdWJtaXNzaW9uLCBtYXRjaGVzLCBvcHRzKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTsgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuXG4gICAgbGV0IG5hdmlnYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgICBsb2NhdGlvblxuICAgIH0sIHN1Ym1pc3Npb24pO1xuXG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgbmF2aWdhdGlvblxuICAgIH0pOyAvLyBDYWxsIG91ciBhY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0XG5cbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBhY3Rpb25NYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTtcblxuICAgICAgaWYgKG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwpIHtcbiAgICAgICAgcmVwbGFjZSA9IG9wdHMucmVwbGFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZlxuICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZFxuICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zXG4gICAgICAgIHJlcGxhY2UgPSByZXN1bHQubG9jYXRpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpOyAvLyBCeSBkZWZhdWx0LCBhbGwgc3VibWlzc2lvbnMgYXJlIFJFUExBQ0UgbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGVcbiAgICAgIC8vIGFjdGlvbiB0aHJldyBhbiBlcnJvciB0aGF0J2xsIGJlIHJlbmRlcmVkIGluIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbFxuICAgICAgLy8gYmFjayB0byBQVVNIIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0aGUgYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG9cbiAgICAgIC8vIHRoZSBwcmUtc3VibWlzc2lvbiBmb3JtIGxvY2F0aW9uIHRvIHRyeSBhZ2FpblxuXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGFcbiAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LFxuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH07XG4gIH0gLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIG92ZXJyaWRlTmF2aWdhdGlvbiwgc3VibWlzc2lvbiwgcmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbjtcblxuICAgIGlmICghbG9hZGluZ05hdmlnYXRpb24pIHtcbiAgICAgIGxldCBuYXZpZ2F0aW9uID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gbmF2aWdhdGlvbjtcbiAgICB9IC8vIElmIHRoaXMgd2FzIGEgcmVkaXJlY3QgZnJvbSBhbiBhY3Rpb24gd2UgZG9uJ3QgaGF2ZSBhIFwic3VibWlzc2lvblwiIGJ1dFxuICAgIC8vIHdlIGhhdmUgaXQgb24gdGhlIGxvYWRpbmcgbmF2aWdhdGlvbiBzbyB1c2UgdGhhdCBpZiBhdmFpbGFibGVcblxuXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uID8gc3VibWlzc2lvbiA6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1NZXRob2QgJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybUFjdGlvbiAmJiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSAmJiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRW5jVHlwZSA/IHtcbiAgICAgIGZvcm1NZXRob2Q6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybURhdGE6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1EYXRhLFxuICAgICAgZm9ybUVuY1R5cGU6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1FbmNUeXBlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgYWN0aXZlU3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IsIGZldGNoTG9hZE1hdGNoZXMpOyAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG5cbiAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocm91dGVJZCA9PiAhKG1hdGNoZXMgJiYgbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpIHx8IG1hdGNoZXNUb0xvYWQgJiYgbWF0Y2hlc1RvTG9hZC5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW5cblxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgLy8gQ29tbWl0IHBlbmRpbmcgZXJyb3IgaWYgd2UncmUgc2hvcnQgY2lyY3VpdGluZ1xuICAgICAgICBlcnJvcnM6IHBlbmRpbmdFcnJvciB8fCBudWxsXG4gICAgICB9LCBwZW5kaW5nQWN0aW9uRGF0YSA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICAgIH0gOiB7fSkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuXG5cbiAgICBpZiAoIWlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHJmLmtleSk7XG4gICAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0ge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBkYXRhOiBmZXRjaGVyICYmIGZldGNoZXIuZGF0YSxcbiAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgIH1cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLnNldChyZi5rZXksIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikpO1xuICAgIGxldCB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmVxdWVzdCk7XG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBDbGVhbiB1cCBfYWZ0ZXJfIGxvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZiB3ZSBzaG9ydFxuICAgIC8vIGNpcmN1aXRlZCBiZWNhdXNlIGZldGNoQ29udHJvbGxlcnMgd291bGQgaGF2ZSBiZWVuIGFib3J0ZWQgYW5kXG4gICAgLy8gcmVhc3NpZ25lZCB0byBuZXcgY29udHJvbGxlcnMgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cblxuXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTsgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG5cbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwge1xuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH0gLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcblxuXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHBlbmRpbmdFcnJvciwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpOyAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZVxuXG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRlZmVycmVkRGF0YSwgcm91dGVJZCkgPT4ge1xuICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byB1cGRhdGVTdGF0ZSBoZXJlIHNpbmNlIHRoZSBUcmFja2VkUHJvbWlzZSBvblxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgaW5zdGFuY2UgaWYgd2Ugd2VyZSBhYm9ydGVkIG9yIGlmIHByb21pc2VzIGhhdmUgc2V0dGxlZFxuICAgICAgICBpZiAoYWJvcnRlZCB8fCBkZWZlcnJlZERhdGEuZG9uZSkge1xuICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSwgZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9IDoge30pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9IC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcblxuXG4gIGZ1bmN0aW9uIGZldGNoKGtleSwgcm91dGVJZCwgaHJlZiwgb3B0cykge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicm91dGVyLmZldGNoKCkgd2FzIGNhbGxlZCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIsIGJ1dCBpdCBzaG91bGRuJ3QgYmUuIFwiICsgXCJZb3UgYXJlIGxpa2VseSBjYWxsaW5nIGEgdXNlRmV0Y2hlcigpIG1ldGhvZCBpbiB0aGUgYm9keSBvZiB5b3VyIGNvbXBvbmVudC4gXCIgKyBcIlRyeSBtb3ZpbmcgaXQgdG8gYSB1c2VFZmZlY3Qgb3IgYSBjYWxsYmFjay5cIik7XG4gICAgfVxuXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaHJlZiwgaW5pdC5iYXNlbmFtZSk7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBocmVmXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBvcHRzLCB0cnVlKTtcbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuXG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcblxuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aCxcbiAgICAgIG1hdGNoLFxuICAgICAgbWF0Y2hlc1xuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH0gLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHN1Ym1pc3Npb24pIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcblxuXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuXG4gICAgbGV0IGZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCJcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcblxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcblxuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCJcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH0gLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG5cblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKSA6IHN0YXRlLm1hdGNoZXM7XG4gICAgaW52YXJpYW50KG1hdGNoZXMsIFwiRGlkbid0IGZpbmQgYW55IG1hdGNoZXMgYWZ0ZXIgZmV0Y2hlciBhY3Rpb25cIik7XG4gICAgbGV0IGxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGZldGNoUmVsb2FkSWRzLnNldChrZXksIGxvYWRJZCk7XG5cbiAgICBsZXQgbG9hZEZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfSk7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2Fkcywge1xuICAgICAgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCB1bmRlZmluZWQsIC8vIE5vIG5lZWQgdG8gc2VuZCB0aHJvdWdoIGVycm9ycyBzaW5jZSB3ZSBzaG9ydCBjaXJjdWl0IGFib3ZlXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcyk7IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0KTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTsgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOyAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG5cbiAgICBsZXQgbG9hZGluZ0ZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfSk7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7IC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9IC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdSBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuXG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cblxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7IC8vIFRPRE86IEluIHJlbWl4LCB0aGlzIHdvdWxkIHJlc2V0IHRvIElETEVfTkFWSUdBVElPTiBpZiBpdCB3YXMgYSBjYXRjaCAtXG4gICAgICAvLyBkbyB3ZSBuZWVkIHRvIGJlaGF2ZSBhbnkgZGlmZmVyZW50bHkgd2l0aCBvdXIgbm9uLXJlZGlyZWN0IGVycm9ycz9cbiAgICAgIC8vIFdoYXQgaWYgaXQgd2FzIGEgbm9uLXJlZGlyZWN0IFJlc3BvbnNlP1xuXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTsgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG5cbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXApIHtcbiAgICB2YXIgX3dpbmRvdztcblxuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdFxuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcblxuICAgIGlmIChyZWRpcmVjdC5yZXZhbGlkYXRlKSB7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGdldCByaWQgb2YgdXNlVHJhbnNpdGlvbiBpbiBSZW1peCB2MlxuICAgIF9leHRlbmRzKHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlXG4gICAgfSwgaXNGZXRjaEFjdGlvblJlZGlyZWN0ID8ge1xuICAgICAgX2lzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgIH0gOiB7fSkpO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7IC8vIENoZWNrIGlmIHRoaXMgYW4gZXh0ZXJuYWwgcmVkaXJlY3QgdGhhdCBnb2VzIHRvIGEgbmV3IG9yaWdpblxuXG4gICAgaWYgKGlzQnJvd3NlciAmJiB0eXBlb2YgKChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5sb2NhdGlvbikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGxldCBuZXdPcmlnaW4gPSBpbml0Lmhpc3RvcnkuY3JlYXRlVVJMKHJlZGlyZWN0LmxvY2F0aW9uKS5vcmlnaW47XG5cbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBuZXdPcmlnaW4pIHtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuXG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGxldCByZWRpcmVjdEhpc3RvcnlBY3Rpb24gPSByZXBsYWNlID09PSB0cnVlID8gQWN0aW9uLlJlcGxhY2UgOiBBY3Rpb24uUHVzaDsgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cblxuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3RhdGUubmF2aWdhdGlvbjtcblxuICAgIGlmICghc3VibWlzc2lvbiAmJiBmb3JtTWV0aG9kICYmIGZvcm1BY3Rpb24gJiYgZm9ybURhdGEgJiYgZm9ybUVuY1R5cGUpIHtcbiAgICAgIHN1Ym1pc3Npb24gPSB7XG4gICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgICBmb3JtRGF0YVxuICAgICAgfTtcbiAgICB9IC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgR0VUL1BPU1QvUFVUL1BBVENIL0RFTEVURSBhcyBhIHN1Ym1pc3Npb24gbmF2aWdhdGlvbiB0byB0aGVcbiAgICAvLyByZWRpcmVjdGVkIGxvY2F0aW9uXG5cblxuICAgIGlmIChyZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMuaGFzKHJlZGlyZWN0LnN0YXR1cykgJiYgc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgc3VibWlzc2lvbjogX2V4dGVuZHMoe30sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgICBmb3JtQWN0aW9uOiByZWRpcmVjdC5sb2NhdGlvblxuICAgICAgICB9KSxcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBraWNrIG9mZiBhIG5ldyBsb2FkaW5nIG5hdmlnYXRpb24sIHByZXNlcnZpbmcgdGhlXG4gICAgICAvLyBzdWJtaXNzaW9uIGluZm8gZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGlzIG5hdmlnYXRpb25cbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgIGxvY2F0aW9uOiByZWRpcmVjdExvY2F0aW9uLFxuICAgICAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1NZXRob2QgOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbiA/IHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbiA/IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1EYXRhIDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgcmVxdWVzdC5zaWduYWwpLCBmLm1hdGNoLCBmLm1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSkpXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcmVxdWVzdC5zaWduYWwsIGZhbHNlLCBzdGF0ZS5sb2FkZXJEYXRhKSwgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5tYXRjaCksIGZldGNoZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgdHJ1ZSldKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTsgLy8gQ2FuY2VsIHBlbmRpbmcgcm91dGUtbGV2ZWwgZGVmZXJyZWRzIGFuZCBtYXJrIGNhbmNlbGxlZCByb3V0ZXMgZm9yXG4gICAgLy8gcmV2YWxpZGF0aW9uXG5cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTsgLy8gQWJvcnQgaW4tZmxpZ2h0IGZldGNoZXIgbG9hZHNcblxuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKSB7XG4gICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBlcnJvcnM6IHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSxcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXkpIHtcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrRmV0Y2hlcnNEb25lKGtleXMpIHtcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgbGV0IGZldGNoZXIgPSBnZXRGZXRjaGVyKGtleSk7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICAgICAgZGF0YTogZmV0Y2hlci5kYXRhLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICAgIH07XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcblxuICAgIGZvciAobGV0IGtleSBvZiBmZXRjaFJlZGlyZWN0SWRzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuXG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1hcmtGZXRjaGVyc0RvbmUoZG9uZUtleXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnRTdGFsZUZldGNoTG9hZHMobGFuZGVkSWQpIHtcbiAgICBsZXQgeWVldGVkS2V5cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgW2tleSwgaWRdIG9mIGZldGNoUmVsb2FkSWRzKSB7XG4gICAgICBpZiAoaWQgPCBsYW5kZWRJZCkge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG5cbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYXJrRmV0Y2hlcnNEb25lKHllZXRlZEtleXMpO1xuICAgIHJldHVybiB5ZWV0ZWRLZXlzLmxlbmd0aCA+IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCbG9ja2VyKGtleSwgZm4pIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG5cbiAgICAgIGlmIChhY3RpdmVCbG9ja2VyID09IG51bGwpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBub3cgdGhlIGFjdGl2ZSBibG9ja2VyXG4gICAgICAgIGFjdGl2ZUJsb2NrZXIgPSBrZXk7XG4gICAgICB9IGVsc2UgaWYgKGtleSAhPT0gYWN0aXZlQmxvY2tlcikge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlQmxvY2tlcihrZXkpIHtcbiAgICBzdGF0ZS5ibG9ja2Vycy5kZWxldGUoa2V5KTtcbiAgICBibG9ja2VyRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKGFjdGl2ZUJsb2NrZXIgPT09IGtleSkge1xuICAgICAgYWN0aXZlQmxvY2tlciA9IG51bGw7XG4gICAgfVxuICB9IC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gdXBkYXRlIGJsb2NrZXJzLCBlbnN1cmluZyB2YWxpZCBzdGF0ZSB0cmFuc2l0aW9uc1xuXG5cbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjsgLy8gUG9vciBtYW5zIHN0YXRlIG1hY2hpbmUgOilcbiAgICAvLyBodHRwczovL21lcm1haWQubGl2ZS9lZGl0I3Bha286ZU5xVmtjOU93ekFNeGw4bDhubmpBWXJFdERJT0hFQklnd3ZLSlRSZUd5M19sRHBJcU8yN2s2YXdNRzBYY3JMbG56ODdud2RvbkVTb2dLWFhCdUU3OXJxNzVYWk8zLXlIZHMwUkpWdXY3MFlyUGxVckNFZTJIZnJPUlMzcnVicVpmdWh0cGc1Qzl3azV0WjRWS2NSVXE4OHE5WjhSUzAtNDhjRTFpSEprTDB1Z2JIdUZMdXM5TDZzcFp5OG5YOU1QMkNOZG9tVmFwb3NxdTNmR2F5VDhUOC1qSlF3aGVwb19VdHBnQlFhREVVb20wNGRaaEFOMWFKQkRsVUtKQnhFMWNlQjJTbWowTWxuLUlCVzVBRlUyZHdVaWt0dF8yUWFxMmRCZmFLZEV1cDg1VVY3WWQtZEtqbG5rYWJsMlB2cjBEVGtUcmVNXG5cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcblxuICAgIGlmIChhY3RpdmVCbG9ja2VyID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdlIG9ubHkgYWxsb3cgYSBzaW5nbGUgYmxvY2tlciBhdCB0aGUgbW9tZW50LiAgVGhpcyB3aWxsIG5lZWQgdG8gYmVcbiAgICAvLyB1cGRhdGVkIGlmIHdlIGVuaGFuY2UgdG8gc3VwcG9ydCBtdWx0aXBsZSBibG9ja2VycyBpbiB0aGUgZnV0dXJlXG5cblxuICAgIGxldCBibG9ja2VyRnVuY3Rpb24gPSBibG9ja2VyRnVuY3Rpb25zLmdldChhY3RpdmVCbG9ja2VyKTtcbiAgICBpbnZhcmlhbnQoYmxvY2tlckZ1bmN0aW9uLCBcIkNvdWxkIG5vdCBmaW5kIGEgZnVuY3Rpb24gZm9yIHRoZSBhY3RpdmUgYmxvY2tlclwiKTtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChhY3RpdmVCbG9ja2VyKTtcblxuICAgIGlmIChibG9ja2VyICYmIGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiKSB7XG4gICAgICAvLyBJZiB0aGUgYmxvY2tlciBpcyBjdXJyZW50bHkgcHJvY2VlZGluZywgd2UgZG9uJ3QgbmVlZCB0byByZS1jaGVja1xuICAgICAgLy8gaXQgYW5kIGNhbiBsZXQgdGhpcyBuYXZpZ2F0aW9uIGNvbnRpbnVlXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHdlJ3JlIHVuYmxvY2tlZC9ibG9ja2VkIHNvIHdlIG5lZWQgdG8gY2hlY2sgdGhlXG4gICAgLy8gdXNlci1wcm92aWRlZCBibG9ja2VyIGZ1bmN0aW9uXG5cblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYWN0aXZlQmxvY2tlcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocHJlZGljYXRlKSB7XG4gICAgbGV0IGNhbmNlbGxlZFJvdXRlSWRzID0gW107XG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4ge1xuICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7XG4gICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC1cbiAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXJcbiAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzXG4gICAgICAgIGRmZC5jYW5jZWwoKTtcbiAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7XG4gIH0gLy8gT3B0IGluIHRvIGNhcHR1cmluZyBhbmQgcmVwb3J0aW5nIHNjcm9sbCBwb3NpdGlvbnMgZHVyaW5nIG5hdmlnYXRpb25zLFxuICAvLyB1c2VkIGJ5IHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuXG5cbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcblxuICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gZ2V0S2V5IHx8IChsb2NhdGlvbiA9PiBsb2NhdGlvbi5rZXkpOyAvLyBQZXJmb3JtIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbiwgc2luY2Ugd2UgbWlzcyB0aGUgYm9hdCBvblxuICAgIC8vIHRoZSBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgYmVjYXVzZSB3ZSd2ZSBub3QgeWV0IHJlbmRlcmVkIDxTY3JvbGxSZXN0b3JhdGlvbi8+XG4gICAgLy8gYW5kIHRoZXJlZm9yZSBoYXZlIG5vIHNhdmVkU2Nyb2xsUG9zaXRpb25zIGF2YWlsYWJsZVxuXG5cbiAgICBpZiAoIWluaXRpYWxTY3JvbGxSZXN0b3JlZCAmJiBzdGF0ZS5uYXZpZ2F0aW9uID09PSBJRExFX05BVklHQVRJT04pIHtcbiAgICAgIGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IHRydWU7XG4gICAgICBsZXQgeSA9IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuXG4gICAgICBpZiAoeSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQgdXNlck1hdGNoZXMgPSBtYXRjaGVzLm1hcChtID0+IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSk7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkobG9jYXRpb24sIHVzZXJNYXRjaGVzKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQgdXNlck1hdGNoZXMgPSBtYXRjaGVzLm1hcChtID0+IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSk7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkobG9jYXRpb24sIHVzZXJNYXRjaGVzKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBsZXQgeSA9IHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJvdXRlciA9IHtcbiAgICBnZXQgYmFzZW5hbWUoKSB7XG4gICAgICByZXR1cm4gaW5pdC5iYXNlbmFtZTtcbiAgICB9LFxuXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG5cbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcblxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXIsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCA9IFN5bWJvbChcImRlZmVycmVkXCIpO1xuZnVuY3Rpb24gY3JlYXRlU3RhdGljSGFuZGxlcihyb3V0ZXMsIG9wdHMpIHtcbiAgaW52YXJpYW50KHJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVN0YXRpY0hhbmRsZXJcIik7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMpO1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTsgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcblxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJoZWFkXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcblxuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuXG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9jYXRpb24sXG4gICAgICBiYXNlbmFtZVxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZVxuICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2VcbiAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW5cbiAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2VcbiAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nXG4gICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy5cbiAgICovXG5cblxuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpOyAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuXG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcImhlYWRcIiAmJiBtZXRob2QgIT09IFwib3B0aW9uc1wiKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIG1hdGNoKTtcblxuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cblxuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuXG4gICAgICBsZXQgZGF0YSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmxvYWRlckRhdGEpWzBdO1xuXG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCk7XG4gICAgICByZXR1cm4gaXNSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0IDogX2V4dGVuZHMoe30sIHJlc3VsdCwge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdGhyZXcvcmV0dXJuZWQgYSBSZXNwb25zZSBpbiBjYWxsTG9hZGVyT3JBY3Rpb24sIHdlIHRocm93XG4gICAgICAvLyBpdCB0byBiYWlsIG91dCBhbmQgdGhlbiByZXR1cm4gb3IgdGhyb3cgaGVyZSBiYXNlZCBvbiB3aGV0aGVyIHRoZSB1c2VyXG4gICAgICAvLyByZXR1cm5lZCBvciB0aHJld1xuICAgICAgaWYgKGlzUXVlcnlSb3V0ZVJlc3BvbnNlKGUpKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IgJiYgIWlzUmVkaXJlY3RSZXNwb25zZShlLnJlc3BvbnNlKSkge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZS5yZXNwb25zZTtcbiAgICAgIH0gLy8gUmVkaXJlY3RzIGFyZSBhbHdheXMgcmV0dXJuZWQgc2luY2UgdGhleSBkb24ndCBwcm9wYWdhdGUgdG8gY2F0Y2hcbiAgICAgIC8vIGJvdW5kYXJpZXNcblxuXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTsgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH0gLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG5cblxuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvbkVycm9yKSB7XG4gICAgbGV0IGlzUm91dGVSZXF1ZXN0ID0gcm91dGVNYXRjaCAhPSBudWxsOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpKV0pO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgIH0gLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcblxuXG4gICAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY29udGV4dCA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvbkVycm9yLCBhY3RpdmVEZWZlcnJlZHMpOyAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcblxuICAgIGxldCBleGVjdXRlZExvYWRlcnMgPSBuZXcgU2V0KG1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IG1hdGNoLnJvdXRlLmlkKSk7XG4gICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMuc2l6ZSA+IDAgPyBPYmplY3QuZnJvbUVudHJpZXMoYWN0aXZlRGVmZXJyZWRzLmVudHJpZXMoKSkgOiBudWxsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIFwiZm9ybURhdGFcIiBpbiBvcHRzO1xufSAvLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH0gLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG5cblxuICBsZXQgc3VibWlzc2lvbjtcblxuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHN1Ym1pc3Npb24gPSB7XG4gICAgICBmb3JtTWV0aG9kOiBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIixcbiAgICAgIGZvcm1BY3Rpb246IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpLFxuICAgICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgZm9ybURhdGE6IG9wdHMuZm9ybURhdGFcbiAgICB9O1xuXG4gICAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvblxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcblxuXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7IC8vIFNpbmNlIGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciAoYXMgb3Bwb3NlZCB0b1xuICAvLyBuYXZpZ2F0aW9uIEdFVCBzdWJtaXNzaW9ucyB3aGljaCBydW4gYWxsIGxvYWRlcnMpLCB3ZSBuZWVkIHRvIHByZXNlcnZlXG4gIC8vIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG5cbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG5cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn0gLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGJlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuXG5cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIHtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgaWYgKGJvdW5kYXJ5SWQpIHtcbiAgICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yLCBmZXRjaExvYWRNYXRjaGVzKSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIGxldCBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSA9IC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdGUsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHx8IC8vIENsaWNrZWQgdGhlIHNhbWUgbGluaywgcmVzdWJtaXR0ZWQgYSBHRVQgZm9ybVxuICBjdXJyZW50VXJsLnRvU3RyaW5nKCkgPT09IG5leHRVcmwudG9TdHJpbmcoKSB8fCAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2g7IC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG5cbiAgbGV0IGJvdW5kYXJ5SWQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCk7XG4gIGxldCBuYXZpZ2F0aW9uTWF0Y2hlcyA9IGJvdW5kYXJ5TWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGlmIChtYXRjaC5yb3V0ZS5sb2FkZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcblxuXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAgIC8vIHByb3ZpZGVzIGl0J3Mgb3duIGltcGxlbWVudGF0aW9uLCB0aGVuIHdlIGdpdmUgdGhlbSBmdWxsIGNvbnRyb2wgYnV0XG4gICAgLy8gcHJvdmlkZSB0aGlzIHZhbHVlIHNvIHRoZXkgY2FuIGxldmVyYWdlIGl0IGlmIG5lZWRlZCBhZnRlciB0aGV5IGNoZWNrXG4gICAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuXG5cbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogZGVmYXVsdFNob3VsZFJldmFsaWRhdGUgfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pOyAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG5cbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMgJiYgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICBpZiAoIW1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkpIHtcbiAgICAgIC8vIFRoaXMgZmV0Y2hlciBpcyBub3QgZ29pbmcgdG8gYmUgcHJlc2VudCBpbiB0aGUgc3Vic2VxdWVudCByZW5kZXIgc29cbiAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byByZXZhbGlkYXRlIGl0XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChjYW5jZWxsZWRGZXRjaGVyTG9hZHMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgLy8gVGhpcyBmZXRjaGVyIHdhcyBjYW5jZWxsZWQgZnJvbSBhIHByaW9yIGFjdGlvbiBzdWJtaXNzaW9uIC0gZm9yY2UgcmVsb2FkXG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKF9leHRlbmRzKHtcbiAgICAgICAga2V5XG4gICAgICB9LCBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJldmFsaWRhdGluZyBmZXRjaGVycyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIHJvdXRlIG1hdGNoZXMgc2luY2UgdGhleVxuICAgICAgLy8gaGl0IGEgc3RhdGljIGhyZWYsIHNvIHRoZXkgX2Fsd2F5c18gY2hlY2sgc2hvdWxkUmV2YWxpZGF0ZSBhbmQgdGhlXG4gICAgICAvLyBkZWZhdWx0IGlzIHN0cmljdGx5IGlmIGEgcmV2YWxpZGF0aW9uIGlzIGV4cGxpY2l0bHkgcmVxdWlyZWQgKGFjdGlvblxuICAgICAgLy8gc3VibWlzc2lvbnMsIHVzZVJldmFsaWRhdG9yLCBYLVJlbWl4LVJldmFsaWRhdGUpLlxuICAgICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGYubWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgICAgY3VycmVudFVybCxcbiAgICAgICAgY3VycmVudFBhcmFtczogc3RhdGUubWF0Y2hlc1tzdGF0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtcyxcbiAgICAgICAgbmV4dFVybCxcbiAgICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlXG4gICAgICB9KSk7XG5cbiAgICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICAgIGtleVxuICAgICAgICB9LCBmKSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPSAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHwgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkOyAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7IC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcblxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cblxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8IC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuXG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG5cbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgYmFzZW5hbWUsIGlzU3RhdGljUmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0KSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChpc1N0YXRpY1JlcXVlc3QgPT09IHZvaWQgMCkge1xuICAgIGlzU3RhdGljUmVxdWVzdCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzUm91dGVSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1JvdXRlUmVxdWVzdCA9IGZhbHNlO1xuICB9XG5cbiAgbGV0IHJlc3VsdFR5cGU7XG4gIGxldCByZXN1bHQ7IC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG5cbiAgbGV0IHJlamVjdDtcbiAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcblxuICBsZXQgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcblxuICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuXG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpbnZhcmlhbnQoaGFuZGxlciwgXCJDb3VsZCBub3QgZmluZCB0aGUgXCIgKyB0eXBlICsgXCIgdG8gcnVuIG9uIHRoZSBcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiByb3V0ZVwiKTtcbiAgICByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW2hhbmRsZXIoe1xuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgY29udGV4dDogcmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gICAgaW52YXJpYW50KHJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcIllvdSBkZWZpbmVkIFwiICsgKHR5cGUgPT09IFwiYWN0aW9uXCIgPyBcImFuIGFjdGlvblwiIDogXCJhIGxvYWRlclwiKSArIFwiIGZvciByb3V0ZSBcIiArIChcIlxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIGJ1dCBkaWRuJ3QgcmV0dXJuIGFueXRoaW5nIGZyb20geW91ciBgXCIgKyB0eXBlICsgXCJgIFwiKSArIFwiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVzdWx0VHlwZSA9IFJlc3VsdFR5cGUuZXJyb3I7XG4gICAgcmVzdWx0ID0gZTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICB9XG5cbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzOyAvLyBQcm9jZXNzIHJlZGlyZWN0c1xuXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpO1xuICAgICAgbGV0IGlzQWJzb2x1dGUgPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2kudGVzdChsb2NhdGlvbik7IC8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiBpbnRlcm5hbCByZWRpcmVjdHNcblxuICAgICAgaWYgKCFpc0Fic29sdXRlKSB7XG4gICAgICAgIGxldCBhY3RpdmVNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSk7XG4gICAgICAgIGxldCByb3V0ZVBhdGhuYW1lcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKGFjdGl2ZU1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICAgICAgICBsZXQgcmVzb2x2ZWRMb2NhdGlvbiA9IHJlc29sdmVUbyhsb2NhdGlvbiwgcm91dGVQYXRobmFtZXMsIG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lKTtcbiAgICAgICAgaW52YXJpYW50KGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksIFwiVW5hYmxlIHRvIHJlc29sdmUgcmVkaXJlY3QgbG9jYXRpb246IFwiICsgbG9jYXRpb24pOyAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcblxuICAgICAgICBpZiAoYmFzZW5hbWUpIHtcbiAgICAgICAgICBsZXQgcGF0aCA9IHJlc29sdmVkTG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZSA9IHBhdGggPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoXSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhdGlvbiA9IGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCFpc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIHJlZGlyZWN0cy5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHN0YXRpYyByZXF1ZXMsIHdlIGNhbiBsZXQgaXQgZ28gYmFjayB0byB0aGUgYnJvd3NlclxuICAgICAgICAvLyBhcy1pc1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICBsZXQgdXJsID0gbG9jYXRpb24uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgbG9jYXRpb24pIDogbmV3IFVSTChsb2NhdGlvbik7XG5cbiAgICAgICAgaWYgKHVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luKSB7XG4gICAgICAgICAgbG9jYXRpb24gPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gRG9uJ3QgcHJvY2VzcyByZWRpcmVjdHMgaW4gdGhlIHJvdXRlciBkdXJpbmcgc3RhdGljIHJlcXVlc3RzIHJlcXVlc3RzLlxuICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQXG4gICAgICAvLyByZWRpcmVjdC4gIFdlIGFsc28gdXBkYXRlIHRoZSBMb2NhdGlvbiBoZWFkZXIgaW4gcGxhY2UgaW4gdGhpcyBmbG93IHNvXG4gICAgICAvLyBiYXNlbmFtZSBhbmQgcmVsYXRpdmUgcm91dGluZyBpcyB0YWtlbiBpbnRvIGFjY291bnRcblxuXG4gICAgICBpZiAoaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0LFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRlOiByZXN1bHQuaGVhZGVycy5nZXQoXCJYLVJlbWl4LVJldmFsaWRhdGVcIikgIT09IG51bGxcbiAgICAgIH07XG4gICAgfSAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrIGRpcmVjdGx5XG4gICAgLy8gd2l0aG91dCB1bndyYXBwaW5nLiAgV2UgZG8gdGhpcyB3aXRoIHRoZSBRdWVyeVJvdXRlUmVzcG9uc2Ugd3JhcHBlclxuICAgIC8vIGludGVyZmFjZSBzbyB3ZSBjYW4ga25vdyB3aGV0aGVyIGl0IHdhcyByZXR1cm5lZCBvciB0aHJvd25cblxuXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICAgICAgdGhyb3cge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlIHx8IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7IC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuXG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIC9cXGJhcHBsaWNhdGlvblxcL2pzb25cXGIvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgIGVycm9yOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIERlZmVycmVkRGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLFxuICAgICAgZGVmZXJyZWREYXRhOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59IC8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5cblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcblxuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpbml0LmJvZHkgPSBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiA/IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSA6IGZvcm1EYXRhO1xuICB9IC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuXG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG5cbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSBpbnN0YW5jZW9mIEZpbGUgPyB2YWx1ZS5uYW1lIDogdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9OyAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcblxuICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICBsZXQgaWQgPSBtYXRjaGVzVG9Mb2FkW2luZGV4XS5yb3V0ZS5pZDtcbiAgICBpbnZhcmlhbnQoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSwgXCJDYW5ub3QgaGFuZGxlIHJlZGlyZWN0IHJlc3VsdHMgaW4gcHJvY2Vzc0xvYWRlckRhdGFcIik7XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yOyAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcblxuICAgICAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgICAgICBlcnJvciA9IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXTtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307IC8vIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcblxuICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgfSAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuXG5cbiAgICAgIGxvYWRlckRhdGFbaWRdID0gdW5kZWZpbmVkOyAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcblxuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zZXQoaWQsIHJlc3VsdC5kZWZlcnJlZERhdGEpO1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7XG4gICAgICB9IC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cblxuXG4gICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuXG4gIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7XG4gICAgbG9hZGVyRGF0YVtPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTsgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2hcbiAgICB9ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbaW5kZXhdO1xuICAgIGludmFyaWFudChmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLCBcIkRpZCBub3QgZmluZCBjb3JyZXNwb25kaW5nIGZldGNoZXIgcmVzdWx0XCIpO1xuICAgIGxldCByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1tpbmRleF07IC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2gucm91dGUuaWQpO1xuXG4gICAgICBpZiAoIShlcnJvcnMgJiYgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdKSkge1xuICAgICAgICBlcnJvcnMgPSBfZXh0ZW5kcyh7fSwgZXJyb3JzLCB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgICB9O1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcblxuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG5cbiAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIGlmIChuZXdMb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbmV3TG9hZGVyRGF0YVtpZF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cblxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgLy8gRG9uJ3Qga2VlcCBhbnkgbG9hZGVyIGRhdGEgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn0gLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcblxuXG5mdW5jdGlvbiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIHJvdXRlSWQpIHtcbiAgbGV0IGVsaWdpYmxlTWF0Y2hlcyA9IHJvdXRlSWQgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxKSA6IFsuLi5tYXRjaGVzXTtcbiAgcmV0dXJuIGVsaWdpYmxlTWF0Y2hlcy5yZXZlcnNlKCkuZmluZChtID0+IG0ucm91dGUuaGFzRXJyb3JCb3VuZGFyeSA9PT0gdHJ1ZSkgfHwgbWF0Y2hlc1swXTtcbn1cblxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKHN0YXR1cywgX3RlbXA0KSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZVxuICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcblxuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuXG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhIGBsb2FkZXJgIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRlZmVyLWFjdGlvblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiRm9yYmlkZGVuXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJSb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiIGRvZXMgbm90IG1hdGNoIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTm90IEZvdW5kXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJObyByb3V0ZSBtYXRjaGVzIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG5cbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYW4gYGFjdGlvbmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFxcXCJcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlKHN0YXR1cyB8fCA1MDAsIHN0YXR1c1RleHQsIG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpLCB0cnVlKTtcbn0gLy8gRmluZCBhbnkgcmV0dXJuZWQgcmVkaXJlY3QgZXJyb3JzLCBzdGFydGluZyBmcm9tIHRoZSBsb3dlc3QgbWF0Y2hcblxuXG5mdW5jdGlvbiBmaW5kUmVkaXJlY3QocmVzdWx0cykge1xuICBmb3IgKGxldCBpID0gcmVzdWx0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHBhdGgpIDogcGF0aDtcbiAgcmV0dXJuIGNyZWF0ZVBhdGgoX2V4dGVuZHMoe30sIHBhcnNlZFBhdGgsIHtcbiAgICBoYXNoOiBcIlwiXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggIT09IGIuaGFzaDtcbn1cblxuZnVuY3Rpb24gaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmRlZmVycmVkO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDtcbn1cblxuZnVuY3Rpb24gaXNSZXNwb25zZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5ib2R5ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0KSB7XG4gIGlmICghaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzUmVzcG9uc2Uob2JqLnJlc3BvbnNlKSAmJiAob2JqLnR5cGUgPT09IFJlc3VsdFR5cGUuZGF0YSB8fCBSZXN1bHRUeXBlLmVycm9yKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkUmVxdWVzdE1ldGhvZHMuaGFzKG1ldGhvZCk7XG59XG5cbmZ1bmN0aW9uIGlzTXV0YXRpb25NZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgc2lnbmFsLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXN1bHRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2luZGV4XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzVG9Mb2FkW2luZGV4XTtcbiAgICBsZXQgY3VycmVudE1hdGNoID0gY3VycmVudE1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IG1hdGNoLnJvdXRlLmlkKTtcbiAgICBsZXQgaXNSZXZhbGlkYXRpbmdMb2FkZXIgPSBjdXJyZW50TWF0Y2ggIT0gbnVsbCAmJiAhaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpICYmIChjdXJyZW50TG9hZGVyRGF0YSAmJiBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpICYmIChpc0ZldGNoZXIgfHwgaXNSZXZhbGlkYXRpbmdMb2FkZXIpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIGlzRmV0Y2hlcikudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSByZXN1bHQgfHwgcmVzdWx0c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCB1bndyYXApIHtcbiAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7XG4gICAgdW53cmFwID0gZmFsc2U7XG4gIH1cblxuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcblxuICBpZiAoYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh1bndyYXApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YVxuICB9O1xufVxuXG5mdW5jdGlvbiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoKSB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKFwiaW5kZXhcIikuc29tZSh2ID0+IHYgPT09IFwiXCIpO1xufSAvLyBOb3RlOiBUaGlzIHNob3VsZCBtYXRjaCB0aGUgZm9ybWF0IGV4cG9ydGVkIGJ5IHVzZU1hdGNoZXMsIHNvIGlmIHlvdSBjaGFuZ2Vcbi8vIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcblxuXG5mdW5jdGlvbiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobWF0Y2gsIGxvYWRlckRhdGEpIHtcbiAgbGV0IHtcbiAgICByb3V0ZSxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXNcbiAgfSA9IG1hdGNoO1xuICByZXR1cm4ge1xuICAgIGlkOiByb3V0ZS5pZCxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXMsXG4gICAgZGF0YTogbG9hZGVyRGF0YVtyb3V0ZS5pZF0sXG4gICAgaGFuZGxlOiByb3V0ZS5oYW5kbGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuXG4gIGlmIChtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuaW5kZXggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCB8fCBcIlwiKSkge1xuICAgIC8vIFJldHVybiB0aGUgbGVhZiBpbmRleCByb3V0ZSB3aGVuIGluZGV4IGlzIHByZXNlbnRcbiAgICByZXR1cm4gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9IC8vIE90aGVyd2lzZSBncmFiIHRoZSBkZWVwZXN0IFwicGF0aCBjb250cmlidXRpbmdcIiBtYXRjaCAoaWdub3JpbmcgaW5kZXggYW5kXG4gIC8vIHBhdGhsZXNzIGxheW91dCByb3V0ZXMpXG5cblxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufSAvLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgRXJyb3JSZXNwb25zZSwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIGFzIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGludmFyaWFudCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpvaW5QYXRocywganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgbm9ybWFsaXplUGF0aG5hbWUsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoLCByZXNvbHZlVG8sIHN0cmlwQmFzZW5hbWUsIHdhcm5pbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni44LjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIFJvdXRlciwgY3JlYXRlUGF0aCwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgdXNlTmF2aWdhdGUsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIHVuc3RhYmxlX3VzZUJsb2NrZXIsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdW5zdGFibGVfdXNlQmxvY2tlciwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBFcnJvclJlc3BvbnNlLCBpbnZhcmlhbnQsIGpvaW5QYXRocyB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICA7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBpbml0aWFsaXplci5cbiAqXG4gKiBUaGlzIGlzIGlkZW50aWNhbCB0byBgbmV3IFVSTFNlYXJjaFBhcmFtcyhpbml0KWAgZXhjZXB0IGl0IGFsc29cbiAqIHN1cHBvcnRzIGFycmF5cyBhcyB2YWx1ZXMgaW4gdGhlIG9iamVjdCBmb3JtIG9mIHRoZSBpbml0aWFsaXplclxuICogaW5zdGVhZCBvZiBqdXN0IHN0cmluZ3MuIFRoaXMgaXMgY29udmVuaWVudCB3aGVuIHlvdSBuZWVkIG11bHRpcGxlXG4gKiB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5LCBidXQgZG9uJ3Qgd2FudCB0byB1c2UgYW4gYXJyYXkgaW5pdGlhbGl6ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluc3RlYWQgb2Y6XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhbXG4gKiAgICAgWydzb3J0JywgJ25hbWUnXSxcbiAqICAgICBbJ3NvcnQnLCAncHJpY2UnXVxuICogICBdKTtcbiAqXG4gKiB5b3UgY2FuIGRvOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh7XG4gKiAgICAgc29ydDogWyduYW1lJywgJ3ByaWNlJ11cbiAqICAgfSk7XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuXG4gIGlmIChkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpKSB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBkZWZhdWx0QWN0aW9uLCBvcHRpb25zKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG5cbiAgaWYgKGlzRm9ybUVsZW1lbnQodGFyZ2V0KSkge1xuICAgIGxldCBzdWJtaXNzaW9uVHJpZ2dlciA9IG9wdGlvbnMuc3VibWlzc2lvblRyaWdnZXI7XG4gICAgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIikgfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG5cbiAgICBpZiAoc3VibWlzc2lvblRyaWdnZXIgJiYgc3VibWlzc2lvblRyaWdnZXIubmFtZSkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUsIHN1Ym1pc3Npb25UcmlnZ2VyLnZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuXG4gICAgaWYgKGZvcm0gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN1Ym1pdCBhIDxidXR0b24+IG9yIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiPiB3aXRob3V0IGEgPGZvcm0+XCIpO1xuICAgIH0gLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG5cblxuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIikgfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtZW5jdHlwZVwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7IC8vIEluY2x1ZGUgbmFtZSArIHZhbHVlIGZyb20gYSA8YnV0dG9uPiwgYXBwZW5kaW5nIGluIGNhc2UgdGhlIGJ1dHRvbiBuYW1lXG4gICAgLy8gbWF0Y2hlcyBhbiBleGlzdGluZyBpbnB1dCBuYW1lXG5cbiAgICBpZiAodGFyZ2V0Lm5hbWUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCh0YXJnZXQubmFtZSwgdGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNIdG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN1Ym1pdCBlbGVtZW50IHRoYXQgaXMgbm90IDxmb3JtPiwgPGJ1dHRvbj4sIG9yIFwiICsgXCI8aW5wdXQgdHlwZT1cXFwic3VibWl0fGltYWdlXFxcIj5cIik7XG4gIH0gZWxzZSB7XG4gICAgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCBkZWZhdWx0QWN0aW9uO1xuICAgIGVuY1R5cGUgPSBvcHRpb25zLmVuY1R5cGUgfHwgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgIGZvcm1EYXRhID0gdGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgICAgIGZvciAobGV0IFtuYW1lLCB2YWx1ZV0gb2YgdGFyZ2V0KSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHRhcmdldCkpIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdGFyZ2V0W25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCB7XG4gICAgcHJvdG9jb2wsXG4gICAgaG9zdFxuICB9ID0gd2luZG93LmxvY2F0aW9uO1xuICBsZXQgdXJsID0gbmV3IFVSTChhY3Rpb24sIHByb3RvY29sICsgXCIvL1wiICsgaG9zdCk7XG4gIHJldHVybiB7XG4gICAgdXJsLFxuICAgIG1ldGhvZDogbWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YVxuICB9O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsYXRpdmVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcInRhcmdldFwiLCBcInRvXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl0sXG4gICAgICBfZXhjbHVkZWQzID0gW1wicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJmZXRjaGVyS2V5XCIsIFwicm91dGVJZFwiLCBcInJlbGF0aXZlXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCJdO1xuLy8jcmVnaW9uIFJvdXRlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXM6IFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcylcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgaGlzdG9yeTogY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlczogVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKVxuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSHlkcmF0aW9uRGF0YSgpIHtcbiAgdmFyIF93aW5kb3c7XG5cbiAgbGV0IHN0YXRlID0gKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTtcblxuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhlcnJvcnMpIHtcbiAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsO1xuICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7XG4gIGxldCBzZXJpYWxpemVkID0ge307XG5cbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBFcnJvclJlc3BvbnNlKHZhbC5zdGF0dXMsIHZhbC5zdGF0dXNUZXh0LCB2YWwuZGF0YSwgdmFsLmludGVybmFsID09PSB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIkVycm9yXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcih2YWwubWVzc2FnZSk7IC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuXG4gICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVkO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5cblxuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmMjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmMztcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjQsIHJlZikge1xuICBsZXQge1xuICAgIG9uQ2xpY2ssXG4gICAgcmVsYXRpdmUsXG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgdG8sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSBfcmVmNCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNCwgX2V4Y2x1ZGVkKTtcblxuICAvLyBgbG9jYXRpb25gIGlzIHRoZSB1bmFsdGVyZWQgaHJlZiB3ZSB3aWxsIHJlbmRlciBpbiB0aGUgPGE+IHRhZyBmb3IgYWJzb2x1dGUgVVJMc1xuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICBsZXQgaXNBYnNvbHV0ZSA9IC9eW2EteitdKzpcXC9cXC8vaS50ZXN0KGxvY2F0aW9uKSB8fCBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIik7IC8vIExvY2F0aW9uIHRvIHVzZSBpbiB0aGUgY2xpY2sgaGFuZGxlclxuXG4gIGxldCBuYXZpZ2F0aW9uTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcblxuICBpZiAoaXNCcm93c2VyICYmIGlzQWJzb2x1dGUpIHtcbiAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGxldCB0YXJnZXRVcmwgPSBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbikgOiBuZXcgVVJMKGxvY2F0aW9uKTtcblxuICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbikge1xuICAgICAgLy8gU3RyaXAgdGhlIHByb3RvY29sL29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgVVJMc1xuICAgICAgbmF2aWdhdGlvbkxvY2F0aW9uID0gdGFyZ2V0VXJsLnBhdGhuYW1lICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICB9XG4gIH0gLy8gYGhyZWZgIGlzIHdoYXQgd2UgcmVuZGVyIGluIHRoZSA8YT4gdGFnIGZvciByZWxhdGl2ZSBVUkxzXG5cblxuICBsZXQgaHJlZiA9IHVzZUhyZWYobmF2aWdhdGlvbkxvY2F0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKG5hdmlnYXRpb25Mb2NhdGlvbiwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGlzQWJzb2x1dGUgPyBsb2NhdGlvbiA6IGhyZWYsXG4gICAgICBvbkNsaWNrOiBpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmNSwgcmVmKSB7XG4gIGxldCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgZW5kID0gZmFsc2UsXG4gICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICB0byxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuXG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IHJlc3QucmVsYXRpdmVcbiAgfSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihwYXRoKS5wYXRobmFtZSA6IHBhdGgucGF0aG5hbWU7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcblxuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3Aoe1xuICAgICAgaXNBY3RpdmUsXG4gICAgICBpc1BlbmRpbmdcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG9cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuXG5cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cblxuY29uc3QgRm9ybUltcGwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjYsIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICBhY3Rpb24sXG4gICAgb25TdWJtaXQsXG4gICAgZmV0Y2hlcktleSxcbiAgICByb3V0ZUlkLFxuICAgIHJlbGF0aXZlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gX3JlZjYsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY2LCBfZXhjbHVkZWQzKTtcblxuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0SW1wbChmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgbGV0IGZvcm1NZXRob2QgPSBtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIiA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcbiAgbGV0IGZvcm1BY3Rpb24gPSB1c2VGb3JtQWN0aW9uKGFjdGlvbiwge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuXG4gIGxldCBzdWJtaXRIYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHN1Ym1pdHRlciA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBsZXQgc3VibWl0TWV0aG9kID0gKHN1Ym1pdHRlciA9PSBudWxsID8gdm9pZCAwIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikpIHx8IG1ldGhvZDtcbiAgICBzdWJtaXQoc3VibWl0dGVyIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQsIHtcbiAgICAgIG1ldGhvZDogc3VibWl0TWV0aG9kLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm1JbXBsLmRpc3BsYXlOYW1lID0gXCJGb3JtSW1wbFwiO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbihfcmVmNykge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfcmVmNztcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oe1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhvb2tzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbnZhciBEYXRhUm91dGVySG9vaztcblxuKGZ1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdEltcGxcIl0gPSBcInVzZVN1Ym1pdEltcGxcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xuXG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcblxuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyc1wiXSA9IFwidXNlRmV0Y2hlcnNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG5cbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuXG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PiAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIHJldHVybiB1c2VTdWJtaXRJbXBsKCk7XG59XG5cbmZ1bmN0aW9uIHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0SW1wbCk7XG4gIGxldCBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgdXJsXG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpO1xuICAgIGxldCBocmVmID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IG1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlOiBlbmNUeXBlXG4gICAgfTtcblxuICAgIGlmIChmZXRjaGVyS2V5KSB7XG4gICAgICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIHVzZUZldGNoZXIoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgcm91dGVJZCwgaHJlZiwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShocmVmLCBvcHRzKTtcbiAgICB9XG4gIH0sIFtkZWZhdWx0QWN0aW9uLCByb3V0ZXIsIGZldGNoZXJLZXksIHJvdXRlSWRdKTtcbn1cblxuZnVuY3Rpb24gdXNlRm9ybUFjdGlvbihhY3Rpb24sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGVDb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpOyAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG5cbiAgbGV0IHBhdGggPSBfZXh0ZW5kcyh7fSwgdXNlUmVzb2x2ZWRQYXRoKGFjdGlvbiA/IGFjdGlvbiA6IFwiLlwiLCB7XG4gICAgcmVsYXRpdmVcbiAgfSkpOyAvLyBQcmV2aW91c2x5IHdlIHNldCB0aGUgZGVmYXVsdCBhY3Rpb24gdG8gXCIuXCIuIFRoZSBwcm9ibGVtIHdpdGggdGhpcyBpcyB0aGF0XG4gIC8vIGB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpYCBleGNsdWRlcyBzZWFyY2ggcGFyYW1zIGFuZCB0aGUgaGFzaCBvZiB0aGUgcmVzb2x2ZWRcbiAgLy8gVVJMLiBUaGlzIGlzIHRoZSBpbnRlbmRlZCBiZWhhdmlvciBvZiB3aGVuIFwiLlwiIGlzIHNwZWNpZmljYWxseSBwcm92aWRlZCBhc1xuICAvLyB0aGUgZm9ybSBhY3Rpb24sIGJ1dCBpbmNvbnNpc3RlbnQgdy8gYnJvd3NlcnMgd2hlbiB0aGUgYWN0aW9uIGlzIG9taXR0ZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuXG5cbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcblxuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoZXNlIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICAvLyBvciBoYXNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDsgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIHRoZSBhdXRvbWF0aWNhbGx5XG4gICAgLy8gaW5zZXJ0ZWQgP2luZGV4IHBhcmFtIHNvIHdlIG1hdGNoIHRoZSB1c2VSZXNvbHZlZFBhdGggc2VhcmNoIGJlaGF2aW9yXG4gICAgLy8gd2hpY2ggd291bGQgbm90IGluY2x1ZGUgP2luZGV4XG5cbiAgICBpZiAobWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cblxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH0gLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuXG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpIHtcbiAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgcm91dGVJZDogcm91dGVJZFxuICAgIH0pKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgfVxuXG4gIHJldHVybiBGZXRjaGVyRm9ybTtcbn1cblxubGV0IGZldGNoZXJJZCA9IDA7XG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5cbmZ1bmN0aW9uIHVzZUZldGNoZXIoKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcblxuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbZmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBTdHJpbmcoKytmZXRjaGVySWQpKTtcbiAgbGV0IFtGb3JtXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5Gb3JtKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgfSk7XG4gIGxldCBbbG9hZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBocmVmID0+IHtcbiAgICAhcm91dGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlciBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmKTtcbiAgfSk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICBsZXQgZmV0Y2hlciA9IHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyKSwgW2ZldGNoZXIsIEZvcm0sIHN1Ym1pdCwgbG9hZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIElzIHRoaXMgYnVzdGVkIHdoZW4gdGhlIFJlYWN0IHRlYW0gZ2V0cyByZWFsIHdlaXJkIGFuZCBjYWxscyBlZmZlY3RzXG4gICAgLy8gdHdpY2Ugb24gbW91bnQ/ICBXZSByZWFsbHkganVzdCBuZWVkIHRvIGdhcmJhZ2UgY29sbGVjdCBoZXJlIHdoZW4gdGhpc1xuICAgIC8vIGZldGNoZXIgaXMgbm8gbG9uZ2VyIGFyb3VuZC5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFyb3V0ZXIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTm8gZmV0Y2hlciBhdmFpbGFibGUgdG8gY2xlYW4gdXAgZnJvbSB1c2VGZXRjaGVyKClcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhbGwgZmV0Y2hlcnMgY3VycmVudGx5IG9uIHRoZSBwYWdlLiBVc2VmdWwgZm9yIGxheW91dHMgYW5kIHBhcmVudFxuICogcm91dGVzIHRoYXQgbmVlZCB0byBwcm92aWRlIHBlbmRpbmcvb3B0aW1pc3RpYyBVSSByZWdhcmRpbmcgdGhlIGZldGNoLlxuICovXG5cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBbLi4uc3RhdGUuZmV0Y2hlcnMudmFsdWVzKCldO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cblxuZnVuY3Rpb24gdXNlU2Nyb2xsUmVzdG9yYXRpb24oX3RlbXAzKSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7IC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7IC8vIFNhdmUgcG9zaXRpb25zIG9uIHBhZ2VoaWRlXG5cbiAgdXNlUGFnZUhpZGUoUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChuYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgbGV0IGtleSA9IChnZXRLZXkgPyBnZXRLZXkobG9jYXRpb24sIG1hdGNoZXMpIDogbnVsbCkgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgIH1cblxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7IC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSk7XG5cbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTsgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG5cbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5KTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgZ2V0S2V5XSk7IC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcblxuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGJlZW4gaGVyZSBiZWZvcmUsIHNjcm9sbCB0byBpdFxuXG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHRyeSB0byBzY3JvbGwgdG8gdGhlIGhhc2hcblxuXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2NhdGlvbi5oYXNoLnNsaWNlKDEpKTtcblxuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSAvLyBEb24ndCByZXNldCBpZiB0aGlzIG5hdmlnYXRpb24gb3B0ZWQgb3V0XG5cblxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIG90aGVyd2lzZSBnbyB0byB0aGUgdG9wIG9uIG5ldyBsb2NhdGlvbnNcblxuXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5cblxuZnVuY3Rpb24gdXNlUHJvbXB0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgd2hlbixcbiAgICBtZXNzYWdlXG4gIH0gPSBfcmVmODtcbiAgbGV0IGJsb2NrZXIgPSB1bnN0YWJsZV91c2VCbG9ja2VyKHdoZW4pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG5cbiAgICAgIGlmIChwcm9jZWVkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoYmxvY2tlci5wcm9jZWVkLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtibG9ja2VyLCBtZXNzYWdlXSk7XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFV0aWxzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufSAvLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgRm9ybSwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgU2Nyb2xsUmVzdG9yYXRpb24sIHVzZVNjcm9sbFJlc3RvcmF0aW9uIGFzIFVOU0FGRV91c2VTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZVByb21wdCBhcyB1bnN0YWJsZV91c2VQcm9tcHQsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIHY2LjguMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyBpbnZhcmlhbnQsIGpvaW5QYXRocywgbWF0Y2hQYXRoLCBVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMsIHdhcm5pbmcsIHJlc29sdmVUbywgcGFyc2VQYXRoLCBtYXRjaFJvdXRlcywgQWN0aW9uLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgc3RyaXBCYXNlbmFtZSwgQWJvcnRlZERlZmVycmVkRXJyb3IsIGNyZWF0ZVJvdXRlciB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsIGNyZWF0ZVBhdGgsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZXNvbHZlUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5cbmZ1bmN0aW9uIGlzUG9seWZpbGwoeCwgeSkge1xuICByZXR1cm4geCA9PT0geSAmJiAoeCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkpIHx8IHggIT09IHggJiYgeSAhPT0geSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICA7XG59XG5cbmNvbnN0IGlzID0gdHlwZW9mIE9iamVjdC5pcyA9PT0gXCJmdW5jdGlvblwiID8gT2JqZWN0LmlzIDogaXNQb2x5ZmlsbDsgLy8gSW50ZW50aW9uYWxseSBub3QgdXNpbmcgbmFtZWQgaW1wb3J0cyBiZWNhdXNlIFJvbGx1cCB1c2VzIGR5bmFtaWNcbi8vIGRpc3BhdGNoIGZvciBDb21tb25KUyBpbnRlcm9wIG5hbWVkIGltcG9ydHMuXG5cbmNvbnN0IHtcbiAgdXNlU3RhdGUsXG4gIHVzZUVmZmVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0LFxuICB1c2VEZWJ1Z1ZhbHVlXG59ID0gUmVhY3Q7XG5sZXQgZGlkV2Fybk9sZDE4QWxwaGEgPSBmYWxzZTtcbmxldCBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IGZhbHNlOyAvLyBEaXNjbGFpbWVyOiBUaGlzIHNoaW0gYnJlYWtzIG1hbnkgb2YgdGhlIHJ1bGVzIG9mIFJlYWN0LCBhbmQgb25seSB3b3Jrc1xuLy8gYmVjYXVzZSBvZiBhIHZlcnkgcGFydGljdWxhciBzZXQgb2YgaW1wbGVtZW50YXRpb24gZGV0YWlscyBhbmQgYXNzdW1wdGlvbnNcbi8vIC0tIGNoYW5nZSBhbnkgb25lIG9mIHRoZW0gYW5kIGl0IHdpbGwgYnJlYWsuIFRoZSBtb3N0IGltcG9ydGFudCBhc3N1bXB0aW9uXG4vLyBpcyB0aGF0IHVwZGF0ZXMgYXJlIGFsd2F5cyBzeW5jaHJvbm91cywgYmVjYXVzZSBjb25jdXJyZW50IHJlbmRlcmluZyBpc1xuLy8gb25seSBhdmFpbGFibGUgaW4gdmVyc2lvbnMgb2YgUmVhY3QgdGhhdCBhbHNvIGhhdmUgYSBidWlsdC1pblxuLy8gdXNlU3luY0V4dGVybmFsU3RvcmUgQVBJLiBBbmQgd2Ugb25seSB1c2UgdGhpcyBzaGltIHdoZW4gdGhlIGJ1aWx0LWluIEFQSVxuLy8gZG9lcyBub3QgZXhpc3QuXG4vL1xuLy8gRG8gbm90IGFzc3VtZSB0aGF0IHRoZSBjbGV2ZXIgaGFja3MgdXNlZCBieSB0aGlzIGhvb2sgYWxzbyB3b3JrIGluIGdlbmVyYWwuXG4vLyBUaGUgcG9pbnQgb2YgdGhpcyBzaGltIGlzIHRvIHJlcGxhY2UgdGhlIG5lZWQgZm9yIGhhY2tzIGJ5IG90aGVyIGxpYnJhcmllcy5cblxuZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUkMihzdWJzY3JpYmUsIGdldFNuYXBzaG90LCAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mXG4vLyBSZWFjdCBkbyBub3QgZXhwb3NlIGEgd2F5IHRvIGNoZWNrIGlmIHdlJ3JlIGh5ZHJhdGluZy4gU28gdXNlcnMgb2YgdGhlIHNoaW1cbi8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuLy8gZnJvbSBgZ2V0U25hcHNob3RgLlxuZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghZGlkV2Fybk9sZDE4QWxwaGEpIHtcbiAgICAgIGlmIChcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0KSB7XG4gICAgICAgIGRpZFdhcm5PbGQxOEFscGhhID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBhcmUgdXNpbmcgYW4gb3V0ZGF0ZWQsIHByZS1yZWxlYXNlIGFscGhhIG9mIFJlYWN0IDE4IHRoYXQgXCIgKyBcImRvZXMgbm90IHN1cHBvcnQgdXNlU3luY0V4dGVybmFsU3RvcmUuIFRoZSBcIiArIFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgc2hpbSB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseS4gVXBncmFkZSBcIiArIFwidG8gYSBuZXdlciBwcmUtcmVsZWFzZS5cIik7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFJlYWQgdGhlIGN1cnJlbnQgc25hcHNob3QgZnJvbSB0aGUgc3RvcmUgb24gZXZlcnkgcmVuZGVyLiBBZ2FpbiwgdGhpc1xuICAvLyBicmVha3MgdGhlIHJ1bGVzIG9mIFJlYWN0LCBhbmQgb25seSB3b3JrcyBoZXJlIGJlY2F1c2Ugb2Ygc3BlY2lmaWNcbiAgLy8gaW1wbGVtZW50YXRpb24gZGV0YWlscywgbW9zdCBpbXBvcnRhbnRseSB0aGF0IHVwZGF0ZXMgYXJlXG4gIC8vIGFsd2F5cyBzeW5jaHJvbm91cy5cblxuXG4gIGNvbnN0IHZhbHVlID0gZ2V0U25hcHNob3QoKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCkge1xuICAgICAgY29uc3QgY2FjaGVkVmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gICAgICBpZiAoIWlzKHZhbHVlLCBjYWNoZWRWYWx1ZSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSByZXN1bHQgb2YgZ2V0U25hcHNob3Qgc2hvdWxkIGJlIGNhY2hlZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wXCIpO1xuICAgICAgICBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIEJlY2F1c2UgdXBkYXRlcyBhcmUgc3luY2hyb25vdXMsIHdlIGRvbid0IHF1ZXVlIHRoZW0uIEluc3RlYWQgd2UgZm9yY2UgYVxuICAvLyByZS1yZW5kZXIgd2hlbmV2ZXIgdGhlIHN1YnNjcmliZWQgc3RhdGUgY2hhbmdlcyBieSB1cGRhdGluZyBhbiBzb21lXG4gIC8vIGFyYml0cmFyeSB1c2VTdGF0ZSBob29rLiBUaGVuLCBkdXJpbmcgcmVuZGVyLCB3ZSBjYWxsIGdldFNuYXBzaG90IHRvIHJlYWRcbiAgLy8gdGhlIGN1cnJlbnQgdmFsdWUuXG4gIC8vXG4gIC8vIEJlY2F1c2Ugd2UgZG9uJ3QgYWN0dWFsbHkgdXNlIHRoZSBzdGF0ZSByZXR1cm5lZCBieSB0aGUgdXNlU3RhdGUgaG9vaywgd2VcbiAgLy8gY2FuIHNhdmUgYSBiaXQgb2YgbWVtb3J5IGJ5IHN0b3Jpbmcgb3RoZXIgc3R1ZmYgaW4gdGhhdCBzbG90LlxuICAvL1xuICAvLyBUbyBpbXBsZW1lbnQgdGhlIGVhcmx5IGJhaWxvdXQsIHdlIG5lZWQgdG8gdHJhY2sgc29tZSB0aGluZ3Mgb24gYSBtdXRhYmxlXG4gIC8vIG9iamVjdC4gVXN1YWxseSwgd2Ugd291bGQgcHV0IHRoYXQgaW4gYSB1c2VSZWYgaG9vaywgYnV0IHdlIGNhbiBzdGFzaCBpdCBpblxuICAvLyBvdXIgdXNlU3RhdGUgaG9vayBpbnN0ZWFkLlxuICAvL1xuICAvLyBUbyBmb3JjZSBhIHJlLXJlbmRlciwgd2UgY2FsbCBmb3JjZVVwZGF0ZSh7aW5zdH0pLiBUaGF0IHdvcmtzIGJlY2F1c2UgdGhlXG4gIC8vIG5ldyBvYmplY3QgYWx3YXlzIGZhaWxzIGFuIGVxdWFsaXR5IGNoZWNrLlxuXG5cbiAgY29uc3QgW3tcbiAgICBpbnN0XG4gIH0sIGZvcmNlVXBkYXRlXSA9IHVzZVN0YXRlKHtcbiAgICBpbnN0OiB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGdldFNuYXBzaG90XG4gICAgfVxuICB9KTsgLy8gVHJhY2sgdGhlIGxhdGVzdCBnZXRTbmFwc2hvdCBmdW5jdGlvbiB3aXRoIGEgcmVmLiBUaGlzIG5lZWRzIHRvIGJlIHVwZGF0ZWRcbiAgLy8gaW4gdGhlIGxheW91dCBwaGFzZSBzbyB3ZSBjYW4gYWNjZXNzIGl0IGR1cmluZyB0aGUgdGVhcmluZyBjaGVjayB0aGF0XG4gIC8vIGhhcHBlbnMgb24gc3Vic2NyaWJlLlxuXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaW5zdC52YWx1ZSA9IHZhbHVlO1xuICAgIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDsgLy8gV2hlbmV2ZXIgZ2V0U25hcHNob3Qgb3Igc3Vic2NyaWJlIGNoYW5nZXMsIHdlIG5lZWQgdG8gY2hlY2sgaW4gdGhlXG4gICAgLy8gY29tbWl0IHBoYXNlIGlmIHRoZXJlIHdhcyBhbiBpbnRlcmxlYXZlZCBtdXRhdGlvbi4gSW4gY29uY3VycmVudCBtb2RlXG4gICAgLy8gdGhpcyBjYW4gaGFwcGVuIGFsbCB0aGUgdGltZSwgYnV0IGV2ZW4gaW4gc3luY2hyb25vdXMgbW9kZSwgYW4gZWFybGllclxuICAgIC8vIGVmZmVjdCBtYXkgaGF2ZSBtdXRhdGVkIHRoZSBzdG9yZS5cblxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgfSwgW3N1YnNjcmliZSwgdmFsdWUsIGdldFNuYXBzaG90XSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgcmlnaHQgYmVmb3JlIHN1YnNjcmliaW5nLiBTdWJzZXF1ZW50IGNoYW5nZXMgd2lsbCBiZVxuICAgIC8vIGRldGVjdGVkIGluIHRoZSBzdWJzY3JpcHRpb24gaGFuZGxlci5cbiAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgICBmb3JjZVVwZGF0ZSh7XG4gICAgICAgIGluc3RcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZVN0b3JlQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgLy8gVE9ETzogQmVjYXVzZSB0aGVyZSBpcyBubyBjcm9zcy1yZW5kZXJlciBBUEkgZm9yIGJhdGNoaW5nIHVwZGF0ZXMsIGl0J3NcbiAgICAgIC8vIHVwIHRvIHRoZSBjb25zdW1lciBvZiB0aGlzIGxpYnJhcnkgdG8gd3JhcCB0aGVpciBzdWJzY3JpcHRpb24gZXZlbnRcbiAgICAgIC8vIHdpdGggdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMuIFNob3VsZCB3ZSB0cnkgdG8gZGV0ZWN0IHdoZW4gdGhpcyBpc24ndFxuICAgICAgLy8gdGhlIGNhc2UgYW5kIHByaW50IGEgd2FybmluZyBpbiBkZXZlbG9wbWVudD9cbiAgICAgIC8vIFRoZSBzdG9yZSBjaGFuZ2VkLiBDaGVjayBpZiB0aGUgc25hcHNob3QgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHdlXG4gICAgICAvLyByZWFkIGZyb20gdGhlIHN0b3JlLlxuICAgICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgICBpbnN0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07IC8vIFN1YnNjcmliZSB0byB0aGUgc3RvcmUgYW5kIHJldHVybiBhIGNsZWFuLXVwIGZ1bmN0aW9uLlxuXG5cbiAgICByZXR1cm4gc3Vic2NyaWJlKGhhbmRsZVN0b3JlQ2hhbmdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbc3Vic2NyaWJlXSk7XG4gIHVzZURlYnVnVmFsdWUodmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkge1xuICBjb25zdCBsYXRlc3RHZXRTbmFwc2hvdCA9IGluc3QuZ2V0U25hcHNob3Q7XG4gIGNvbnN0IHByZXZWYWx1ZSA9IGluc3QudmFsdWU7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBuZXh0VmFsdWUgPSBsYXRlc3RHZXRTbmFwc2hvdCgpO1xuICAgIHJldHVybiAhaXMocHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUkMShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mXG4gIC8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuICAvLyB3aWxsIG5lZWQgdG8gdHJhY2sgdGhhdCB0aGVtc2VsdmVzIGFuZCByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWVcbiAgLy8gZnJvbSBgZ2V0U25hcHNob3RgLlxuICByZXR1cm4gZ2V0U25hcHNob3QoKTtcbn1cblxuLyoqXG4gKiBJbmxpbmVkIGludG8gdGhlIHJlYWN0LXJvdXRlciByZXBvIHNpbmNlIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlIGRvZXMgbm90XG4gKiBwcm92aWRlIGEgVU1ELWNvbXBhdGlibGUgcGFja2FnZSwgc28gd2UgbmVlZCB0aGlzIHRvIGJlIGFibGUgdG8gZGlzdHJpYnV0ZVxuICogVU1EIHJlYWN0LXJvdXRlciBidW5kbGVzXG4gKi9cbmNvbnN0IGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIpO1xuY29uc3QgaXNTZXJ2ZXJFbnZpcm9ubWVudCA9ICFjYW5Vc2VET007XG5jb25zdCBzaGltID0gaXNTZXJ2ZXJFbnZpcm9ubWVudCA/IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDEgOiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyO1xuY29uc3QgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBcInVzZVN5bmNFeHRlcm5hbFN0b3JlXCIgaW4gUmVhY3QgPyAobW9kdWxlID0+IG1vZHVsZS51c2VTeW5jRXh0ZXJuYWxTdG9yZSkoUmVhY3QpIDogc2hpbTtcblxuY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuXG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclN0YXRlXCI7XG59XG5cbmNvbnN0IEF3YWl0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuY29uc3QgTmF2aWdhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuXG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMb2NhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkxvY2F0aW9uXCI7XG59XG5cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXVxufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuXG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlRXJyb3JDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZUVycm9yXCI7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWhyZWZcbiAqL1xuXG5mdW5jdGlvbiB1c2VIcmVmKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lOyAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRobmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYSA8Um91dGVyPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cblxuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBcIllvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIFwiICsgXCJ5b3VyIGNvbXBvbmVudCBpcyBmaXJzdCByZW5kZXJlZC5cIikgOiB2b2lkIDA7XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgbmF2aWdhdG9yLmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCBvcHRpb25zLnJlbGF0aXZlID09PSBcInBhdGhcIik7IC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5LiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiB3ZVxuICAgIC8vIG5hdmlnYXRlIHRvIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGxcbiAgICAvLyBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gICAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gICAgfVxuXG4gICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkocGF0aCwgb3B0aW9ucy5zdGF0ZSwgb3B0aW9ucyk7XG4gIH0sIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWVdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0LWNvbnRleHRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuIFVzZWQgaW50ZXJuYWxseSBieSA8T3V0bGV0PiB0byByZW5kZXIgY2hpbGQgcm91dGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuXG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG5cbiAgcmV0dXJuIG91dGxldDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5cbmZ1bmN0aW9uIHVzZVJlc29sdmVkUGF0aCh0bywgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIiksIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiA8T3V0bGV0PiB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBkYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcblxuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIGA8Um91dGVzIGxvY2F0aW9uPmAgb3IgYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKWAsIFwiICsgXCJ0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgXCIgKyAoXCJtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFxcXCJcIiArIHBhcmVudFBhdGhuYW1lQmFzZSArIFwiXFxcIiBcIikgKyAoXCJidXQgcGF0aG5hbWUgXFxcIlwiICsgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUgKyBcIlxcXCIgd2FzIGdpdmVuIGluIHRoZSBgbG9jYXRpb25gIHByb3AuXCIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cblxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQsIFwiTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQuIFwiICsgXCJUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIG51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzICYmIG1hdGNoZXMubWFwKG1hdGNoID0+IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGVDb250ZXh0IHx8IHVuZGVmaW5lZCk7IC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuXG5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGxvY2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgIGtleTogXCJkZWZhdWx0XCJcbiAgICAgICAgfSwgbG9jYXRpb24pLFxuICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcFxuICAgICAgfVxuICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JFbGVtZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBkZXZJbmZvID0gbnVsbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgZGV2SW5mbyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJcXHVEODNEXFx1RENCRiBIZXkgZGV2ZWxvcGVyIFxcdUQ4M0RcXHVEQzRCXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnMgYnkgcHJvdmlkaW5nIHlvdXIgb3duXFx4QTBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3BzIG9uXFx4QTBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCI8Um91dGU+XCIpKSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgbnVsbCwgXCJVbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yIVwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSwgbWVzc2FnZSksIHN0YWNrID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIiwge1xuICAgIHN0eWxlOiBwcmVTdHlsZXNcbiAgfSwgc3RhY2spIDogbnVsbCwgZGV2SW5mbyk7XG59XG5cbmNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgZXJyb3I6IHByb3BzLmVycm9yXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IGVycm9yXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb25cbiAgICAgIH07XG4gICAgfSAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvciB8fCBzdGF0ZS5lcnJvcixcbiAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvblxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmVycm9yID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yb3V0ZUNvbnRleHRcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZXJyb3IsXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICB9KSkgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgcm91dGVDb250ZXh0LFxuICAgIG1hdGNoLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTsgLy8gVHJhY2sgaG93IGRlZXAgd2UgZ290IGluIG91ciByZW5kZXIgcGFzcyB0byBlbXVsYXRlIFNTUiBjb21wb25lbnREaWRDYXRjaFxuICAvLyBpbiBhIERhdGFTdGF0aWNSb3V0ZXJcblxuICBpZiAoZGF0YVJvdXRlckNvbnRleHQgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQgJiYgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50KSB7XG4gICAgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCA9IG1hdGNoLnJvdXRlLmlkO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3V0ZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUpIHtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuXG4gIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlICE9IG51bGwgJiYgZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IG1hdGNoZXM7IC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuXG4gIGxldCBlcnJvcnMgPSBkYXRhUm91dGVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGFSb3V0ZXJTdGF0ZS5lcnJvcnM7XG5cbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCAmJiAoZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbS5yb3V0ZS5pZF0pKTtcbiAgICAhKGVycm9ySW5kZXggPj0gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgdGhlIGN1cnJlbnQgZXJyb3JzOiBcIiArIGVycm9ycykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSkpO1xuICB9XG5cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBsZXQgZXJyb3IgPSBtYXRjaC5yb3V0ZS5pZCA/IGVycm9ycyA9PSBudWxsID8gdm9pZCAwIDogZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA6IG51bGw7IC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnNcblxuICAgIGxldCBlcnJvckVsZW1lbnQgPSBkYXRhUm91dGVyU3RhdGUgPyBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yRWxlbWVudCwgbnVsbCkgOiBudWxsO1xuICAgIGxldCBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpO1xuXG4gICAgbGV0IGdldENoaWxkcmVuID0gKCkgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyZWRSb3V0ZSwge1xuICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldCxcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfVxuICAgIH0sIGVycm9yID8gZXJyb3JFbGVtZW50IDogbWF0Y2gucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkID8gbWF0Y2gucm91dGUuZWxlbWVudCA6IG91dGxldCk7IC8vIE9ubHkgd3JhcCBpbiBhbiBlcnJvciBib3VuZGFyeSB3aXRoaW4gZGF0YSByb3V0ZXIgdXNhZ2VzIHdoZW4gd2UgaGF2ZSBhblxuICAgIC8vIGVycm9yRWxlbWVudCBvbiB0aGlzIHJvdXRlLiAgT3RoZXJ3aXNlIGxldCBpdCBidWJibGUgdXAgdG8gYW4gYW5jZXN0b3JcbiAgICAvLyBlcnJvckVsZW1lbnRcblxuXG4gICAgcmV0dXJuIGRhdGFSb3V0ZXJTdGF0ZSAmJiAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckVycm9yQm91bmRhcnksIHtcbiAgICAgIGxvY2F0aW9uOiBkYXRhUm91dGVyU3RhdGUubG9jYXRpb24sXG4gICAgICBjb21wb25lbnQ6IGVycm9yRWxlbWVudCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNoaWxkcmVuOiBnZXRDaGlsZHJlbigpLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldDogbnVsbCxcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xuXG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcblxuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VMb2FkZXJEYXRhXCJdID0gXCJ1c2VMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VBY3Rpb25EYXRhXCJdID0gXCJ1c2VBY3Rpb25EYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUVycm9yXCJdID0gXCJ1c2VSb3V0ZUVycm9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0aW9uXCJdID0gXCJ1c2VOYXZpZ2F0aW9uXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUxvYWRlckRhdGFcIl0gPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTWF0Y2hlc1wiXSA9IFwidXNlTWF0Y2hlc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcblxuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcm91dGU7XG59XG5cbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICF0aGlzUm91dGUucm91dGUuaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGhvb2tOYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cblxuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4ge1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2hlcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzLFxuICAgIGxvYWRlckRhdGFcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXMpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcChtYXRjaCA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IG1hdGNoOyAvLyBOb3RlOiBUaGlzIHN0cnVjdHVyZSBtYXRjaGVzIHRoYXQgY3JlYXRlZCBieSBjcmVhdGVVc2VNYXRjaGVzTWF0Y2hcbiAgICAvLyBpbiB0aGUgQHJlbWl4LXJ1bi9yb3V0ZXIgLCBzbyBpZiB5b3UgY2hhbmdlIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlXG4gICAgLy8gdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBtYXRjaC5yb3V0ZS5pZCxcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgcGFyYW1zLFxuICAgICAgZGF0YTogbG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0sXG4gICAgICBoYW5kbGU6IG1hdGNoLnJvdXRlLmhhbmRsZVxuICAgIH07XG4gIH0pLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXIgZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgbG9hZGVyXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcblxuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VBY3Rpb25EYXRhIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcblxuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTsgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuXG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG5cblxuICByZXR1cm4gKF9zdGF0ZSRlcnJvcnMgPSBzdGF0ZS5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZXJyb3JzW3JvdXRlSWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn0gLy8gdXNlQmxvY2tlcigpIGlzIGEgc2luZ2xldG9uIGZvciBub3cgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhbnkgY29tcGVsbGluZyB1c2Vcbi8vIGNhc2VzIGZvciBtdWx0aS1ibG9ja2VyIHlldFxuXG5sZXQgYmxvY2tlcktleSA9IFwiYmxvY2tlci1zaW5nbGV0b25cIjtcbi8qKlxuICogQWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvIGJsb2NrIG5hdmlnYXRpb25zIHdpdGhpbiB0aGUgU1BBIGFuZCBwcmVzZW50IHRoZVxuICogdXNlciBhIGNvbmZpcm1hdGlvbiBkaWFsb2cgdG8gY29uZmlybSB0aGUgbmF2aWdhdGlvbi4gIE1vc3RseSB1c2VkIHRvIGF2b2lkXG4gKiB1c2luZyBoYWxmLWZpbGxlZCBmb3JtIGRhdGEuICBUaGlzIGRvZXMgbm90IGhhbmRsZSBoYXJkLXJlbG9hZHMgb3JcbiAqIGNyb3NzLW9yaWdpbiBuYXZpZ2F0aW9ucy5cbiAqL1xuXG5mdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZ3MgPT4ge1xuICAgIHJldHVybiB0eXBlb2Ygc2hvdWxkQmxvY2sgPT09IFwiZnVuY3Rpb25cIiA/ICEhc2hvdWxkQmxvY2soYXJncykgOiAhIXNob3VsZEJsb2NrO1xuICB9LCBbc2hvdWxkQmxvY2tdKTtcbiAgbGV0IGJsb2NrZXIgPSByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pOyAvLyBDbGVhbnVwIG9uIHVubW91bnRcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSksIFtyb3V0ZXJdKTtcbiAgcmV0dXJuIGJsb2NrZXI7XG59XG5jb25zdCBhbHJlYWR5V2FybmVkID0ge307XG5cbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlclxuICB9ID0gX3JlZjtcbiAgLy8gU3luYyByb3V0ZXIgc3RhdGUgdG8gb3VyIGNvbXBvbmVudCBzdGF0ZSB0byBmb3JjZSByZS1yZW5kZXJzXG4gIGxldCBzdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKHJvdXRlci5zdWJzY3JpYmUsICgpID0+IHJvdXRlci5zdGF0ZSwgLy8gV2UgaGF2ZSB0byBwcm92aWRlIHRoaXMgc28gUmVhY3RAMTggZG9lc24ndCBjb21wbGFpbiBkdXJpbmcgaHlkcmF0aW9uLFxuICAvLyBidXQgd2UgcGFzcyBvdXIgc2VyaWFsaXplZCBoeWRyYXRpb24gZGF0YSBpbnRvIHRoZSByb3V0ZXIgc28gc3RhdGUgaGVyZVxuICAvLyBpcyBhbHJlYWR5IHN5bmNlZCB3aXRoIHdoYXQgdGhlIHNlcnZlciBzYXdcbiAgKCkgPT4gcm91dGVyLnN0YXRlKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiOyAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgcm91dGVyLFxuICAgICAgbmF2aWdhdG9yLFxuICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgIC8vIERvIHdlIG5lZWQgdGhpcz9cbiAgICAgIGJhc2VuYW1lXG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiByb3V0ZXIuYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHJvdXRlci5zdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogcm91dGVyLnN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3JcbiAgfSwgcm91dGVyLnN0YXRlLmluaXRpYWxpemVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVzLCBudWxsKSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXItY29tcG9uZW50cy9tZW1vcnktcm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleFxuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleCxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMykge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWYzO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIVJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQXZvaWQga2lja2luZyBvZmYgbXVsdGlwbGUgbmF2aWdhdGlvbnMgaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhXG4gICAgLy8gZGF0YS1yb3V0ZXIgbmF2aWdhdGlvbiwgc2luY2UgY29tcG9uZW50cyBnZXQgcmUtcmVuZGVyZWQgd2hlbiB3ZSBlbnRlclxuICAgIC8vIGEgc3VibWl0dGluZy9sb2FkaW5nIHN0YXRlXG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBkYXRhUm91dGVyU3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgcmVsYXRpdmVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQSA8Um91dGU+IGlzIG9ubHkgZXZlciB0byBiZSB1c2VkIGFzIHRoZSBjaGlsZCBvZiA8Um91dGVzPiBlbGVtZW50LCBcIiArIFwibmV2ZXIgcmVuZGVyZWQgZGlyZWN0bHkuIFBsZWFzZSB3cmFwIHlvdXIgPFJvdXRlPiBpbiBhIDxSb3V0ZXM+LlwiKSA6IGludmFyaWFudChmYWxzZSkgO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj5cbiAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNCkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNDtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3BcbiAgfSksIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb24gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2gsXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuXG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfVxuICB9KSk7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjU7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOyAvLyBXaGVuIGluIGEgRGF0YVJvdXRlckNvbnRleHQgX3dpdGhvdXRfIGNoaWxkcmVuLCB3ZSB1c2UgdGhlIHJvdXRlciByb3V0ZXNcbiAgLy8gZGlyZWN0bHkuICBJZiB3ZSBoYXZlIGNoaWxkcmVuLCB0aGVuIHdlJ3JlIGluIGEgZGVzY2VuZGFudCB0cmVlIGFuZCB3ZVxuICAvLyBuZWVkIHRvIHVzZSBjaGlsZCByb3V0ZXMuXG5cbiAgbGV0IHJvdXRlcyA9IGRhdGFSb3V0ZXJDb250ZXh0ICYmICFjaGlsZHJlbiA/IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yb3V0ZXMgOiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICByZXR1cm4gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pO1xufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjY7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cztcblxuKGZ1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG59KShBd2FpdFJlbmRlclN0YXR1cyB8fCAoQXdhaXRSZW5kZXJTdGF0dXMgPSB7fSkpO1xuXG5jb25zdCBuZXZlclNldHRsZWRQcm9taXNlID0gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuXG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuXG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZS5fdHJhY2tlZCkge1xuICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50c1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBzdGF0dXMgPSBwcm9taXNlLl9lcnJvciAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9IC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuXG5cbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIDxBd2FpdD5cbiAqL1xuXG5cbmZ1bmN0aW9uIFJlc29sdmVBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNztcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB0b1JlbmRlcik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cblxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCBwYXJlbnRQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJbXCIgKyAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lKSArIFwiXSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZVxuICAgIH07XG5cbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIFdhbGsgdGhlIHJvdXRlIHRyZWUgYW5kIGFkZCBoYXNFcnJvckJvdW5kYXJ5IGlmIGl0J3Mgbm90IHByb3ZpZGVkLCBzbyB0aGF0XG4gKiB1c2VycyBwcm92aWRpbmcgbWFudWFsIHJvdXRlIGFycmF5cyBjYW4ganVzdCBzcGVjaWZ5IGVycm9yRWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKSB7XG4gIHJldHVybiByb3V0ZXMubWFwKHJvdXRlID0+IHtcbiAgICBsZXQgcm91dGVDbG9uZSA9IF9leHRlbmRzKHt9LCByb3V0ZSk7XG5cbiAgICBpZiAocm91dGVDbG9uZS5oYXNFcnJvckJvdW5kYXJ5ID09IG51bGwpIHtcbiAgICAgIHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9IHJvdXRlQ2xvbmUuZXJyb3JFbGVtZW50ICE9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlQ2xvbmUuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlQ2xvbmUuY2hpbGRyZW4gPSBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlQ2xvbmUuY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZUNsb25lO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxJbmRleFxuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXM6IGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKVxuICB9KS5pbml0aWFsaXplKCk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyBhcyBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cywgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIHJlbmRlck1hdGNoZXMsIHVzZUJsb2NrZXIgYXMgdW5zdGFibGVfdXNlQmxvY2tlciwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiJFR5cGVFcnJvciIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcmd1bWVudCIsImlzQ29uc3RydWN0b3IiLCIkU3RyaW5nIiwiU3RyaW5nIiwid2VsbEtub3duU3ltYm9sIiwiY3JlYXRlIiwiZGVmaW5lUHJvcGVydHkiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJ1bmRlZmluZWQiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSIsImtleSIsImNoYXJBdCIsIlMiLCJpbmRleCIsInVuaWNvZGUiLCJsZW5ndGgiLCJpc1Byb3RvdHlwZU9mIiwiaXQiLCJQcm90b3R5cGUiLCJpc09iamVjdCIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJmYWlscyIsImJ1ZmZlciIsIk9iamVjdCIsImlzRXh0ZW5zaWJsZSIsIk5BTUUiLCJDb25zdHJ1Y3RvciIsIk5BVElWRV9BUlJBWV9CVUZGRVIiLCJERVNDUklQVE9SUyIsImdsb2JhbCIsImhhc093biIsImNsYXNzb2YiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJkZWZpbmVCdWlsdEluIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsInVpZCIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZ2V0IiwiSW50OEFycmF5IiwiSW50OEFycmF5UHJvdG90eXBlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSIsIlR5cGVkQXJyYXkiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiVE9fU1RSSU5HX1RBRyIsIlRZUEVEX0FSUkFZX1RBRyIsIlRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SIiwiTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyIsIm9wZXJhIiwiVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QiLCJVaW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yIiwicHJvdG8iLCJzdGF0ZSIsImlzVHlwZWRBcnJheSIsImtsYXNzIiwiRnVuY3Rpb24iLCJ0aGlzIiwiYVR5cGVkQXJyYXkiLCJhVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiQyIsImV4cG9ydFR5cGVkQXJyYXlNZXRob2QiLCJLRVkiLCJwcm9wZXJ0eSIsImZvcmNlZCIsIm9wdGlvbnMiLCJBUlJBWSIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsImVycm9yIiwiZXJyb3IyIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImlzVmlldyIsInVuY3VycnlUaGlzIiwiRnVuY3Rpb25OYW1lIiwiZGVmaW5lQnVpbHRJbnMiLCJhbkluc3RhbmNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInRvTGVuZ3RoIiwidG9JbmRleCIsIklFRUU3NTQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlTbGljZSIsInNldFRvU3RyaW5nVGFnIiwiUFJPUEVSX0ZVTkNUSU9OX05BTUUiLCJQUk9QRVIiLCJDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSIsIkNPTkZJR1VSQUJMRSIsInNldEludGVybmFsU3RhdGUiLCJzZXQiLCJBUlJBWV9CVUZGRVIiLCJEQVRBX1ZJRVciLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXJQcm90b3R5cGUiLCIkRGF0YVZpZXciLCJEYXRhVmlld1Byb3RvdHlwZSIsIlJhbmdlRXJyb3IiLCJmaWxsIiwicmV2ZXJzZSIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsIm51bWJlciIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImFkZEdldHRlciIsInZpZXciLCJjb3VudCIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJzdG9yZSIsImJ5dGVMZW5ndGgiLCJieXRlcyIsInN0YXJ0IiwiYnl0ZU9mZnNldCIsImNvbnZlcnNpb24iLCJpIiwiSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FIiwibmFtZSIsIk5hTiIsImtleXMiLCJqIiwiY29uc3RydWN0b3IiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJhcmd1bWVudHMiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJsZW5ndGhPZkFycmF5TGlrZSIsImRlbGV0ZVByb3BlcnR5T3JUaHJvdyIsIm1pbiIsIk1hdGgiLCJjb3B5V2l0aGluIiwidGFyZ2V0IiwiTyIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImluYyIsImFyZ3VtZW50c0xlbmd0aCIsImVuZFBvcyIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJmb3JFYWNoIiwiY2FsbGJhY2tmbiIsImxpc3QiLCJyZXN1bHQiLCJiaW5kIiwiY2FsbCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkQXJyYXkiLCJhcnJheUxpa2UiLCJJU19DT05TVFJVQ1RPUiIsIm1hcGZuIiwibWFwcGluZyIsInN0ZXAiLCJpdGVyYXRvciIsIm5leHQiLCJpdGVyYXRvck1ldGhvZCIsImRvbmUiLCJ0b0luZGV4ZWRPYmplY3QiLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJJbmRleGVkT2JqZWN0IiwiVFlQRSIsIklTX0ZJTkRfTEFTVF9JTkRFWCIsInRoYXQiLCJzZWxmIiwiYm91bmRGdW5jdGlvbiIsImZpbmRMYXN0IiwiZmluZExhc3RJbmRleCIsImFycmF5U3BlY2llc0NyZWF0ZSIsInB1c2giLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwic3BlY2lmaWNDcmVhdGUiLCJtYXAiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyUmVqZWN0IiwiYXBwbHkiLCIkbGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCJGT1JDRUQiLCJzZWFyY2hFbGVtZW50IiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiZm9vIiwiQm9vbGVhbiIsIm1ldGhvZCIsImFDYWxsYWJsZSIsIklTX1JJR0hUIiwibWVtbyIsImxlZnQiLCJyaWdodCIsImlzQXJyYXkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSF9TRVQiLCJ3cml0YWJsZSIsIm1heCIsImsiLCJmaW4iLCJuIiwic2xpY2UiLCJmbG9vciIsIm1lcmdlU29ydCIsImNvbXBhcmVmbiIsIm1pZGRsZSIsImluc2VydGlvblNvcnQiLCJtZXJnZSIsImVsZW1lbnQiLCJsbGVuZ3RoIiwicmxlbmd0aCIsImxpbmRleCIsInJpbmRleCIsIm9yaWdpbmFsQXJyYXkiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsIml0b2MiLCJjdG9pIiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiZm4iLCJFTlRSSUVTIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJvYmplY3QiLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIiRPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXRlcmF0ZSIsImRlZmluZUl0ZXJhdG9yIiwiY3JlYXRlSXRlclJlc3VsdE9iamVjdCIsInNldFNwZWNpZXMiLCJmYXN0S2V5IiwiaW50ZXJuYWxTdGF0ZUdldHRlckZvciIsImdldHRlckZvciIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNPTlNUUlVDVE9SX05BTUUiLCJBRERFUiIsIml0ZXJhYmxlIiwidHlwZSIsImZpcnN0IiwibGFzdCIsInNpemUiLCJBU19FTlRSSUVTIiwiZGVmaW5lIiwicHJldmlvdXMiLCJlbnRyeSIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwiZGF0YSIsInByZXYiLCJoYXMiLCJhZGQiLCJzZXRTdHJvbmciLCJJVEVSQVRPUl9OQU1FIiwiZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUiLCJnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUiLCJpdGVyYXRlZCIsImtpbmQiLCJnZXRXZWFrRGF0YSIsIkFycmF5SXRlcmF0aW9uTW9kdWxlIiwic3BsaWNlIiwiaWQiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImVudHJpZXMiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCIkIiwiaXNGb3JjZWQiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsInVuY3VycmllZE5hdGl2ZU1ldGhvZCIsImVuYWJsZSIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZHVtbXkiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJzb3VyY2UiLCJleGNlcHRpb25zIiwiZiIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwiRiIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJxdW90IiwicmVwbGFjZSIsInN0cmluZyIsImF0dHJpYnV0ZSIsInAxIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsInRvUHJvcGVydHlLZXkiLCJwcm9wZXJ0eUtleSIsInBhZFN0YXJ0IiwiJFJhbmdlRXJyb3IiLCIkaXNGaW5pdGUiLCJpc0Zpbml0ZSIsImFicyIsIkRhdGVQcm90b3R5cGUiLCJEYXRlIiwibmF0aXZlRGF0ZVRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJ0aGlzVGltZVZhbHVlIiwiZ2V0VGltZSIsImdldFVUQ0RhdGUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDU2Vjb25kcyIsImRhdGUiLCJ5ZWFyIiwibWlsbGlzZWNvbmRzIiwic2lnbiIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJoaW50IiwibWFrZUJ1aWx0SW4iLCJkZXNjcmlwdG9yIiwiZ2V0dGVyIiwic2V0dGVyIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJzaW1wbGUiLCJub25Db25maWd1cmFibGUiLCJub25Xcml0YWJsZSIsInNyYyIsIlAiLCJkb2N1bWVudEFsbCIsImRvY3VtZW50IiwiYWxsIiwiSVNfSFRNTEREQSIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJJbmRleFNpemVFcnJvciIsInMiLCJjIiwibSIsIkRPTVN0cmluZ1NpemVFcnJvciIsIkhpZXJhcmNoeVJlcXVlc3RFcnJvciIsIldyb25nRG9jdW1lbnRFcnJvciIsIkludmFsaWRDaGFyYWN0ZXJFcnJvciIsIk5vRGF0YUFsbG93ZWRFcnJvciIsIk5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIiwiTm90Rm91bmRFcnJvciIsIk5vdFN1cHBvcnRlZEVycm9yIiwiSW5Vc2VBdHRyaWJ1dGVFcnJvciIsIkludmFsaWRTdGF0ZUVycm9yIiwiU3ludGF4RXJyb3IiLCJJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3IiLCJOYW1lc3BhY2VFcnJvciIsIkludmFsaWRBY2Nlc3NFcnJvciIsIlZhbGlkYXRpb25FcnJvciIsIlR5cGVNaXNtYXRjaEVycm9yIiwiU2VjdXJpdHlFcnJvciIsIk5ldHdvcmtFcnJvciIsIkFib3J0RXJyb3IiLCJVUkxNaXNtYXRjaEVycm9yIiwiUXVvdGFFeGNlZWRlZEVycm9yIiwiVGltZW91dEVycm9yIiwiSW52YWxpZE5vZGVUeXBlRXJyb3IiLCJEYXRhQ2xvbmVFcnJvciIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwiZmlyZWZveCIsIm1hdGNoIiwiSVNfREVOTyIsIklTX05PREUiLCJ3aW5kb3ciLCJCdW4iLCJ2ZXJzaW9uIiwiRGVubyIsIlVBIiwidGVzdCIsInVzZXJBZ2VudCIsIlBlYmJsZSIsInByb2Nlc3MiLCJuYXZpZ2F0b3IiLCJ2ZXJzaW9ucyIsInY4Iiwic3BsaXQiLCJ3ZWJraXQiLCIkRXJyb3IiLCJFcnJvciIsIlRFU1QiLCJzdGFjayIsIlY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSIsIklTX1Y4X09SX0NIQUtSQV9TVEFDSyIsImRyb3BFbnRyaWVzIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJjbGVhckVycm9yU3RhY2siLCJFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSIsImNhcHR1cmVTdGFja1RyYWNlIiwibm9ybWFsaXplU3RyaW5nQXJndW1lbnQiLCJuYXRpdmVFcnJvclRvU3RyaW5nIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsIm1lc3NhZ2UiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJkb250Q2FsbEdldFNldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiUmVnRXhwIiwiU0hBTSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJyZSIsImZsYWdzIiwidW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kIiwibWV0aG9kcyIsIm5hdGl2ZU1ldGhvZCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsIiRleGVjIiwiZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyIiwiZmxhdHRlbkludG9BcnJheSIsIm9yaWdpbmFsIiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudExlbiIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInByZXZlbnRFeHRlbnNpb25zIiwiTkFUSVZFX0JJTkQiLCJGdW5jdGlvblByb3RvdHlwZSIsIlJlZmxlY3QiLCJoYXNPd25Qcm9wZXJ0eSIsIiRGdW5jdGlvbiIsImNvbmNhdCIsImpvaW4iLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJhcmdzTGVuZ3RoIiwiYXJncyIsInBhcnRBcmdzIiwiZ2V0RGVzY3JpcHRvciIsInVuY3VycnlUaGlzV2l0aEJpbmQiLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJnZXRNZXRob2QiLCJJdGVyYXRvcnMiLCJ1c2luZ0l0ZXJhdG9yIiwiViIsImZ1bmMiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZW1lbnQiLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsImciLCJhIiwiYiIsImNvbnNvbGUiLCJnZXRCdWlsdEluIiwicG93IiwibG9nIiwiTE4yIiwibWFudGlzc2FMZW5ndGgiLCJleHBvbmVudCIsIm1hbnRpc3NhIiwiZXhwb25lbnRMZW5ndGgiLCJlTWF4IiwiZUJpYXMiLCJydCIsIkluZmluaXR5IiwibkJpdHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsImNhdXNlIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUiLCJGUkVFWklORyIsIlJFUVVJUkVEIiwiTUVUQURBVEEiLCJzZXRNZXRhZGF0YSIsIm9iamVjdElEIiwid2Vha0RhdGEiLCJtZXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiJGRvY3VtZW50QWxsIiwibm9vcCIsImVtcHR5IiwiY29uc3RydWN0b3JSZWdFeHAiLCJpc0NvbnN0cnVjdG9yTW9kZXJuIiwiaXNDb25zdHJ1Y3RvckxlZ2FjeSIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInRvTG93ZXJDYXNlIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaXNSZWdFeHAiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJSZXN1bHQiLCJzdG9wcGVkIiwiUmVzdWx0UHJvdG90eXBlIiwidW5ib3VuZEZ1bmN0aW9uIiwiaXRlckZuIiwiSVNfUkVDT1JEIiwiSVNfSVRFUkFUT1IiLCJJTlRFUlJVUFRFRCIsInN0b3AiLCJjb25kaXRpb24iLCJjYWxsRm4iLCJpbm5lclJlc3VsdCIsImlubmVyRXJyb3IiLCJJdGVyYXRvclByb3RvdHlwZSIsInJldHVyblRoaXMiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiRU5VTUVSQUJMRV9ORVhUIiwiSVNfUFVSRSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJJdGVyYXRvcnNDb3JlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIktFWVMiLCJWQUxVRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwidmFsdWVzIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIm9iaiIsIkNPTkZJR1VSQUJMRV9MRU5HVEgiLCJURU1QTEFURSIsImFyaXR5IiwiTWFwUHJvdG90eXBlIiwiTWFwIiwicmVtb3ZlIiwiJGV4cG0xIiwiZXhwbTEiLCJleHAiLCJ4IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyb3VuZFRpZXNUb0V2ZW4iLCJMT0cxMEUiLCJsb2cxMCIsImxvZzFwIiwiY2VpbCIsInRydW5jIiwibm90aWZ5IiwidG9nZ2xlIiwibm9kZSIsInByb21pc2UiLCJ0aGVuIiwibWFjcm90YXNrIiwiUXVldWUiLCJJU19JT1MiLCJJU19JT1NfUEVCQkxFIiwiSVNfV0VCT1NfV0VCS0lUIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwibWljcm90YXNrIiwicXVldWUiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJoZWFkIiwiZW50ZXIiLCJyZXNvbHZlIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRkZWZhdWx0IiwiZ2xvYmFsSXNGaW5pdGUiLCJ0cmltIiwid2hpdGVzcGFjZXMiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJTeW1ib2wiLCJ0cmltbWVkU3RyaW5nIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCJoZXgiLCJyYWRpeCIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiQiIsInN5bWJvbCIsImFscGhhYmV0IiwiY2hyIiwiVCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXNNb2R1bGUiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJTQ1JJUFQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJKUyIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJQcm9wZXJ0aWVzIiwiVjhfUFJPVE9UWVBFX0RFRklORV9CVUciLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJJRThfRE9NX0RFRklORSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFTlVNRVJBQkxFIiwiV1JJVEFCTEUiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIkFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSIsIiRpc0V4dGVuc2libGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwibmFtZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIldFQktJVCIsInJhbmRvbSIsIl9fZGVmaW5lU2V0dGVyX18iLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsIl9fcHJvdG9fXyIsIlRPX0VOVFJJRVMiLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yIiwiSVNfQlJPV1NFUiIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJTVUJDTEFTU0lORyIsIk5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJDT05TVFJVQ1RPUiIsIlJFSkVDVElPTl9FVkVOVCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJUYXJnZXQiLCJTb3VyY2UiLCJ0YWlsIiwiaXRlbSIsIlIiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlUmVwbGFjZSIsIm5hdGl2ZUV4ZWMiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsImxhc3RJbmRleCIsIlVOU1VQUE9SVEVEX1kiLCJCUk9LRU5fQ0FSRVQiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwiZ3JvdXAiLCJyYXciLCJncm91cHMiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImhhc0luZGljZXMiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwidW5pY29kZVNldHMiLCJyZWdFeHBGbGFncyIsIiRSZWdFeHAiLCJNSVNTRURfU1RJQ0tZIiwiaXMiLCJ5IiwiRU5HSU5FX0lTX0JVTiIsIlVTRVJfQUdFTlQiLCJ2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCIsIldSQVAiLCJzY2hlZHVsZXIiLCJoYXNUaW1lQXJnIiwiZmlyc3RQYXJhbUluZGV4IiwiaGFuZGxlciIsInRpbWVvdXQiLCJib3VuZEFyZ3MiLCJwYXJhbXMiLCJjYWxsYmFjayIsIlNldFByb3RvdHlwZSIsIlNldCIsIiRoYXMiLCIka2V5cyIsIlRBRyIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwiYUNvbnN0cnVjdG9yIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiY2hhckNvZGVBdCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwic2Vjb25kIiwiY29kZUF0IiwiJHJlcGVhdCIsInJlcGVhdCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsIm1heEludCIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJPVkVSRkxPV19FUlJPUiIsImZyb21DaGFyQ29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiYWRhcHQiLCJkZWx0YSIsIm51bVBvaW50cyIsImZpcnN0VGltZSIsImJhc2VNaW51c1RNaW4iLCJiYXNlIiwiZW5jb2RlIiwib3V0cHV0IiwiY291bnRlciIsImV4dHJhIiwidWNzMmRlY29kZSIsImN1cnJlbnRWYWx1ZSIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxIiwidCIsInFNaW51c1QiLCJiYXNlTWludXNUIiwibGFiZWwiLCJlbmNvZGVkIiwibGFiZWxzIiwiJHRyaW1FbmQiLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwidHJpbUVuZCIsIiR0cmltU3RhcnQiLCJ0cmltU3RhcnQiLCJ3aGl0ZXNwYWNlIiwibHRyaW0iLCJydHJpbSIsIlN5bWJvbFByb3RvdHlwZSIsIlRPX1BSSU1JVElWRSIsIk5BVElWRV9TWU1CT0wiLCJrZXlGb3IiLCIkbG9jYXRpb24iLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0Iiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJEaXNwYXRjaCIsIk1lc3NhZ2VDaGFubmVsIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwibG9jYXRpb24iLCJydW4iLCJydW5uZXIiLCJldmVudExpc3RlbmVyIiwiZXZlbnQiLCJnbG9iYWxQb3N0TWVzc2FnZURlZmVyIiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJpbnRlZ2VyIiwidG9QcmltaXRpdmUiLCJwcmltIiwiQmlnSW50IiwidG9Qb3NpdGl2ZUludGVnZXIiLCJCWVRFUyIsImlzU3ltYm9sIiwiZXhvdGljVG9QcmltIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsImlzSW50ZWdyYWxOdW1iZXIiLCJ0b09mZnNldCIsInR5cGVkQXJyYXlGcm9tIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJ0eXBlZEFycmF5T2Zmc2V0IiwiJGxlbmd0aCIsIiRsZW4iLCJhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QiLCJ0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwiaXNCaWdJbnRBcnJheSIsInRvQmlnSW50IiwidGhpc0lzQmlnSW50QXJyYXkiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwb3N0Zml4IiwidXJsIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwicGF0aG5hbWUiLCJ0b0pTT04iLCJzb3J0IiwiaHJlZiIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZXJuYW1lIiwiaGFzaCIsInBhc3NlZCIsInJlcXVpcmVkIiwicGF0aCIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwicHJveHlBY2Nlc3NvciIsImluc3RhbGxFcnJvckNhdXNlIiwiaW5zdGFsbEVycm9yU3RhY2siLCJGVUxMX05BTUUiLCJJU19BR0dSRUdBVEVfRVJST1IiLCJTVEFDS19UUkFDRV9MSU1JVCIsIk9QVElPTlNfUE9TSVRJT04iLCJFUlJPUl9OQU1FIiwiT3JpZ2luYWxFcnJvciIsIk9yaWdpbmFsRXJyb3JQcm90b3R5cGUiLCJCYXNlRXJyb3IiLCJXcmFwcGVkRXJyb3IiLCJ3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZSIsIkFHR1JFR0FURV9FUlJPUiIsIiRBZ2dyZWdhdGVFcnJvciIsImVycm9ycyIsIkFnZ3JlZ2F0ZUVycm9yIiwiaW5pdCIsImlzSW5zdGFuY2UiLCJBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSIsImVycm9yc0FycmF5IiwiYXJyYXlCdWZmZXJNb2R1bGUiLCJuYXRpdmVBcnJheUJ1ZmZlclNsaWNlIiwidmlld1NvdXJjZSIsInZpZXdUYXJnZXQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiYXQiLCJyZWxhdGl2ZUluZGV4IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJhcmciLCJFIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kSW5kZXgiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCIkZmluZExhc3RJbmRleCIsIiRmaW5kTGFzdCIsIiRmaW5kIiwiRklORCIsImZsYXRNYXAiLCJmbGF0IiwiZGVwdGhBcmciLCIkaW5jbHVkZXMiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJBUlJBWV9JVEVSQVRPUiIsIkFyZ3VtZW50cyIsIm5hdGl2ZUpvaW4iLCJzZXBhcmF0b3IiLCIkbWFwIiwib2YiLCJzZXRBcnJheUxlbmd0aCIsInByb3BlckVycm9yT25Ob25Xcml0YWJsZUxlbmd0aCIsImFyZ0NvdW50IiwiJHJlZHVjZVJpZ2h0IiwiQ0hST01FX1ZFUlNJT04iLCJyZWR1Y2VSaWdodCIsIiRyZWR1Y2UiLCJyZWR1Y2UiLCJuYXRpdmVSZXZlcnNlIiwibmF0aXZlU2xpY2UiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiJHNvbWUiLCJpbnRlcm5hbFNvcnQiLCJGRiIsIklFX09SX0VER0UiLCJWOCIsIm5hdGl2ZVNvcnQiLCJGQUlMU19PTl9VTkRFRklORUQiLCJGQUlMU19PTl9OVUxMIiwiU1RBQkxFX1NPUlQiLCJjb2RlIiwidiIsIml0ZW1zTGVuZ3RoIiwiaXRlbXMiLCJhcnJheUxlbmd0aCIsImdldFNvcnRDb21wYXJlIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwiYWN0dWFsU3RhcnQiLCJ1bnNoaWZ0IiwiZ2V0WWVhciIsImdldEZ1bGxZZWFyIiwiJERhdGUiLCJzZXRGdWxsWWVhciIsInNldFllYXIiLCJ5aSIsInRvR01UU3RyaW5nIiwidG9VVENTdHJpbmciLCJwdiIsImRhdGVUb1ByaW1pdGl2ZSIsIklOVkFMSURfREFURSIsIlRPX1NUUklORyIsIm5hdGl2ZURhdGVUb1N0cmluZyIsIldFQl9BU1NFTUJMWSIsIldlYkFzc2VtYmx5IiwiZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIiLCJleHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyIiwiZXJyb3JUb1N0cmluZyIsIkVycm9yUHJvdG90eXBlIiwibnVtYmVyVG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImVzY2FwZSIsIkhBU19JTlNUQU5DRSIsIkZVTkNUSU9OX05BTUVfRVhJU1RTIiwibmFtZVJFIiwicmVnRXhwRXhlYyIsIiRzdHJpbmdpZnkiLCJ0ZXN0ZXIiLCJsb3ciLCJoaSIsIldST05HX1NZTUJPTFNfQ09OVkVSU0lPTiIsIklMTF9GT1JNRURfVU5JQ09ERSIsInN0cmluZ2lmeVdpdGhTeW1ib2xzRml4IiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJmaXhJbGxGb3JtZWQiLCJzdHJpbmdpZnkiLCJzcGFjZSIsIkpTT04iLCJjb2xsZWN0aW9uIiwiJGFjb3NoIiwiYWNvc2giLCJzcXJ0IiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJMT0cyRSIsImNsejMyIiwiJGNvc2giLCJjb3NoIiwiJGh5cG90IiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJhTGVuIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidGhpc051bWJlclZhbHVlIiwiTlVNQkVSIiwiTmF0aXZlTnVtYmVyIiwiUHVyZU51bWJlck5hbWVzcGFjZSIsIk51bWJlclByb3RvdHlwZSIsInRvTnVtZXJpYyIsInByaW1WYWx1ZSIsInRvTnVtYmVyIiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY2FsbGVkV2l0aE5ldyIsIk51bWJlcldyYXBwZXIiLCJ3cmFwIiwiaXNOYU4iLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJuYXRpdmVUb0V4cG9uZW50aWFsIiwidG9FeHBvbmVudGlhbCIsIlJPVU5EU19QUk9QRVJMWSIsImZyYWN0aW9uRGlnaXRzIiwiZSIsImQiLCJsIiwidyIsIm5hdGl2ZVRvRml4ZWQiLCJ0b0ZpeGVkIiwiYWNjIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsImRhdGFUb1N0cmluZyIsInoiLCJmcmFjdERpZ2l0cyIsIngyIiwibmF0aXZlVG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9fZGVmaW5lR2V0dGVyX18iLCIkZW50cmllcyIsIiRmcmVlemUiLCJmcmVlemUiLCJmcm9tRW50cmllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCIkaXNGcm96ZW4iLCJpc0Zyb3plbiIsIiRpc1NlYWxlZCIsImlzU2VhbGVkIiwibmF0aXZlS2V5cyIsIl9fbG9va3VwR2V0dGVyX18iLCJkZXNjIiwiX19sb29rdXBTZXR0ZXJfXyIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsImRlZmluZUJ1aWx0SW5BY2Nlc3NvciIsIlBST1RPIiwiJHNlYWwiLCJzZWFsIiwiJHZhbHVlcyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsImFsbFNldHRsZWQiLCJjYXBhYmlsaXR5IiwicHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwic3RhdHVzIiwicmVhc29uIiwiJHByb21pc2VSZXNvbHZlIiwiUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04iLCJQUk9NSVNFX0FOWV9FUlJPUiIsImFueSIsImFscmVhZHlSZXNvbHZlZCIsImFscmVhZHlSZWplY3RlZCIsInJlYWwiLCJvblJlamVjdGVkIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIm5hdGl2ZVRoZW4iLCJ0YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsIlByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbiIsIlBST01JU0UiLCJOQVRJVkVfUFJPTUlTRV9TVUJDTEFTU0lORyIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiUHJvbWlzZVByb3RvdHlwZSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsImlzVGhlbmFibGUiLCJjYWxsUmVhY3Rpb24iLCJyZWFjdGlvbiIsImV4aXRlZCIsIm9rIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiaXNSZWplY3QiLCJub3RpZmllZCIsInJlYWN0aW9ucyIsIm9uVW5oYW5kbGVkIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwiUHJvbWlzZVdyYXBwZXIiLCJvbkZpbmFsbHkiLCJpc0Z1bmN0aW9uIiwicmFjZSIsInIiLCJQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyIiwiQ0hFQ0tfV1JBUFBFUiIsImZ1bmN0aW9uQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIm5ld1RhcmdldCIsIiRhcmdzIiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5Iiwib2JqZWN0R2V0UHJvdG90eXBlT2YiLCJpc0RhdGFEZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsIm9iamVjdFNldFByb3RvdHlwZU9mIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzY3JpcHRvciIsImdldFJlZ0V4cEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwic3RyaW5nSW5kZXhPZiIsIklTX05DRyIsIkNPUlJFQ1RfTkVXIiwiUmVnRXhwV3JhcHBlciIsInBhdHRlcm4iLCJyYXdGbGFncyIsImhhbmRsZWQiLCJ0aGlzSXNSZWdFeHAiLCJwYXR0ZXJuSXNSZWdFeHAiLCJmbGFnc0FyZVVuZGVmaW5lZCIsInJhd1BhdHRlcm4iLCJuYW1lZCIsImJyYWNrZXRzIiwibmNnIiwiZ3JvdXBpZCIsImdyb3VwbmFtZSIsImhhbmRsZU5DRyIsImhhbmRsZURvdEFsbCIsIklORElDRVNfU1VQUE9SVCIsImNhbGxzIiwiZXhwZWN0ZWQiLCJwYWlycyIsIm5hdGl2ZVRlc3QiLCIkdG9TdHJpbmciLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJjcmVhdGVIVE1MIiwiZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCIsImFuY2hvciIsImJpZyIsImJsaW5rIiwiYm9sZCIsImNvZGVQb2ludEF0Iiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwibmF0aXZlRW5kc1dpdGgiLCJlbmRzV2l0aCIsIkNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIiwic2VhcmNoU3RyaW5nIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCJmaXhlZCIsImZvbnRjb2xvciIsImNvbG9yIiwiZm9udHNpemUiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJlbGVtZW50cyIsIml0YWxpY3MiLCJTVFJJTkdfSVRFUkFUT1IiLCJwb2ludCIsImxpbmsiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJNQVRDSF9BTEwiLCJSRUdFWFBfU1RSSU5HIiwiUkVHRVhQX1NUUklOR19JVEVSQVRPUiIsIm5hdGl2ZU1hdGNoQWxsIiwibWF0Y2hBbGwiLCJXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgiLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCIkZ2xvYmFsIiwiZnVsbFVuaWNvZGUiLCIkbWF0Y2hBbGwiLCJtYXRjaGVyIiwicngiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsIm5hdGl2ZU1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicmVzIiwibWF0Y2hTdHIiLCIkcGFkRW5kIiwicGFkRW5kIiwiJHBhZFN0YXJ0IiwidGVtcGxhdGUiLCJyYXdUZW1wbGF0ZSIsImxpdGVyYWxTZWdtZW50cyIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VBbGwiLCJyZXBsYWNlVmFsdWUiLCJJU19SRUdfRVhQIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJzZWFyY2hMZW5ndGgiLCJhZHZhbmNlQnkiLCJlbmRPZkxhc3RNYXRjaCIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIl8iLCJVTlNBRkVfU1VCU1RJVFVURSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIm5hdGl2ZVNlYXJjaCIsInNlYXJjaGVyIiwicHJldmlvdXNMYXN0SW5kZXgiLCJzbWFsbCIsImNhbGxSZWdFeHBFeGVjIiwiTUFYX1VJTlQzMiIsIiRwdXNoIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwicCIsIm9yaWdpbmFsRXhlYyIsIm5hdGl2ZVN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwic3RyaWtlIiwic3ViIiwic3Vic3RyIiwiaW50TGVuZ3RoIiwiaW50RW5kIiwiaW50U3RhcnQiLCJzdXAiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsIiR0cmltIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUiLCJISURERU4iLCJRT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJkZXNjcmlwdGlvbiIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwidGhpc1N5bWJvbFZhbHVlIiwic3ltYm9sRGVzY3JpcHRpdmVTdHJpbmciLCJOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJzeW0iLCJ1JEFycmF5Q29weVdpdGhpbiIsIiRmaWxsIiwiYWN0dWFsVmFsdWUiLCJmcm9tU3BlY2llc0FuZExpc3QiLCJwcmVkaWNhdGUiLCJjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiR0VORVJJQyIsIklURVJBVE9SX0lTX1ZBTFVFUyIsInR5cGVkQXJyYXlWYWx1ZXMiLCIkam9pbiIsIiRzZXQiLCJXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMiLCJUT19PQkpFQ1RfQlVHIiwiQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMiLCJtb2QiLCJiZWdpbiIsImJlZ2luSW5kZXgiLCIkdG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRPX0xPQ0FMRV9TVFJJTkdfQlVHIiwiVWludDhBcnJheVByb3RvdHlwZSIsImFycmF5VG9TdHJpbmciLCJJU19OT1RfQVJSQVlfTUVUSE9EIiwiaGV4MiIsImhleDQiLCJ1bmVzY2FwZSIsInBhcnQiLCJJbnRlcm5hbFdlYWtNYXAiLCJjb2xsZWN0aW9uV2VhayIsIkZST1pFTiIsIlNFQUxFRCIsIklTX0lFMTEiLCIkV2Vha01hcCIsIldlYWtNYXBQcm90b3R5cGUiLCJuYXRpdmVTZXQiLCJuYXRpdmVEZWxldGUiLCJuYXRpdmVIYXMiLCJuYXRpdmVHZXQiLCJmcm96ZW5BcnJheSIsImFycmF5SW50ZWdyaXR5TGV2ZWwiLCJkaXNhbGxvd2VkIiwiZmluYWxFcSIsIiRhdG9iIiwiTk9fU1BBQ0VTX0lHTk9SRSIsIk5PX0VOQ09ESU5HX0NIRUNLIiwiTk9fQVJHX1JFQ0VJVklOR19DSEVDSyIsIldST05HX0FSSVRZIiwiYXRvYiIsImJzIiwiYmMiLCIkYnRvYSIsIldST05HX0FSR19DT05WRVJTSU9OIiwiYnRvYSIsImJsb2NrIiwiY2hhckNvZGUiLCJET01JdGVyYWJsZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInRyeU5vZGVSZXF1aXJlIiwiRE9NRXhjZXB0aW9uQ29uc3RhbnRzIiwiRE9NX0VYQ0VQVElPTiIsIkRBVEFfQ0xPTkVfRVJSIiwiTmF0aXZlRE9NRXhjZXB0aW9uIiwiTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiSEFTX1NUQUNLIiwiY29kZUZvciIsIiRET01FeGNlcHRpb24iLCJET01FeGNlcHRpb25Qcm90b3R5cGUiLCJjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yIiwiSU5DT1JSRUNUX0NPTlNUUlVDVE9SIiwiSU5DT1JSRUNUX0NPREUiLCJNSVNTRURfQ09OU1RBTlRTIiwiRk9SQ0VEX0NPTlNUUlVDVE9SIiwiRE9NRXhjZXB0aW9uIiwiUG9seWZpbGxlZERPTUV4Y2VwdGlvbiIsIlBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUiLCJjb25zdGFudCIsImNvbnN0YW50TmFtZSIsIkVSUk9SX0hBU19TVEFDSyIsIkRPTV9FWENFUFRJT05fSEFTX1NUQUNLIiwiQlVHR1lfREVTQ1JJUFRPUiIsInF1ZXVlTWljcm90YXNrIiwiSU5DT1JSRUNUX1ZBTFVFIiwic2V0VGFzayIsInNjaGVkdWxlcnNGaXgiLCJzZXRJbnRlcnZhbCIsInN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uIiwiZ2V0QnVpbHRpbiIsIk1hcEhlbHBlcnMiLCJTZXRIZWxwZXJzIiwiRXZhbEVycm9yIiwiUmVmZXJlbmNlRXJyb3IiLCJVUklFcnJvciIsIlBlcmZvcm1hbmNlTWFyayIsIkNvbXBpbGVFcnJvciIsIkxpbmtFcnJvciIsIlJ1bnRpbWVFcnJvciIsIm1hcEhhcyIsIm1hcEdldCIsIm1hcFNldCIsInNldEFkZCIsInRoaXNCb29sZWFuVmFsdWUiLCJ0aGlzU3RyaW5nVmFsdWUiLCJQRVJGT1JNQU5DRV9NQVJLIiwiREFUQV9DTE9ORV9FUlJPUiIsIlRSQU5TRkVSUklORyIsImNoZWNrQmFzaWNTZW1hbnRpYyIsInNldDEiLCJzZXQyIiwiY2hlY2tFcnJvcnNDbG9uaW5nIiwibmF0aXZlU3RydWN0dXJlZENsb25lIiwic3RydWN0dXJlZENsb25lIiwiRk9SQ0VEX1JFUExBQ0VNRU5UIiwic3RydWN0dXJlZENsb25lRnJvbU1hcmsiLCJkZXRhaWwiLCJuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lIiwidGhyb3dVbmNsb25lYWJsZSIsInRocm93VW5wb2x5ZmlsbGFibGUiLCJhY3Rpb24iLCJzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCIsImNsb25lZCIsImRhdGFUcmFuc2ZlciIsImRlZXAiLCJET01RdWFkIiwicDIiLCJwMyIsInA0IiwiRGF0YVRyYW5zZmVyIiwiQ2xpcGJvYXJkRXZlbnQiLCJjbGlwYm9hcmREYXRhIiwiZmlsZXMiLCJjcmVhdGVEYXRhVHJhbnNmZXIiLCJJbWFnZURhdGEiLCJ3aWR0aCIsImhlaWdodCIsImNvbG9yU3BhY2UiLCJmcm9tUG9pbnQiLCJmcm9tUmVjdCIsImZyb21NYXRyaXgiLCJjbG9uZSIsIkZpbGUiLCJQUk9QRVJfVFJBTlNGRVIiLCJ0cmFuc2ZlciIsInRyeVRvVHJhbnNmZXIiLCJyYXdUcmFuc2ZlciIsInRyYW5zZmVycmVkQXJyYXkiLCJ0cmFuc2ZlcnJlZCIsImNhbnZhcyIsIk9mZnNjcmVlbkNhbnZhcyIsImdldENvbnRleHQiLCJ0cmFuc2ZlckZyb21JbWFnZUJpdG1hcCIsInRyYW5zZmVyVG9JbWFnZUJpdG1hcCIsIlVTRV9OQVRJVkVfVVJMIiwiYXJyYXlTb3J0IiwiVVJMX1NFQVJDSF9QQVJBTVMiLCJVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJzYWZlR2V0QnVpbHRJbiIsIm5hdGl2ZUZldGNoIiwiTmF0aXZlUmVxdWVzdCIsIkhlYWRlcnMiLCJSZXF1ZXN0UHJvdG90eXBlIiwiSGVhZGVyc1Byb3RvdHlwZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSUNvbXBvbmVudCIsInNoaWZ0IiwicGx1cyIsInNlcXVlbmNlcyIsInBlcmNlbnRTZXF1ZW5jZSIsInBlcmNlbnREZWNvZGUiLCJzZXF1ZW5jZSIsImRlc2VyaWFsaXplIiwicmVwbGFjZW1lbnRzIiwic2VyaWFsaXplIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJVUkxTZWFyY2hQYXJhbXNTdGF0ZSIsInBhcnNlT2JqZWN0IiwicGFyc2VRdWVyeSIsImJpbmRVUkwiLCJ1cGRhdGUiLCJlbnRyeUl0ZXJhdG9yIiwiZW50cnlOZXh0IiwicXVlcnkiLCJ1cGRhdGVVUkwiLCJVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciIsIlVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSIsImFwcGVuZCIsImdldEFsbCIsImZvdW5kIiwiaGVhZGVyc0hhcyIsImhlYWRlcnNTZXQiLCJ3cmFwUmVxdWVzdE9wdGlvbnMiLCJoZWFkZXJzIiwiYm9keSIsImZldGNoIiwiUmVxdWVzdENvbnN0cnVjdG9yIiwiUmVxdWVzdCIsImdldFN0YXRlIiwiRU9GIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsImdldEludGVybmFsVVJMU3RhdGUiLCJnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlIiwiTmF0aXZlVVJMIiwicG9wIiwiSU5WQUxJRF9TQ0hFTUUiLCJJTlZBTElEX0hPU1QiLCJJTlZBTElEX1BPUlQiLCJBTFBIQSIsIkFMUEhBTlVNRVJJQyIsIkRJR0lUIiwiSEVYX1NUQVJUIiwiT0NUIiwiREVDIiwiSEVYIiwiRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQiLCJMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFIiwiVEFCX0FORF9ORVdfTElORSIsInNlcmlhbGl6ZUhvc3QiLCJjb21wcmVzcyIsImlnbm9yZTAiLCJpcHY2IiwibWF4SW5kZXgiLCJjdXJyU3RhcnQiLCJjdXJyTGVuZ3RoIiwiZmluZExvbmdlc3RaZXJvU2VxdWVuY2UiLCJDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0IiwiZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0IiwicGF0aFBlcmNlbnRFbmNvZGVTZXQiLCJ1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQiLCJwZXJjZW50RW5jb2RlIiwic3BlY2lhbFNjaGVtZXMiLCJmdHAiLCJmaWxlIiwiaHR0cCIsImh0dHBzIiwid3MiLCJ3c3MiLCJpc1dpbmRvd3NEcml2ZUxldHRlciIsIm5vcm1hbGl6ZWQiLCJzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyIiwiaXNTaW5nbGVEb3QiLCJzZWdtZW50IiwiU0NIRU1FX1NUQVJUIiwiU0NIRU1FIiwiTk9fU0NIRU1FIiwiU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkiLCJQQVRIX09SX0FVVEhPUklUWSIsIlJFTEFUSVZFIiwiUkVMQVRJVkVfU0xBU0giLCJTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTIiwiU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMiLCJBVVRIT1JJVFkiLCJIT1NUIiwiSE9TVE5BTUUiLCJQT1JUIiwiRklMRSIsIkZJTEVfU0xBU0giLCJGSUxFX0hPU1QiLCJQQVRIX1NUQVJUIiwiUEFUSCIsIkNBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEgiLCJRVUVSWSIsIkZSQUdNRU5UIiwiVVJMU3RhdGUiLCJpc0Jhc2UiLCJiYXNlU3RhdGUiLCJmYWlsdXJlIiwidXJsU3RyaW5nIiwicGFyc2UiLCJzdGF0ZU92ZXJyaWRlIiwiY29kZVBvaW50cyIsImJ1ZmZlckNvZGVQb2ludHMiLCJwb2ludGVyIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJzZWVuUGFzc3dvcmRUb2tlbiIsInNjaGVtZSIsInBhc3N3b3JkIiwiZnJhZ21lbnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNTcGVjaWFsIiwiaW5jbHVkZXNDcmVkZW50aWFscyIsImNvZGVQb2ludCIsImVuY29kZWRDb2RlUG9pbnRzIiwicGFyc2VIb3N0Iiwic2hvcnRlblBhdGgiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwicGFyc2VJUHY2IiwicGFydHNMZW5ndGgiLCJudW1iZXJzIiwiaXB2NCIsInBhcnRzIiwicGFyc2VJUHY0IiwiY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0IiwicGF0aFNpemUiLCJzZXRIcmVmIiwiZ2V0T3JpZ2luIiwiVVJMQ29uc3RydWN0b3IiLCJvcmlnaW4iLCJnZXRQcm90b2NvbCIsInNldFByb3RvY29sIiwiZ2V0VXNlcm5hbWUiLCJzZXRVc2VybmFtZSIsImdldFBhc3N3b3JkIiwic2V0UGFzc3dvcmQiLCJnZXRIb3N0Iiwic2V0SG9zdCIsImdldEhvc3RuYW1lIiwic2V0SG9zdG5hbWUiLCJob3N0bmFtZSIsImdldFBvcnQiLCJzZXRQb3J0IiwiZ2V0UGF0aG5hbWUiLCJzZXRQYXRobmFtZSIsImdldFNlYXJjaCIsInNldFNlYXJjaCIsImdldFNlYXJjaFBhcmFtcyIsImdldEhhc2giLCJzZXRIYXNoIiwiVVJMUHJvdG90eXBlIiwiYWNjZXNzb3JEZXNjcmlwdG9yIiwibmF0aXZlQ3JlYXRlT2JqZWN0VVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibmF0aXZlUmV2b2tlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiX2V4dGVuZHMiLCJBY3Rpb24iLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2V0TG9jYXRpb24iLCJjcmVhdGVIcmVmIiwidmFsaWRhdGVMb2NhdGlvbiIsImRlZmF1bHRWaWV3IiwidjVDb21wYXQiLCJnbG9iYWxIaXN0b3J5IiwiaGlzdG9yeSIsIlBvcCIsImxpc3RlbmVyIiwiZ2V0SW5kZXgiLCJpZHgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJjcmVhdGVVUkwiLCJjcmVhdGVQYXRoIiwiaW52YXJpYW50IiwicmVwbGFjZVN0YXRlIiwibGlzdGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVuY29kZUxvY2F0aW9uIiwiUHVzaCIsImNyZWF0ZUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiZ2V0SGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiUmVwbGFjZSIsImdvIiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwidXNyIiwicGFyc2VQYXRoIiwiX3JlZiIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsIlJlc3VsdFR5cGUiLCJjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIiwicm91dGVzIiwicGFyZW50UGF0aCIsImFsbElkcyIsInJvdXRlIiwidHJlZVBhdGgiLCJjaGlsZHJlbiIsImlzSW5kZXhSb3V0ZSIsIm1hdGNoUm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwic2FmZWx5RGVjb2RlVVJJIiwicGFyZW50c01ldGEiLCJmbGF0dGVuUm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwiam9pblBhdGhzIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJleHBsb2RlZCIsImV4cGxvZGVPcHRpb25hbFNlZ21lbnRzIiwic2VnbWVudHMiLCJyZXN0IiwiaXNPcHRpb25hbCIsInJlc3RFeHBsb2RlZCIsInN1YnBhdGgiLCJwYXJhbVJlIiwiaXNTcGxhdCIsImluaXRpYWxTY29yZSIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsIm1hdGNoUGF0aCIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwicGFyYW1OYW1lcyIsIndhcm5pbmciLCJyZWdleHBTb3VyY2UiLCJwYXJhbU5hbWUiLCJjb21waWxlUGF0aCIsImNhcHR1cmVHcm91cHMiLCJzcGxhdFZhbHVlIiwic2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJIiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwiY29uZCIsIndhcm4iLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiY2hhciIsImZpZWxkIiwiZGVzdCIsImdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIiwicGF0aHMiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwiQWJvcnRlZERlZmVycmVkRXJyb3IiLCJEZWZlcnJlZERhdGEiLCJyZXNwb25zZUluaXQiLCJwZW5kaW5nS2V5c1NldCIsInN1YnNjcmliZXJzIiwiZGVmZXJyZWRLZXlzIiwiYWJvcnRQcm9taXNlIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsIm9uQWJvcnQiLCJ1bmxpc3RlbkFib3J0U2lnbmFsIiwic2lnbmFsIiwidHJhY2tQcm9taXNlIiwib25TZXR0bGUiLCJjYXRjaCIsImFib3J0ZWQiLCJkZWxldGUiLCJzZXR0bGVkS2V5Iiwic3Vic2NyaWJlciIsInN1YnNjcmliZSIsImNhbmNlbCIsImFib3J0IiwiYXN5bmMiLCJ1bndyYXBwZWREYXRhIiwiX3JlZjIiLCJ1bndyYXBUcmFja2VkUHJvbWlzZSIsInBlbmRpbmdLZXlzIiwiX3RyYWNrZWQiLCJpc1RyYWNrZWRQcm9taXNlIiwiX2Vycm9yIiwiX2RhdGEiLCJFcnJvclJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkTXV0YXRpb25NZXRob2RzIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHMiLCJyZWRpcmVjdFN0YXR1c0NvZGVzIiwicmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzIiwiSURMRV9OQVZJR0FUSU9OIiwiZm9ybU1ldGhvZCIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1EYXRhIiwiSURMRV9GRVRDSEVSIiwiSURMRV9CTE9DS0VSIiwicHJvY2VlZCIsInJlc2V0IiwiaXNCcm93c2VyIiwiaXNTZXJ2ZXIiLCJjcmVhdGVSb3V0ZXIiLCJkYXRhUm91dGVzIiwidW5saXN0ZW5IaXN0b3J5Iiwic2F2ZWRTY3JvbGxQb3NpdGlvbnMiLCJnZXRTY3JvbGxSZXN0b3JhdGlvbktleSIsImdldFNjcm9sbFBvc2l0aW9uIiwiaW5pdGlhbFNjcm9sbFJlc3RvcmVkIiwiaHlkcmF0aW9uRGF0YSIsImluaXRpYWxNYXRjaGVzIiwiaW5pdGlhbEVycm9ycyIsImdldEludGVybmFsUm91dGVyRXJyb3IiLCJnZXRTaG9ydENpcmN1aXRNYXRjaGVzIiwicm91dGVyIiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwiaW5pdGlhbGl6ZWQiLCJsb2FkZXIiLCJoaXN0b3J5QWN0aW9uIiwibmF2aWdhdGlvbiIsInJlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInByZXZlbnRTY3JvbGxSZXNldCIsInJldmFsaWRhdGlvbiIsImxvYWRlckRhdGEiLCJhY3Rpb25EYXRhIiwiZmV0Y2hlcnMiLCJibG9ja2VycyIsInBlbmRpbmdBY3Rpb24iLCJwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0IiwiaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwiaXNSZXZhbGlkYXRpb25SZXF1aXJlZCIsImNhbmNlbGxlZERlZmVycmVkUm91dGVzIiwiY2FuY2VsbGVkRmV0Y2hlckxvYWRzIiwiZmV0Y2hDb250cm9sbGVycyIsImluY3JlbWVudGluZ0xvYWRJZCIsInBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkIiwiZmV0Y2hSZWxvYWRJZHMiLCJmZXRjaFJlZGlyZWN0SWRzIiwiZmV0Y2hMb2FkTWF0Y2hlcyIsImFjdGl2ZURlZmVycmVkcyIsImFjdGl2ZUJsb2NrZXIiLCJibG9ja2VyRnVuY3Rpb25zIiwiaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUiLCJ1cGRhdGVTdGF0ZSIsIm5ld1N0YXRlIiwiY29tcGxldGVOYXZpZ2F0aW9uIiwiX2xvY2F0aW9uJHN0YXRlIiwiX2xvY2F0aW9uJHN0YXRlMiIsImlzQWN0aW9uUmVsb2FkIiwiaXNNdXRhdGlvbk1ldGhvZCIsIl9pc1JlZGlyZWN0IiwibWVyZ2VMb2FkZXJEYXRhIiwiZGVsZXRlQmxvY2tlciIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJzdGFydE5hdmlnYXRpb24iLCJvcHRzIiwic3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwidXNlck1hdGNoZXMiLCJjcmVhdGVVc2VNYXRjaGVzTWF0Y2giLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJsb2FkaW5nTmF2aWdhdGlvbiIsIm92ZXJyaWRlTmF2aWdhdGlvbiIsIm5vdEZvdW5kTWF0Y2hlcyIsImNhbmNlbEFjdGl2ZURlZmVycmVkcyIsInN1Ym1pc3Npb24iLCJwZW5kaW5nQWN0aW9uRGF0YSIsInBlbmRpbmdFcnJvciIsInJlcXVlc3QiLCJjcmVhdGVDbGllbnRTaWRlUmVxdWVzdCIsImZpbmROZWFyZXN0Qm91bmRhcnkiLCJhY3Rpb25PdXRwdXQiLCJpbnRlcnJ1cHRBY3RpdmVMb2FkcyIsImFjdGlvbk1hdGNoIiwiZ2V0VGFyZ2V0TWF0Y2giLCJjYWxsTG9hZGVyT3JBY3Rpb24iLCJzaG9ydENpcmN1aXRlZCIsInJvdXRlSWQiLCJpc1JlZGlyZWN0UmVzdWx0Iiwic3RhcnRSZWRpcmVjdE5hdmlnYXRpb24iLCJpc0Vycm9yUmVzdWx0IiwiYm91bmRhcnlNYXRjaCIsInBlbmRpbmdBY3Rpb25FcnJvciIsImlzRGVmZXJyZWRSZXN1bHQiLCJoYW5kbGVBY3Rpb24iLCJhY3RpdmVTdWJtaXNzaW9uIiwibWF0Y2hlc1RvTG9hZCIsInJldmFsaWRhdGluZ0ZldGNoZXJzIiwiZ2V0TWF0Y2hlc1RvTG9hZCIsInJmIiwiZmV0Y2hlciIsInJldmFsaWRhdGluZ0ZldGNoZXIiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJyZWRpcmVjdCIsImZpbmRSZWRpcmVjdCIsInByb2Nlc3NMb2FkZXJEYXRhIiwiZGVmZXJyZWREYXRhIiwiZG9uZUtleXMiLCJtYXJrRmV0Y2hlcnNEb25lIiwibWFya0ZldGNoUmVkaXJlY3RzRG9uZSIsImFib3J0U3RhbGVGZXRjaExvYWRzIiwiaGFuZGxlTG9hZGVycyIsImdldEZldGNoZXIiLCJfdGVtcCIsIl93aW5kb3ciLCJpc0ZldGNoQWN0aW9uUmVkaXJlY3QiLCJyZXZhbGlkYXRlIiwicmVkaXJlY3RMb2NhdGlvbiIsIl9pc0ZldGNoQWN0aW9uUmVkaXJlY3QiLCJuZXdPcmlnaW4iLCJyZWRpcmVjdEhpc3RvcnlBY3Rpb24iLCJjdXJyZW50TWF0Y2hlcyIsImZldGNoZXJzVG9Mb2FkIiwicmVzb2x2ZURlZmVycmVkUmVzdWx0cyIsImFib3J0RmV0Y2hlciIsInNldEZldGNoZXJFcnJvciIsImRlbGV0ZUZldGNoZXIiLCJkb25lRmV0Y2hlciIsImxhbmRlZElkIiwieWVldGVkS2V5cyIsInVwZGF0ZUJsb2NrZXIiLCJuZXdCbG9ja2VyIiwiYmxvY2tlciIsInNob3VsZEJsb2NrTmF2aWdhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsIm5leHRMb2NhdGlvbiIsImJsb2NrZXJGdW5jdGlvbiIsImNhbmNlbGxlZFJvdXRlSWRzIiwiZGZkIiwiaW5pdGlhbGl6ZSIsImJsb2NrZXJLZXkiLCJlbmFibGVTY3JvbGxSZXN0b3JhdGlvbiIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uIiwiZ2V0S2V5IiwibmF2aWdhdGUiLCJub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMiLCJ1c2VyUmVwbGFjZSIsInJlcXVlc3RNYXRjaGVzIiwiZXhpc3RpbmdGZXRjaGVyIiwiYWJvcnRDb250cm9sbGVyIiwiZmV0Y2hSZXF1ZXN0IiwiYWN0aW9uUmVzdWx0IiwibG9hZGluZ0ZldGNoZXIiLCJyZXZhbGlkYXRpb25SZXF1ZXN0IiwibG9hZElkIiwibG9hZEZldGNoZXIiLCJzdGFsZUtleSIsImRpZEFib3J0RmV0Y2hMb2FkcyIsImhhbmRsZUZldGNoZXJBY3Rpb24iLCJyZXNvbHZlRGVmZXJyZWREYXRhIiwiaGFuZGxlRmV0Y2hlckxvYWRlciIsImRpc3Bvc2UiLCJnZXRCbG9ja2VyIiwiX2ludGVybmFsRmV0Y2hDb250cm9sbGVycyIsIl9pbnRlcm5hbEFjdGl2ZURlZmVycmVkcyIsImlzRmV0Y2hlciIsImlzU3VibWlzc2lvbk5hdmlnYXRpb24iLCJzdHJpcEhhc2hGcm9tUGF0aCIsImNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zIiwiaGFzTmFrZWRJbmRleFF1ZXJ5IiwiY3VycmVudFVybCIsIm5leHRVcmwiLCJkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSIsImJvdW5kYXJ5SWQiLCJuYXZpZ2F0aW9uTWF0Y2hlcyIsImJvdW5kYXJ5TWF0Y2hlcyIsImdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5IiwiY3VycmVudExvYWRlckRhdGEiLCJjdXJyZW50TWF0Y2giLCJpc05ldyIsImlzTWlzc2luZ0RhdGEiLCJpc05ld0xvYWRlciIsImN1cnJlbnRSb3V0ZU1hdGNoIiwibmV4dFJvdXRlTWF0Y2giLCJzaG91bGRSZXZhbGlkYXRlTG9hZGVyIiwiY3VycmVudFBhcmFtcyIsIm5leHRQYXJhbXMiLCJpc05ld1JvdXRlSW5zdGFuY2UiLCJjdXJyZW50UGF0aCIsImxvYWRlck1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZSIsInJvdXRlQ2hvaWNlIiwiaXNTdGF0aWNSZXF1ZXN0IiwiaXNSb3V0ZVJlcXVlc3QiLCJyZXF1ZXN0Q29udGV4dCIsInJlc3VsdFR5cGUiLCJvblJlamVjdCIsImNvbnRleHQiLCJyZXNvbHZlZExvY2F0aW9uIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJpc1BhdGhSZWxhdGl2ZSIsImlzRW1wdHlQYXRoIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJyZXNvbHZlUGF0aCIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwicmVzb2x2ZVRvIiwicmVzcG9uc2UiLCJjb250ZW50VHlwZSIsImpzb24iLCJ0ZXh0Iiwic3RhdHVzQ29kZSIsImRlZmVycmVkIiwiZm91bmRFcnJvciIsImxvYWRlckhlYWRlcnMiLCJwcm9jZXNzUm91dGVMb2FkZXJEYXRhIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJoYXNFcnJvckJvdW5kYXJ5IiwiX3RlbXA0IiwiZXJyb3JNZXNzYWdlIiwiaXNSZXZhbGlkYXRpbmdMb2FkZXIiLCJyZXNvbHZlRGF0YSIsImhhbmRsZSIsInBhdGhNYXRjaGVzIiwiYWEiLCJjYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwicmEiLCJzYSIsInRhIiwicGEiLCJxYSIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJmb3IiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJoIiwiZGlzcGxheU5hbWUiLCJQYSIsInJlbmRlciIsIlFhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiY2IiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJ0YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIm9uRXJyb3IiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJWYiIsImFsdGVybmF0ZSIsInJldHVybiIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwiY2hpbGQiLCJzaWJsaW5nIiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiY2MiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImRjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJ2YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiZXZlbnRUaW1lcyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImxpc3RlbmVycyIsInBlIiwicWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsIk5lIiwiY29udGVudEVkaXRhYmxlIiwiT2UiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnRFbGVtZW50Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlhlIiwiWWUiLCJaZSIsImFuaW1hdGlvbiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImxmIiwibWYiLCJuZiIsIlViIiwiRCIsInBmIiwicWYiLCJzZiIsInBhc3NpdmUiLCJKIiwidSIsInRmIiwidWYiLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImtlIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9faHRtbCIsIkZmIiwiR2YiLCJjbGVhclRpbWVvdXQiLCJIZiIsIkpmIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRyIsIlZmIiwiSCIsIldmIiwiWGYiLCJZZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsImRlZmF1bHRQcm9wcyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsIm1lbW9pemVkVmFsdWUiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsImNvbnRleHRUeXBlIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTSIsIk1oIiwicmV2ZWFsT3JkZXIiLCJOaCIsIk9oIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJQaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJRaCIsIlJoIiwiTiIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJkaSIsImVpIiwiZmkiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZ2kiLCJpaSIsImppIiwia2kiLCJnZXRTbmFwc2hvdCIsImxpIiwibWkiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJTaSIsImNvbXBvbmVudFN0YWNrIiwiVGkiLCJwaW5nQ2FjaGUiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNvbXBhcmUiLCJjaiIsImRqIiwiZWoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJraiIsImxqIiwicGVuZGluZ0NvbnRleHQiLCJtaiIsIkFqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWxNb2RlIiwieWoiLCJFaiIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJIaiIsIklqIiwiSmoiLCJLaiIsIlUiLCJMaiIsIldlYWtTZXQiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiV2siLCJtayIsIm5rIiwicGsiLCJZIiwiWiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJkbCIsImZsIiwiZ2wiLCJobCIsImlsIiwiamwiLCJ6aiIsIiRrIiwibGwiLCJyZXBvcnRFcnJvciIsIm1sIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJwbCIsInFsIiwic2wiLCJybCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwidGwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ1bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ3bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJEYXRhUm91dGVySG9vayIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJjcmVhdGVCcm93c2VyUm91dGVyIiwicGFyc2VIeWRyYXRpb25EYXRhIiwiX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhIiwiZGVzZXJpYWxpemVFcnJvcnMiLCJzZXJpYWxpemVkIiwiX190eXBlIiwiRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVyU3RhdGVDb250ZXh0IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJSb3V0ZUVycm9yQ29udGV4dCIsInVzZUluUm91dGVyQ29udGV4dCIsIkRlZmF1bHRFcnJvckVsZW1lbnQiLCJfc3RhdGUkZXJyb3JzIiwiaG9va05hbWUiLCJ1c2VEYXRhUm91dGVyU3RhdGUiLCJVc2VSb3V0ZUVycm9yIiwidXNlUm91dGVDb250ZXh0IiwidGhpc1JvdXRlIiwidXNlQ3VycmVudFJvdXRlSWQiLCJ1c2VSb3V0ZUVycm9yIiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImZvbnRTdHlsZSIsIlJlbmRlckVycm9yQm91bmRhcnkiLCJzdXBlciIsInN0YXRpYyIsImVycm9ySW5mbyIsIlByb3ZpZGVyIiwicm91dGVDb250ZXh0IiwiY29tcG9uZW50IiwiUmVuZGVyZWRSb3V0ZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwic3RhdGljQ29udGV4dCIsImVycm9yRWxlbWVudCIsIl9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIiwiQXdhaXRSZW5kZXJTdGF0dXMiLCJSb3V0ZXJQcm92aWRlciIsImZhbGxiYWNrRWxlbWVudCIsIlJvdXRlciIsIm5hdmlnYXRpb25UeXBlIiwiUm91dGVzIiwiUm91dGUiLCJfcHJvcHMiLCJfcmVmNCIsImJhc2VuYW1lUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJfcmVmNSIsImRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInJlbmRlcmVkTWF0Y2hlcyIsImRhdGFSb3V0ZXJTdGF0ZSIsImVycm9ySW5kZXgiLCJnZXRDaGlsZHJlbiIsIl9yZW5kZXJNYXRjaGVzIiwidXNlUm91dGVzIiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwiQXdhaXRFcnJvckJvdW5kYXJ5IiwicmVuZGVyRXJyb3IiLCJzdWNjZXNzIiwibmV2ZXJTZXR0bGVkUHJvbWlzZSIsIlJlYWN0IiwiQXdhaXRDb250ZXh0IiwiZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyIsInJvdXRlQ2xvbmUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5Iiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0Iiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=